let e,t,i,n,r,a,s;var o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},l={},h={},c=o.parcelRequire4ec0;null==c&&((c=function(e){if(e in l)return l[e].exports;if(e in h){var t=h[e];delete h[e];var i={id:e,exports:{}};return l[e]=i,t.call(i.exports,i,i.exports),i.exports}var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}).register=function(e,t){h[e]=t},o.parcelRequire4ec0=c);const u={ROTATE:0,DOLLY:1,PAN:2},d={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},p="srgb",m="srgb-linear",f="display-p3",g="display-p3-linear",_="linear",v="srgb",y="rec709",x="300 es";/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */class M{addEventListener(e,t){void 0===this._listeners&&(this._listeners={});let i=this._listeners;void 0===i[e]&&(i[e]=[]),-1===i[e].indexOf(t)&&i[e].push(t)}hasEventListener(e,t){if(void 0===this._listeners)return!1;let i=this._listeners;return void 0!==i[e]&&-1!==i[e].indexOf(t)}removeEventListener(e,t){if(void 0===this._listeners)return;let i=this._listeners,n=i[e];if(void 0!==n){let e=n.indexOf(t);-1!==e&&n.splice(e,1)}}dispatchEvent(e){if(void 0===this._listeners)return;let t=this._listeners,i=t[e.type];if(void 0!==i){e.target=this;// Make a copy, in case listeners are removed while iterating.
let t=i.slice(0);for(let i=0,n=t.length;i<n;i++)t[i].call(this,e);e.target=null}}}const b=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],S=Math.PI/180,E=180/Math.PI;// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function T(){let e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,i=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=b[255&e]+b[e>>8&255]+b[e>>16&255]+b[e>>24&255]+"-"+b[255&t]+b[t>>8&255]+"-"+b[t>>16&15|64]+b[t>>24&255]+"-"+b[63&i|128]+b[i>>8&255]+"-"+b[i>>16&255]+b[i>>24&255]+b[255&n]+b[n>>8&255]+b[n>>16&255]+b[n>>24&255];// .toLowerCase() here flattens concatenated strings to save heap memory space.
return r.toLowerCase()}function w(e,t,i){return Math.max(t,Math.min(i,e))}function A(e){return(e&e-1)==0&&0!==e}function R(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}function L(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return e/4294967295;case Uint16Array:return e/65535;case Uint8Array:return e/255;case Int32Array:return Math.max(e/2147483647,-1);case Int16Array:return Math.max(e/32767,-1);case Int8Array:return Math.max(e/127,-1);default:throw Error("Invalid component type.")}}function C(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return Math.round(4294967295*e);case Uint16Array:return Math.round(65535*e);case Uint8Array:return Math.round(255*e);case Int32Array:return Math.round(2147483647*e);case Int16Array:return Math.round(32767*e);case Int8Array:return Math.round(127*e);default:throw Error("Invalid component type.")}}class P{constructor(e=0,t=0){P.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){let t=this.x,i=this.y,n=e.elements;return this.x=n[0]*t+n[3]*i+n[6],this.y=n[1]*t+n[4]*i+n[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return(// assumes min < max, componentwise
this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this)}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){let i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){// computes the angle in radians with respect to the positive x-axis
let e=Math.atan2(-this.y,-this.x)+Math.PI;return e}angleTo(e){let t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;let i=this.dot(e)/t;// clamp, to handle numerical problems
return Math.acos(w(i,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){let t=this.x-e.x,i=this.y-e.y;return t*t+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){let i=Math.cos(t),n=Math.sin(t),r=this.x-e.x,a=this.y-e.y;return this.x=r*i-a*n+e.x,this.y=r*n+a*i+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class I{constructor(e,t,i,n,r,a,s,o,l){I.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==e&&this.set(e,t,i,n,r,a,s,o,l)}set(e,t,i,n,r,a,s,o,l){let h=this.elements;return h[0]=e,h[1]=n,h[2]=s,h[3]=t,h[4]=r,h[5]=o,h[6]=i,h[7]=a,h[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){let t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],this}extractBasis(e,t,i){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(e){let t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){let i=e.elements,n=t.elements,r=this.elements,a=i[0],s=i[3],o=i[6],l=i[1],h=i[4],c=i[7],u=i[2],d=i[5],p=i[8],m=n[0],f=n[3],g=n[6],_=n[1],v=n[4],y=n[7],x=n[2],M=n[5],b=n[8];return r[0]=a*m+s*_+o*x,r[3]=a*f+s*v+o*M,r[6]=a*g+s*y+o*b,r[1]=l*m+h*_+c*x,r[4]=l*f+h*v+c*M,r[7]=l*g+h*y+c*b,r[2]=u*m+d*_+p*x,r[5]=u*f+d*v+p*M,r[8]=u*g+d*y+p*b,this}multiplyScalar(e){let t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){let e=this.elements,t=e[0],i=e[1],n=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],h=e[8];return t*a*h-t*s*l-i*r*h+i*s*o+n*r*l-n*a*o}invert(){let e=this.elements,t=e[0],i=e[1],n=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],h=e[8],c=h*a-s*l,u=s*o-h*r,d=l*r-a*o,p=t*c+i*u+n*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);let m=1/p;return e[0]=c*m,e[1]=(n*l-h*i)*m,e[2]=(s*i-n*a)*m,e[3]=u*m,e[4]=(h*t-n*o)*m,e[5]=(n*r-s*t)*m,e[6]=d*m,e[7]=(i*o-l*t)*m,e[8]=(a*t-i*r)*m,this}transpose(){let e;let t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){let t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,i,n,r,a,s){let o=Math.cos(r),l=Math.sin(r);return this.set(i*o,i*l,-i*(o*a+l*s)+a+e,-n*l,n*o,-n*(-l*a+o*s)+s+t,0,0,1),this}//
scale(e,t){return this.premultiply(O.makeScale(e,t)),this}rotate(e){return this.premultiply(O.makeRotation(-e)),this}translate(e,t){return this.premultiply(O.makeTranslation(e,t)),this}// for 2D Transforms
makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){// counterclockwise
let t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,i,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}//
equals(e){let t=this.elements,i=e.elements;for(let e=0;e<9;e++)if(t[e]!==i[e])return!1;return!0}fromArray(e,t=0){for(let i=0;i<9;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){let i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const O=/*@__PURE__*/new I;function U(e){// assumes larger values usually on last
for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;// account for PRIMITIVE_RESTART_FIXED_INDEX, #24565
return!1}function N(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;const D={};function F(e){e in D||(D[e]=!0,console.warn(e))}/**
 * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping
 * or clipping. Based on W3C specifications for sRGB and Display P3,
 * and ICC specifications for the D50 connection space. Values in/out
 * are _linear_ sRGB and _linear_ Display P3.
 *
 * Note that both sRGB and Display P3 use the sRGB transfer functions.
 *
 * Reference:
 * - http://www.russellcottrell.com/photo/matrixCalculator.htm
 */const B=/*@__PURE__*/new I().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),z=/*@__PURE__*/new I().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),k={[m]:{transfer:_,primaries:y,toReference:e=>e,fromReference:e=>e},[p]:{transfer:v,primaries:y,toReference:e=>e.convertSRGBToLinear(),fromReference:e=>e.convertLinearToSRGB()},[g]:{transfer:_,primaries:"p3",toReference:e=>e.applyMatrix3(z),fromReference:e=>e.applyMatrix3(B)},[f]:{transfer:v,primaries:"p3",toReference:e=>e.convertSRGBToLinear().applyMatrix3(z),fromReference:e=>e.applyMatrix3(B).convertLinearToSRGB()}},V=new Set([m,g]),H={enabled:!0,_workingColorSpace:m,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(legacyMode){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!legacyMode},get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(colorSpace){if(!V.has(colorSpace))throw Error(`Unsupported working color space, "${colorSpace}".`);this._workingColorSpace=colorSpace},convert:function(e,t,i){if(!1===this.enabled||t===i||!t||!i)return e;let n=k[t].toReference,r=k[i].fromReference;return r(n(e))},fromWorkingColorSpace:function(e,t){return this.convert(e,this._workingColorSpace,t)},toWorkingColorSpace:function(e,t){return this.convert(e,t,this._workingColorSpace)},getPrimaries:function(e){return k[e].primaries},getTransfer:function(e){return""===e?_:k[e].transfer}};function G(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function q(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}class W{static getDataURL(t){let i;if(/^data:/i.test(t.src)||"undefined"==typeof HTMLCanvasElement)return t.src;if(t instanceof HTMLCanvasElement)i=t;else{void 0===e&&(e=N("canvas")),e.width=t.width,e.height=t.height;let n=e.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),i=e}return i.width>2048||i.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),i.toDataURL("image/jpeg",.6)):i.toDataURL("image/png")}static sRGBToLinear(e){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){let t=N("canvas");t.width=e.width,t.height=e.height;let i=t.getContext("2d");i.drawImage(e,0,0,e.width,e.height);let n=i.getImageData(0,0,e.width,e.height),r=n.data;for(let e=0;e<r.length;e++)r[e]=255*G(r[e]/255);return i.putImageData(n,0,0),t}if(!e.data)return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e;{let t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(255*G(t[e]/255)):t[e]=G(t[e]);return{data:t,width:e.width,height:e.height}}}}let X=0;class j{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:X++}),this.uuid=T(),this.data=e,this.version=0}set needsUpdate(e){!0===e&&this.version++}toJSON(e){let t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.images[this.uuid])return e.images[this.uuid];let i={uuid:this.uuid,url:""},n=this.data;if(null!==n){let e;if(Array.isArray(n)){// cube texture
e=[];for(let t=0,i=n.length;t<i;t++)n[t].isDataTexture?e.push(Y(n[t].image)):e.push(Y(n[t]))}else e=Y(n);i.url=e}return t||(e.images[this.uuid]=i),i}}function Y(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap?W.getDataURL(e):e.data?{data:Array.from(e.data),width:e.width,height:e.height,type:e.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Z=0;class Q extends M{constructor(e=Q.DEFAULT_IMAGE,t=Q.DEFAULT_MAPPING,i=1001,n=1001,r=1006,a=1008,s=1023,o=1009,l=Q.DEFAULT_ANISOTROPY,h=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Z++}),this.uuid=T(),this.name="",this.source=new j(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=i,this.wrapT=n,this.magFilter=r,this.minFilter=a,this.anisotropy=l,this.format=s,this.internalFormat=null,this.type=o,this.offset=new P(0,0),this.repeat=new P(1,1),this.center=new P(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new I,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,"string"==typeof h?this.colorSpace=h:(F("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=3001===h?p:""),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){let t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];let i={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),t||(e.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case 1e3:e.x=e.x-Math.floor(e.x);break;case 1001:e.x=e.x<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case 1e3:e.y=e.y-Math.floor(e.y);break;case 1001:e.y=e.y<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){!0===e&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return F("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===p?3001:3e3}set encoding(e){F("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=3001===e?p:""}}Q.DEFAULT_IMAGE=null,Q.DEFAULT_MAPPING=300,Q.DEFAULT_ANISOTROPY=1;class J{constructor(e=0,t=0,i=0,n=1){J.prototype.isVector4=!0,this.x=e,this.y=t,this.z=i,this.w=n}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,i,n){return this.x=e,this.y=t,this.z=i,this.w=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){let t=this.x,i=this.y,n=this.z,r=this.w,a=e.elements;return this.x=a[0]*t+a[4]*i+a[8]*n+a[12]*r,this.y=a[1]*t+a[5]*i+a[9]*n+a[13]*r,this.z=a[2]*t+a[6]*i+a[10]*n+a[14]*r,this.w=a[3]*t+a[7]*i+a[11]*n+a[15]*r,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
// q is assumed to be normalized
this.w=2*Math.acos(e.w);let t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,i,n;let r=e.elements,a=r[0],s=r[4],o=r[8],l=r[1],h=r[5],c=r[9],u=r[2],d=r[6],p=r[10];if(.01>Math.abs(s-l)&&.01>Math.abs(o-u)&&.01>Math.abs(c-d)){// singularity found
// first check for identity matrix which must have +1 for all terms
// in leading diagonal and zero in other terms
if(.1>Math.abs(s+l)&&.1>Math.abs(o+u)&&.1>Math.abs(c+d)&&.1>Math.abs(a+h+p-3))return(// this singularity is identity matrix so angle = 0
this.set(1,0,0,0),this);// zero angle, arbitrary axis
let e=(a+1)/2,r=(h+1)/2,m=(p+1)/2,f=(s+l)/4,g=(o+u)/4,_=(c+d)/4;return e>r&&e>m?e<.01?(t=0,i=.707106781,n=.707106781):(i=f/(t=Math.sqrt(e)),n=g/t):r>m?r<.01?(t=.707106781,i=0,n=.707106781):(t=f/(i=Math.sqrt(r)),n=_/i):m<.01?(t=.707106781,i=.707106781,n=0):(t=g/(n=Math.sqrt(m)),i=_/n),this.set(t,i,n,Math.PI),this;// return 180 deg rotation
}// as we have reached here there are no singularities so we can handle normally
let m=Math.sqrt((d-c)*(d-c)+(o-u)*(o-u)+(l-s)*(l-s));// used to normalize
return .001>Math.abs(m)&&(m=1),// prevent divide by zero, should not happen if matrix is orthogonal and should be
// caught by singularity test above, but I've left it in just in case
this.x=(d-c)/m,this.y=(o-u)/m,this.z=(l-s)/m,this.w=Math.acos((a+h+p-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return(// assumes min < max, componentwise
this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this)}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){let i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this.w=e.w+(t.w-e.w)*i,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/class K extends M{constructor(e=1,t=1,i={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new J(0,0,e,t),this.scissorTest=!1,this.viewport=new J(0,0,e,t),void 0!==i.encoding&&(// @deprecated, r152
F("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),i.colorSpace=3001===i.encoding?p:""),i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:1006,depthBuffer:!0,stencilBuffer:!1,depthTexture:null,samples:0},i),this.texture=new Q({width:e,height:t,depth:1},i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=i.generateMipmaps,this.texture.internalFormat=i.internalFormat,this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.depthTexture=i.depthTexture,this.samples=i.samples}setSize(e,t,i=1){(this.width!==e||this.height!==t||this.depth!==i)&&(this.width=e,this.height=t,this.depth=i,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=i,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;// ensure image object is not shared, see #20328
let t=Object.assign({},e.texture.image);return this.texture.source=new j(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,null!==e.depthTexture&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class $ extends K{constructor(e=1,t=1,i={}){super(e,t,i),this.isWebGLRenderTarget=!0}}class ee extends Q{constructor(e=null,t=1,i=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:i,depth:n},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class et{constructor(e=0,t=0,i=0,n=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=i,this._w=n}static slerpFlat(e,t,i,n,r,a,s){// fuzz-free, array-based Quaternion SLERP operation
let o=i[n+0],l=i[n+1],h=i[n+2],c=i[n+3],u=r[a+0],d=r[a+1],p=r[a+2],m=r[a+3];if(0===s){e[t+0]=o,e[t+1]=l,e[t+2]=h,e[t+3]=c;return}if(1===s){e[t+0]=u,e[t+1]=d,e[t+2]=p,e[t+3]=m;return}if(c!==m||o!==u||l!==d||h!==p){let e=1-s,t=o*u+l*d+h*p+c*m,i=t>=0?1:-1,n=1-t*t;// Skip the Slerp for tiny steps to avoid numeric problems:
if(n>Number.EPSILON){let r=Math.sqrt(n),a=Math.atan2(r,t*i);e=Math.sin(e*a)/r,s=Math.sin(s*a)/r}let r=s*i;// Normalize in case we just did a lerp:
if(o=o*e+u*r,l=l*e+d*r,h=h*e+p*r,c=c*e+m*r,e===1-s){let e=1/Math.sqrt(o*o+l*l+h*h+c*c);o*=e,l*=e,h*=e,c*=e}}e[t]=o,e[t+1]=l,e[t+2]=h,e[t+3]=c}static multiplyQuaternionsFlat(e,t,i,n,r,a){let s=i[n],o=i[n+1],l=i[n+2],h=i[n+3],c=r[a],u=r[a+1],d=r[a+2],p=r[a+3];return e[t]=s*p+h*c+o*d-l*u,e[t+1]=o*p+h*u+l*c-s*d,e[t+2]=l*p+h*d+s*u-o*c,e[t+3]=h*p-s*c-o*u-l*d,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,i,n){return this._x=e,this._y=t,this._z=i,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){let i=e._x,n=e._y,r=e._z,a=e._order,s=Math.cos,o=Math.sin,l=s(i/2),h=s(n/2),c=s(r/2),u=o(i/2),d=o(n/2),p=o(r/2);switch(a){case"XYZ":this._x=u*h*c+l*d*p,this._y=l*d*c-u*h*p,this._z=l*h*p+u*d*c,this._w=l*h*c-u*d*p;break;case"YXZ":this._x=u*h*c+l*d*p,this._y=l*d*c-u*h*p,this._z=l*h*p-u*d*c,this._w=l*h*c+u*d*p;break;case"ZXY":this._x=u*h*c-l*d*p,this._y=l*d*c+u*h*p,this._z=l*h*p+u*d*c,this._w=l*h*c-u*d*p;break;case"ZYX":this._x=u*h*c-l*d*p,this._y=l*d*c+u*h*p,this._z=l*h*p-u*d*c,this._w=l*h*c+u*d*p;break;case"YZX":this._x=u*h*c+l*d*p,this._y=l*d*c+u*h*p,this._z=l*h*p-u*d*c,this._w=l*h*c-u*d*p;break;case"XZY":this._x=u*h*c-l*d*p,this._y=l*d*c-u*h*p,this._z=l*h*p+u*d*c,this._w=l*h*c+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return!1!==t&&this._onChangeCallback(),this}setFromAxisAngle(e,t){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
// assumes axis is normalized
let i=t/2,n=Math.sin(i);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(e){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
let t=e.elements,i=t[0],n=t[4],r=t[8],a=t[1],s=t[5],o=t[9],l=t[2],h=t[6],c=t[10],u=i+s+c;if(u>0){let e=.5/Math.sqrt(u+1);this._w=.25/e,this._x=(h-o)*e,this._y=(r-l)*e,this._z=(a-n)*e}else if(i>s&&i>c){let e=2*Math.sqrt(1+i-s-c);this._w=(h-o)/e,this._x=.25*e,this._y=(n+a)/e,this._z=(r+l)/e}else if(s>c){let e=2*Math.sqrt(1+s-i-c);this._w=(r-l)/e,this._x=(n+a)/e,this._y=.25*e,this._z=(o+h)/e}else{let e=2*Math.sqrt(1+c-i-s);this._w=(a-n)/e,this._x=(r+l)/e,this._y=(o+h)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){// assumes direction vectors vFrom and vTo are normalized
let i=e.dot(t)+1;return i<Number.EPSILON?(// vFrom and vTo point in opposite directions
i=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0):(this._x=0,this._y=-e.z,this._z=e.y)):(// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x),this._w=i,this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(w(this.dot(e),-1,1)))}rotateTowards(e,t){let i=this.angleTo(e);return 0===i||this.slerp(e,Math.min(1,t/i)),this}identity(){return this.set(0,0,0,1)}invert(){// quaternion is assumed to have unit length
return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
let i=e._x,n=e._y,r=e._z,a=e._w,s=t._x,o=t._y,l=t._z,h=t._w;return this._x=i*h+a*s+n*l-r*o,this._y=n*h+a*o+r*s-i*l,this._z=r*h+a*l+i*o-n*s,this._w=a*h-i*s-n*o-r*l,this._onChangeCallback(),this}slerp(e,t){if(0===t)return this;if(1===t)return this.copy(e);let i=this._x,n=this._y,r=this._z,a=this._w,s=a*e._w+i*e._x+n*e._y+r*e._z;if(s<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,s=-s):this.copy(e),s>=1)return this._w=a,this._x=i,this._y=n,this._z=r,this;let o=1-s*s;if(o<=Number.EPSILON){let e=1-t;return this._w=e*a+t*this._w,this._x=e*i+t*this._x,this._y=e*n+t*this._y,this._z=e*r+t*this._z,this.normalize(),this._onChangeCallback(),this}let l=Math.sqrt(o),h=Math.atan2(l,s),c=Math.sin((1-t)*h)/l,u=Math.sin(t*h)/l;return this._w=a*c+this._w*u,this._x=i*c+this._x*u,this._y=n*c+this._y*u,this._z=r*c+this._z*u,this._onChangeCallback(),this}slerpQuaternions(e,t,i){return this.copy(e).slerp(t,i)}random(){// Derived from http://planning.cs.uiuc.edu/node198.html
// Note, this source uses w, x, y, z ordering,
// so we swap the order below.
let e=Math.random(),t=Math.sqrt(1-e),i=Math.sqrt(e),n=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(t*Math.cos(n),i*Math.sin(r),i*Math.cos(r),t*Math.sin(n))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class ei{constructor(e=0,t=0,i=0){ei.prototype.isVector3=!0,this.x=e,this.y=t,this.z=i}set(e,t,i){return void 0===i&&(i=this.z),this.x=e,this.y=t,this.z=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(er.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(er.setFromAxisAngle(e,t))}applyMatrix3(e){let t=this.x,i=this.y,n=this.z,r=e.elements;return this.x=r[0]*t+r[3]*i+r[6]*n,this.y=r[1]*t+r[4]*i+r[7]*n,this.z=r[2]*t+r[5]*i+r[8]*n,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){let t=this.x,i=this.y,n=this.z,r=e.elements,a=1/(r[3]*t+r[7]*i+r[11]*n+r[15]);return this.x=(r[0]*t+r[4]*i+r[8]*n+r[12])*a,this.y=(r[1]*t+r[5]*i+r[9]*n+r[13])*a,this.z=(r[2]*t+r[6]*i+r[10]*n+r[14])*a,this}applyQuaternion(e){let t=this.x,i=this.y,n=this.z,r=e.x,a=e.y,s=e.z,o=e.w,l=o*t+a*n-s*i,h=o*i+s*t-r*n,c=o*n+r*i-a*t,u=-r*t-a*i-s*n;return(// calculate result * inverse quat
this.x=l*o+-(u*r)+-(h*s)- -(c*a),this.y=h*o+-(u*a)+-(c*r)- -(l*s),this.z=c*o+-(u*s)+-(l*a)- -(h*r),this)}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){// input: THREE.Matrix4 affine matrix
// vector interpreted as a direction
let t=this.x,i=this.y,n=this.z,r=e.elements;return this.x=r[0]*t+r[4]*i+r[8]*n,this.y=r[1]*t+r[5]*i+r[9]*n,this.z=r[2]*t+r[6]*i+r[10]*n,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return(// assumes min < max, componentwise
this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this)}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){let i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}// TODO lengthSquared?
lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){let i=e.x,n=e.y,r=e.z,a=t.x,s=t.y,o=t.z;return this.x=n*o-r*s,this.y=r*a-i*o,this.z=i*s-n*a,this}projectOnVector(e){let t=e.lengthSq();if(0===t)return this.set(0,0,0);let i=e.dot(this)/t;return this.copy(e).multiplyScalar(i)}projectOnPlane(e){return en.copy(this).projectOnVector(e),this.sub(en)}reflect(e){// reflect incident vector off plane orthogonal to normal
// normal is assumed to have unit length
return this.sub(en.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){let t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;let i=this.dot(e)/t;// clamp, to handle numerical problems
return Math.acos(w(i,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){let t=this.x-e.x,i=this.y-e.y,n=this.z-e.z;return t*t+i*i+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,i){let n=Math.sin(t)*e;return this.x=n*Math.sin(i),this.y=Math.cos(t)*e,this.z=n*Math.cos(i),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,i){return this.x=e*Math.sin(t),this.y=i,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){let t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){let t=this.setFromMatrixColumn(e,0).length(),i=this.setFromMatrixColumn(e,1).length(),n=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=i,this.z=n,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,4*t)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,3*t)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){// Derived from https://mathworld.wolfram.com/SpherePointPicking.html
let e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,i=Math.sqrt(1-e**2);return this.x=i*Math.cos(t),this.y=i*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const en=/*@__PURE__*/new ei,er=/*@__PURE__*/new et;class ea{constructor(e=new ei(1/0,1/0,1/0),t=new ei(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t+=3)this.expandByPoint(eo.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,i=e.count;t<i;t++)this.expandByPoint(eo.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){let i=eo.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){if(// Computes the world-axis-aligned bounding box of an object (including its children),
// accounting for both the object's, and children's, world transforms
e.updateWorldMatrix(!1,!1),void 0!==e.boundingBox)null===e.boundingBox&&e.computeBoundingBox(),el.copy(e.boundingBox),el.applyMatrix4(e.matrixWorld),this.union(el);else{let i=e.geometry;if(void 0!==i){if(t&&void 0!==i.attributes&&void 0!==i.attributes.position){let t=i.attributes.position;for(let i=0,n=t.count;i<n;i++)eo.fromBufferAttribute(t,i).applyMatrix4(e.matrixWorld),this.expandByPoint(eo)}else null===i.boundingBox&&i.computeBoundingBox(),el.copy(i.boundingBox),el.applyMatrix4(e.matrixWorld),this.union(el)}}let i=e.children;for(let e=0,n=i.length;e<n;e++)this.expandByObject(i[e],t);return this}containsPoint(e){return!(e.x<this.min.x)&&!(e.x>this.max.x)&&!(e.y<this.min.y)&&!(e.y>this.max.y)&&!(e.z<this.min.z)&&!(e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){// This can potentially have a divide by zero if the box
// has a size dimension of 0.
return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){// using 6 splitting planes to rule out intersections.
return!(e.max.x<this.min.x)&&!(e.min.x>this.max.x)&&!(e.max.y<this.min.y)&&!(e.min.y>this.max.y)&&!(e.max.z<this.min.z)&&!(e.min.z>this.max.z)}intersectsSphere(e){// If that point is inside the sphere, the AABB and sphere intersect.
return(// Find the point on the AABB closest to the sphere center.
this.clampPoint(e.center,eo),eo.distanceToSquared(e.center)<=e.radius*e.radius)}intersectsPlane(e){// We compute the minimum and maximum dot product values. If those values
// are on the same side (back or front) of the plane, then there is no intersection.
let t,i;return e.normal.x>0?(t=e.normal.x*this.min.x,i=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,i=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,i+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,i+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,i+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,i+=e.normal.z*this.min.z),t<=-e.constant&&i>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;// compute box center and extents
this.getCenter(ef),eg.subVectors(this.max,ef),// translate triangle to aabb origin
eh.subVectors(e.a,ef),ec.subVectors(e.b,ef),eu.subVectors(e.c,ef),// compute edge vectors for triangle
ed.subVectors(ec,eh),ep.subVectors(eu,ec),em.subVectors(eh,eu);// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
let t=[0,-ed.z,ed.y,0,-ep.z,ep.y,0,-em.z,em.y,ed.z,0,-ed.x,ep.z,0,-ep.x,em.z,0,-em.x,-ed.y,ed.x,0,-ep.y,ep.x,0,-em.y,em.x,0];return!!(ey(t,eh,ec,eu,eg)&&ey(// test 3 face normals from the aabb
t=[1,0,0,0,1,0,0,0,1],eh,ec,eu,eg))&&(// finally testing the face normal of the triangle
// use already existing triangle edge vectors here
e_.crossVectors(ed,ep),ey(t=[e_.x,e_.y,e_.z],eh,ec,eu,eg))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,eo).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=.5*this.getSize(eo).length()),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()||(// NOTE: I am using a binary pattern to specify all 2^3 combinations below
es[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),es[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),es[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),es[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),es[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),es[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),es[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),es[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(es)),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const es=[/*@__PURE__*/new ei,/*@__PURE__*/new ei,/*@__PURE__*/new ei,/*@__PURE__*/new ei,/*@__PURE__*/new ei,/*@__PURE__*/new ei,/*@__PURE__*/new ei,/*@__PURE__*/new ei],eo=/*@__PURE__*/new ei,el=/*@__PURE__*/new ea,eh=/*@__PURE__*/new ei,ec=/*@__PURE__*/new ei,eu=/*@__PURE__*/new ei,ed=/*@__PURE__*/new ei,ep=/*@__PURE__*/new ei,em=/*@__PURE__*/new ei,ef=/*@__PURE__*/new ei,eg=/*@__PURE__*/new ei,e_=/*@__PURE__*/new ei,ev=/*@__PURE__*/new ei;function ey(e,t,i,n,r){for(let a=0,s=e.length-3;a<=s;a+=3){ev.fromArray(e,a);// project the aabb onto the separating axis
let s=r.x*Math.abs(ev.x)+r.y*Math.abs(ev.y)+r.z*Math.abs(ev.z),o=t.dot(ev),l=i.dot(ev),h=n.dot(ev);// actual test, basically see if either of the most extreme of the triangle points intersects r
if(Math.max(-Math.max(o,l,h),Math.min(o,l,h))>s)// the axis is separating and we can exit
return!1}return!0}const ex=/*@__PURE__*/new ea,eM=/*@__PURE__*/new ei,eb=/*@__PURE__*/new ei;class eS{constructor(e=new ei,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){let i=this.center;void 0!==t?i.copy(t):ex.setFromPoints(e).getCenter(i);let n=0;for(let t=0,r=e.length;t<r;t++)n=Math.max(n,i.distanceToSquared(e[t]));return this.radius=Math.sqrt(n),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){let t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){let i=this.center.distanceToSquared(e);return t.copy(e),i>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?// Empty sphere produces empty bounding box
e.makeEmpty():(e.set(this.center,this.center),e.expandByScalar(this.radius)),e}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;eM.subVectors(e,this.center);let t=eM.lengthSq();if(t>this.radius*this.radius){// calculate the minimal sphere
let e=Math.sqrt(t),i=(e-this.radius)*.5;this.center.addScaledVector(eM,i/e),this.radius+=i}return this}union(e){return e.isEmpty()||(this.isEmpty()?this.copy(e):!0===this.center.equals(e.center)?this.radius=Math.max(this.radius,e.radius):(eb.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(eM.copy(e.center).add(eb)),this.expandByPoint(eM.copy(e.center).sub(eb)))),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const eE=/*@__PURE__*/new ei,eT=/*@__PURE__*/new ei,ew=/*@__PURE__*/new ei,eA=/*@__PURE__*/new ei,eR=/*@__PURE__*/new ei,eL=/*@__PURE__*/new ei,eC=/*@__PURE__*/new ei;class eP{constructor(e=new ei,t=new ei(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,eE)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);let i=t.dot(this.direction);return i<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){let t=eE.subVectors(e,this.origin).dot(this.direction);return(// point behind the ray
t<0?this.origin.distanceToSquared(e):(eE.copy(this.origin).addScaledVector(this.direction,t),eE.distanceToSquared(e)))}distanceSqToSegment(e,t,i,n){let r,a,s,o;// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
// It returns the min distance between the ray and the segment
// defined by v0 and v1
// It can also set two optional targets :
// - The closest point on the ray
// - The closest point on the segment
eT.copy(e).add(t).multiplyScalar(.5),ew.copy(t).sub(e).normalize(),eA.copy(this.origin).sub(eT);let l=.5*e.distanceTo(t),h=-this.direction.dot(ew),c=eA.dot(this.direction),u=-eA.dot(ew),d=eA.lengthSq(),p=Math.abs(1-h*h);if(p>0){if(// The ray and segment are not parallel.
r=h*u-c,a=h*c-u,o=l*p,r>=0){if(a>=-o){if(a<=o){// region 0
// Minimum at interior points of ray and segment.
let e=1/p;r*=e,a*=e,s=r*(r+h*a+2*c)+a*(h*r+a+2*u)+d}else s=-(r=Math.max(0,-(h*// region 1
(a=l)+c)))*r+a*(a+2*u)+d}else s=-(r=Math.max(0,-(h*// region 5
(a=-l)+c)))*r+a*(a+2*u)+d}else a<=-o?(a=// region 4
(r=Math.max(0,-(-h*l+c)))>0?-l:Math.min(Math.max(-l,-u),l),s=-r*r+a*(a+2*u)+d):a<=o?(// region 3
r=0,s=(a=Math.min(Math.max(-l,-u),l))*(a+2*u)+d):(a=// region 2
(r=Math.max(0,-(h*l+c)))>0?l:Math.min(Math.max(-l,-u),l),s=-r*r+a*(a+2*u)+d)}else // Ray and segment are parallel.
a=h>0?-l:l,s=-(r=Math.max(0,-(h*a+c)))*r+a*(a+2*u)+d;return i&&i.copy(this.origin).addScaledVector(this.direction,r),n&&n.copy(eT).addScaledVector(ew,a),s}intersectSphere(e,t){eE.subVectors(e.center,this.origin);let i=eE.dot(this.direction),n=eE.dot(eE)-i*i,r=e.radius*e.radius;if(n>r)return null;let a=Math.sqrt(r-n),s=i-a,o=i+a;return(// test to see if t1 is behind the ray - if so, return null
o<0?null:s<0?this.at(o,t):this.at(s,t))}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){let t=e.normal.dot(this.direction);if(0===t)return(// line is coplanar, return origin
0===e.distanceToPoint(this.origin)?0:null);let i=-(this.origin.dot(e.normal)+e.constant)/t;// Return if the ray never intersects the plane
return i>=0?i:null}intersectPlane(e,t){let i=this.distanceToPlane(e);return null===i?null:this.at(i,t)}intersectsPlane(e){// check if the ray lies on the plane first
let t=e.distanceToPoint(this.origin);if(0===t)return!0;let i=e.normal.dot(this.direction);return i*t<0}intersectBox(e,t){let i,n,r,a,s,o;let l=1/this.direction.x,h=1/this.direction.y,c=1/this.direction.z,u=this.origin;return(l>=0?(i=(e.min.x-u.x)*l,n=(e.max.x-u.x)*l):(i=(e.max.x-u.x)*l,n=(e.min.x-u.x)*l),h>=0?(r=(e.min.y-u.y)*h,a=(e.max.y-u.y)*h):(r=(e.max.y-u.y)*h,a=(e.min.y-u.y)*h),i>a||r>n)?null:((r>i||isNaN(i))&&(i=r),(a<n||isNaN(n))&&(n=a),c>=0?(s=(e.min.z-u.z)*c,o=(e.max.z-u.z)*c):(s=(e.max.z-u.z)*c,o=(e.min.z-u.z)*c),i>o||s>n)?null:((s>i||i!=i)&&(i=s),(o<n||n!=n)&&(n=o),n<0)?null:this.at(i>=0?i:n,t)}intersectsBox(e){return null!==this.intersectBox(e,eE)}intersectTriangle(e,t,i,n,r){let a;// Compute the offset origin, edges, and normal.
// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
eR.subVectors(t,e),eL.subVectors(i,e),eC.crossVectors(eR,eL);// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
let s=this.direction.dot(eC);if(s>0){if(n)return null;a=1}else{if(!(s<0))return null;a=-1,s=-s}eA.subVectors(this.origin,e);let o=a*this.direction.dot(eL.crossVectors(eA,eL));// b1 < 0, no intersection
if(o<0)return null;let l=a*this.direction.dot(eR.cross(eA));// b2 < 0, no intersection
if(l<0||o+l>s)return null;// Line intersects triangle, check if ray does.
let h=-a*eA.dot(eC);return(// t < 0, no intersection
h<0?null:this.at(h/s,r))}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class eI{constructor(e,t,i,n,r,a,s,o,l,h,c,u,d,p,m,f){eI.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==e&&this.set(e,t,i,n,r,a,s,o,l,h,c,u,d,p,m,f)}set(e,t,i,n,r,a,s,o,l,h,c,u,d,p,m,f){let g=this.elements;return g[0]=e,g[4]=t,g[8]=i,g[12]=n,g[1]=r,g[5]=a,g[9]=s,g[13]=o,g[2]=l,g[6]=h,g[10]=c,g[14]=u,g[3]=d,g[7]=p,g[11]=m,g[15]=f,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new eI().fromArray(this.elements)}copy(e){let t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],t[9]=i[9],t[10]=i[10],t[11]=i[11],t[12]=i[12],t[13]=i[13],t[14]=i[14],t[15]=i[15],this}copyPosition(e){let t=this.elements,i=e.elements;return t[12]=i[12],t[13]=i[13],t[14]=i[14],this}setFromMatrix3(e){let t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,i){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(e,t,i){return this.set(e.x,t.x,i.x,0,e.y,t.y,i.y,0,e.z,t.z,i.z,0,0,0,0,1),this}extractRotation(e){// this method does not support reflection matrices
let t=this.elements,i=e.elements,n=1/eO.setFromMatrixColumn(e,0).length(),r=1/eO.setFromMatrixColumn(e,1).length(),a=1/eO.setFromMatrixColumn(e,2).length();return t[0]=i[0]*n,t[1]=i[1]*n,t[2]=i[2]*n,t[3]=0,t[4]=i[4]*r,t[5]=i[5]*r,t[6]=i[6]*r,t[7]=0,t[8]=i[8]*a,t[9]=i[9]*a,t[10]=i[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){let t=this.elements,i=e.x,n=e.y,r=e.z,a=Math.cos(i),s=Math.sin(i),o=Math.cos(n),l=Math.sin(n),h=Math.cos(r),c=Math.sin(r);if("XYZ"===e.order){let e=a*h,i=a*c,n=s*h,r=s*c;t[0]=o*h,t[4]=-o*c,t[8]=l,t[1]=i+n*l,t[5]=e-r*l,t[9]=-s*o,t[2]=r-e*l,t[6]=n+i*l,t[10]=a*o}else if("YXZ"===e.order){let e=o*h,i=o*c,n=l*h,r=l*c;t[0]=e+r*s,t[4]=n*s-i,t[8]=a*l,t[1]=a*c,t[5]=a*h,t[9]=-s,t[2]=i*s-n,t[6]=r+e*s,t[10]=a*o}else if("ZXY"===e.order){let e=o*h,i=o*c,n=l*h,r=l*c;t[0]=e-r*s,t[4]=-a*c,t[8]=n+i*s,t[1]=i+n*s,t[5]=a*h,t[9]=r-e*s,t[2]=-a*l,t[6]=s,t[10]=a*o}else if("ZYX"===e.order){let e=a*h,i=a*c,n=s*h,r=s*c;t[0]=o*h,t[4]=n*l-i,t[8]=e*l+r,t[1]=o*c,t[5]=r*l+e,t[9]=i*l-n,t[2]=-l,t[6]=s*o,t[10]=a*o}else if("YZX"===e.order){let e=a*o,i=a*l,n=s*o,r=s*l;t[0]=o*h,t[4]=r-e*c,t[8]=n*c+i,t[1]=c,t[5]=a*h,t[9]=-s*h,t[2]=-l*h,t[6]=i*c+n,t[10]=e-r*c}else if("XZY"===e.order){let e=a*o,i=a*l,n=s*o,r=s*l;t[0]=o*h,t[4]=-c,t[8]=l*h,t[1]=e*c+r,t[5]=a*h,t[9]=i*c-n,t[2]=n*c-i,t[6]=s*h,t[10]=r*c+e}return(// bottom row
t[3]=0,t[7]=0,t[11]=0,// last column
t[12]=0,t[13]=0,t[14]=0,t[15]=1,this)}makeRotationFromQuaternion(e){return this.compose(eN,e,eD)}lookAt(e,t,i){let n=this.elements;return ez.subVectors(e,t),0===ez.lengthSq()&&(ez.z=1),ez.normalize(),eF.crossVectors(i,ez),0===eF.lengthSq()&&(1===Math.abs(i.z)?ez.x+=1e-4:ez.z+=1e-4,ez.normalize(),eF.crossVectors(i,ez)),eF.normalize(),eB.crossVectors(ez,eF),n[0]=eF.x,n[4]=eB.x,n[8]=ez.x,n[1]=eF.y,n[5]=eB.y,n[9]=ez.y,n[2]=eF.z,n[6]=eB.z,n[10]=ez.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){let i=e.elements,n=t.elements,r=this.elements,a=i[0],s=i[4],o=i[8],l=i[12],h=i[1],c=i[5],u=i[9],d=i[13],p=i[2],m=i[6],f=i[10],g=i[14],_=i[3],v=i[7],y=i[11],x=i[15],M=n[0],b=n[4],S=n[8],E=n[12],T=n[1],w=n[5],A=n[9],R=n[13],L=n[2],C=n[6],P=n[10],I=n[14],O=n[3],U=n[7],N=n[11],D=n[15];return r[0]=a*M+s*T+o*L+l*O,r[4]=a*b+s*w+o*C+l*U,r[8]=a*S+s*A+o*P+l*N,r[12]=a*E+s*R+o*I+l*D,r[1]=h*M+c*T+u*L+d*O,r[5]=h*b+c*w+u*C+d*U,r[9]=h*S+c*A+u*P+d*N,r[13]=h*E+c*R+u*I+d*D,r[2]=p*M+m*T+f*L+g*O,r[6]=p*b+m*w+f*C+g*U,r[10]=p*S+m*A+f*P+g*N,r[14]=p*E+m*R+f*I+g*D,r[3]=_*M+v*T+y*L+x*O,r[7]=_*b+v*w+y*C+x*U,r[11]=_*S+v*A+y*P+x*N,r[15]=_*E+v*R+y*I+x*D,this}multiplyScalar(e){let t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){let e=this.elements,t=e[0],i=e[4],n=e[8],r=e[12],a=e[1],s=e[5],o=e[9],l=e[13],h=e[2],c=e[6],u=e[10],d=e[14],p=e[3],m=e[7],f=e[11],g=e[15];//TODO: make this more efficient
//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
return p*(+r*o*c-n*l*c-r*s*u+i*l*u+n*s*d-i*o*d)+m*(+t*o*d-t*l*u+r*a*u-n*a*d+n*l*h-r*o*h)+f*(+t*l*c-t*s*d-r*a*c+i*a*d+r*s*h-i*l*h)+g*(-n*s*h-t*o*c+t*s*u+n*a*c-i*a*u+i*o*h)}transpose(){let e;let t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(e,t,i){let n=this.elements;return e.isVector3?(n[12]=e.x,n[13]=e.y,n[14]=e.z):(n[12]=e,n[13]=t,n[14]=i),this}invert(){// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
let e=this.elements,t=e[0],i=e[1],n=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],h=e[8],c=e[9],u=e[10],d=e[11],p=e[12],m=e[13],f=e[14],g=e[15],_=c*f*l-m*u*l+m*o*d-s*f*d-c*o*g+s*u*g,v=p*u*l-h*f*l-p*o*d+a*f*d+h*o*g-a*u*g,y=h*m*l-p*c*l+p*s*d-a*m*d-h*s*g+a*c*g,x=p*c*o-h*m*o-p*s*u+a*m*u+h*s*f-a*c*f,M=t*_+i*v+n*y+r*x;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);let b=1/M;return e[0]=_*b,e[1]=(m*u*r-c*f*r-m*n*d+i*f*d+c*n*g-i*u*g)*b,e[2]=(s*f*r-m*o*r+m*n*l-i*f*l-s*n*g+i*o*g)*b,e[3]=(c*o*r-s*u*r-c*n*l+i*u*l+s*n*d-i*o*d)*b,e[4]=v*b,e[5]=(h*f*r-p*u*r+p*n*d-t*f*d-h*n*g+t*u*g)*b,e[6]=(p*o*r-a*f*r-p*n*l+t*f*l+a*n*g-t*o*g)*b,e[7]=(a*u*r-h*o*r+h*n*l-t*u*l-a*n*d+t*o*d)*b,e[8]=y*b,e[9]=(p*c*r-h*m*r-p*i*d+t*m*d+h*i*g-t*c*g)*b,e[10]=(a*m*r-p*s*r+p*i*l-t*m*l-a*i*g+t*s*g)*b,e[11]=(h*s*r-a*c*r-h*i*l+t*c*l+a*i*d-t*s*d)*b,e[12]=x*b,e[13]=(h*m*n-p*c*n+p*i*u-t*m*u-h*i*f+t*c*f)*b,e[14]=(p*s*n-a*m*n-p*i*o+t*m*o+a*i*f-t*s*f)*b,e[15]=(a*c*n-h*s*n+h*i*o-t*c*o-a*i*u+t*s*u)*b,this}scale(e){let t=this.elements,i=e.x,n=e.y,r=e.z;return t[0]*=i,t[4]*=n,t[8]*=r,t[1]*=i,t[5]*=n,t[9]*=r,t[2]*=i,t[6]*=n,t[10]*=r,t[3]*=i,t[7]*=n,t[11]*=r,this}getMaxScaleOnAxis(){let e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],i=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,i,n))}makeTranslation(e,t,i){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,i,0,0,0,1),this}makeRotationX(e){let t=Math.cos(e),i=Math.sin(e);return this.set(1,0,0,0,0,t,-i,0,0,i,t,0,0,0,0,1),this}makeRotationY(e){let t=Math.cos(e),i=Math.sin(e);return this.set(t,0,i,0,0,1,0,0,-i,0,t,0,0,0,0,1),this}makeRotationZ(e){let t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,0,i,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){// Based on http://www.gamedev.net/reference/articles/article1199.asp
let i=Math.cos(t),n=Math.sin(t),r=1-i,a=e.x,s=e.y,o=e.z,l=r*a,h=r*s;return this.set(l*a+i,l*s-n*o,l*o+n*s,0,l*s+n*o,h*s+i,h*o-n*a,0,l*o-n*s,h*o+n*a,r*o*o+i,0,0,0,0,1),this}makeScale(e,t,i){return this.set(e,0,0,0,0,t,0,0,0,0,i,0,0,0,0,1),this}makeShear(e,t,i,n,r,a){return this.set(1,i,r,0,e,1,a,0,t,n,1,0,0,0,0,1),this}compose(e,t,i){let n=this.elements,r=t._x,a=t._y,s=t._z,o=t._w,l=r+r,h=a+a,c=s+s,u=r*l,d=r*h,p=r*c,m=a*h,f=a*c,g=s*c,_=o*l,v=o*h,y=o*c,x=i.x,M=i.y,b=i.z;return n[0]=(1-(m+g))*x,n[1]=(d+y)*x,n[2]=(p-v)*x,n[3]=0,n[4]=(d-y)*M,n[5]=(1-(u+g))*M,n[6]=(f+_)*M,n[7]=0,n[8]=(p+v)*b,n[9]=(f-_)*b,n[10]=(1-(u+m))*b,n[11]=0,n[12]=e.x,n[13]=e.y,n[14]=e.z,n[15]=1,this}decompose(e,t,i){let n=this.elements,r=eO.set(n[0],n[1],n[2]).length(),a=eO.set(n[4],n[5],n[6]).length(),s=eO.set(n[8],n[9],n[10]).length(),o=this.determinant();o<0&&(r=-r),e.x=n[12],e.y=n[13],e.z=n[14],// scale the rotation part
eU.copy(this);let l=1/r,h=1/a,c=1/s;return eU.elements[0]*=l,eU.elements[1]*=l,eU.elements[2]*=l,eU.elements[4]*=h,eU.elements[5]*=h,eU.elements[6]*=h,eU.elements[8]*=c,eU.elements[9]*=c,eU.elements[10]*=c,t.setFromRotationMatrix(eU),i.x=r,i.y=a,i.z=s,this}makePerspective(e,t,i,n,r,a,s=2e3){let o,l;let h=this.elements;if(2e3===s)o=-(a+r)/(a-r),l=-2*a*r/(a-r);else if(2001===s)o=-a/(a-r),l=-a*r/(a-r);else throw Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+s);return h[0]=2*r/(t-e),h[4]=0,h[8]=(t+e)/(t-e),h[12]=0,h[1]=0,h[5]=2*r/(i-n),h[9]=(i+n)/(i-n),h[13]=0,h[2]=0,h[6]=0,h[10]=o,h[14]=l,h[3]=0,h[7]=0,h[11]=-1,h[15]=0,this}makeOrthographic(e,t,i,n,r,a,s=2e3){let o,l;let h=this.elements,c=1/(t-e),u=1/(i-n),d=1/(a-r);if(2e3===s)o=(a+r)*d,l=-2*d;else if(2001===s)o=r*d,l=-1*d;else throw Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+s);return h[0]=2*c,h[4]=0,h[8]=0,h[12]=-((t+e)*c),h[1]=0,h[5]=2*u,h[9]=0,h[13]=-((i+n)*u),h[2]=0,h[6]=0,h[10]=l,h[14]=-o,h[3]=0,h[7]=0,h[11]=0,h[15]=1,this}equals(e){let t=this.elements,i=e.elements;for(let e=0;e<16;e++)if(t[e]!==i[e])return!1;return!0}fromArray(e,t=0){for(let i=0;i<16;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){let i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e[t+9]=i[9],e[t+10]=i[10],e[t+11]=i[11],e[t+12]=i[12],e[t+13]=i[13],e[t+14]=i[14],e[t+15]=i[15],e}}const eO=/*@__PURE__*/new ei,eU=/*@__PURE__*/new eI,eN=/*@__PURE__*/new ei(0,0,0),eD=/*@__PURE__*/new ei(1,1,1),eF=/*@__PURE__*/new ei,eB=/*@__PURE__*/new ei,ez=/*@__PURE__*/new ei,ek=/*@__PURE__*/new eI,eV=/*@__PURE__*/new et;class eH{constructor(e=0,t=0,i=0,n=eH.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=i,this._order=n}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,i,n=this._order){return this._x=e,this._y=t,this._z=i,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,i=!0){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
let n=e.elements,r=n[0],a=n[4],s=n[8],o=n[1],l=n[5],h=n[9],c=n[2],u=n[6],d=n[10];switch(t){case"XYZ":this._y=Math.asin(w(s,-1,1)),.9999999>Math.abs(s)?(this._x=Math.atan2(-h,d),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-w(h,-1,1)),.9999999>Math.abs(h)?(this._y=Math.atan2(s,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-c,r),this._z=0);break;case"ZXY":this._x=Math.asin(w(u,-1,1)),.9999999>Math.abs(u)?(this._y=Math.atan2(-c,d),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-w(c,-1,1)),.9999999>Math.abs(c)?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-a,l));break;case"YZX":this._z=Math.asin(w(o,-1,1)),.9999999>Math.abs(o)?(this._x=Math.atan2(-h,l),this._y=Math.atan2(-c,r)):(this._x=0,this._y=Math.atan2(s,d));break;case"XZY":this._z=Math.asin(-w(a,-1,1)),.9999999>Math.abs(a)?(this._x=Math.atan2(u,l),this._y=Math.atan2(s,r)):(this._x=Math.atan2(-h,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,!0===i&&this._onChangeCallback(),this}setFromQuaternion(e,t,i){return ek.makeRotationFromQuaternion(e),this.setFromRotationMatrix(ek,t,i)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return(// WARNING: this discards revolution information -bhouston
eV.setFromEuler(this),this.setFromQuaternion(eV,e))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}eH.DEFAULT_ORDER="XYZ";class eG{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!=0}isEnabled(e){return(this.mask&(1<<e|0))!=0}}let eq=0;const eW=/*@__PURE__*/new ei,eX=/*@__PURE__*/new et,ej=/*@__PURE__*/new eI,eY=/*@__PURE__*/new ei,eZ=/*@__PURE__*/new ei,eQ=/*@__PURE__*/new ei,eJ=/*@__PURE__*/new et,eK=/*@__PURE__*/new ei(1,0,0),e$=/*@__PURE__*/new ei(0,1,0),e0=/*@__PURE__*/new ei(0,0,1),e1={type:"added"},e2={type:"removed"};class e3 extends M{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:eq++}),this.uuid=T(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=e3.DEFAULT_UP.clone();let e=new ei,t=new eH,i=new et,n=new ei(1,1,1);t._onChange(function(){i.setFromEuler(t,!1)}),i._onChange(function(){t.setFromQuaternion(i,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new eI},normalMatrix:{value:new I}}),this.matrix=new eI,this.matrixWorld=new eI,this.matrixAutoUpdate=e3.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=e3.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.layers=new eG,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){// assumes axis is normalized
this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){// assumes q is normalized
this.quaternion.copy(e)}rotateOnAxis(e,t){return(// rotate object on axis in object space
// axis is assumed to be normalized
eX.setFromAxisAngle(e,t),this.quaternion.multiply(eX),this)}rotateOnWorldAxis(e,t){return(// rotate object on axis in world space
// axis is assumed to be normalized
// method assumes no rotated parent
eX.setFromAxisAngle(e,t),this.quaternion.premultiply(eX),this)}rotateX(e){return this.rotateOnAxis(eK,e)}rotateY(e){return this.rotateOnAxis(e$,e)}rotateZ(e){return this.rotateOnAxis(e0,e)}translateOnAxis(e,t){return(// translate object by distance along axis in object space
// axis is assumed to be normalized
eW.copy(e).applyQuaternion(this.quaternion),this.position.add(eW.multiplyScalar(t)),this)}translateX(e){return this.translateOnAxis(eK,e)}translateY(e){return this.translateOnAxis(e$,e)}translateZ(e){return this.translateOnAxis(e0,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(ej.copy(this.matrixWorld).invert())}lookAt(e,t,i){e.isVector3?eY.copy(e):eY.set(e,t,i);let n=this.parent;this.updateWorldMatrix(!0,!1),eZ.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ej.lookAt(eZ,eY,this.up):ej.lookAt(eY,eZ,this.up),this.quaternion.setFromRotationMatrix(ej),n&&(ej.extractRotation(n.matrixWorld),eX.setFromRotationMatrix(ej),this.quaternion.premultiply(eX.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this?console.error("THREE.Object3D.add: object can't be added as a child of itself.",e):e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(e1)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}let t=this.children.indexOf(e);return -1!==t&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(e2)),this}removeFromParent(){let e=this.parent;return null!==e&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return(// adds object as a child of this, while maintaining the object's world transform
// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
this.updateWorldMatrix(!0,!1),ej.copy(this.matrixWorld).invert(),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),ej.multiply(e.parent.matrixWorld)),e.applyMatrix4(ej),this.add(e),e.updateWorldMatrix(!1,!0),this)}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let i=0,n=this.children.length;i<n;i++){let n=this.children[i],r=n.getObjectByProperty(e,t);if(void 0!==r)return r}}getObjectsByProperty(e,t){let i=[];this[e]===t&&i.push(this);for(let n=0,r=this.children.length;n<r;n++){let r=this.children[n].getObjectsByProperty(e,t);r.length>0&&(i=i.concat(r))}return i}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(eZ,e,eQ),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(eZ,eJ,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);let t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);let t=this.children;for(let i=0,n=t.length;i<n;i++)t[i].traverse(e)}traverseVisible(e){if(!1===this.visible)return;e(this);let t=this.children;for(let i=0,n=t.length;i<n;i++)t[i].traverseVisible(e)}traverseAncestors(e){let t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);// update children
let t=this.children;for(let i=0,n=t.length;i<n;i++){let n=t[i];(!0===n.matrixWorldAutoUpdate||!0===e)&&n.updateMatrixWorld(e)}}updateWorldMatrix(e,t){let i=this.parent;// update children
if(!0===e&&null!==i&&!0===i.matrixWorldAutoUpdate&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t){let e=this.children;for(let t=0,i=e.length;t<i;t++){let i=e[t];!0===i.matrixWorldAutoUpdate&&i.updateWorldMatrix(!1,!0)}}}toJSON(e){// meta is a string when called from JSON.stringify
let t=void 0===e||"string"==typeof e,i={};t&&(// initialize meta obj
e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});// standard Object3D serialization
let n={};//
function r(t,i){return void 0===t[i.uuid]&&(t[i.uuid]=i.toJSON(e)),i.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),n.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(n.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=r(e.geometries,this.geometry);let t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){let i=t.shapes;if(Array.isArray(i))for(let t=0,n=i.length;t<n;t++){let n=i[t];r(e.shapes,n)}else r(e.shapes,i)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(e.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material){if(Array.isArray(this.material)){let t=[];for(let i=0,n=this.material.length;i<n;i++)t.push(r(e.materials,this.material[i]));n.material=t}else n.material=r(e.materials,this.material)}//
if(this.children.length>0){n.children=[];for(let t=0;t<this.children.length;t++)n.children.push(this.children[t].toJSON(e).object)}//
if(this.animations.length>0){n.animations=[];for(let t=0;t<this.animations.length;t++){let i=this.animations[t];n.animations.push(r(e.animations,i))}}if(t){let t=a(e.geometries),n=a(e.materials),r=a(e.textures),s=a(e.images),o=a(e.shapes),l=a(e.skeletons),h=a(e.animations),c=a(e.nodes);t.length>0&&(i.geometries=t),n.length>0&&(i.materials=n),r.length>0&&(i.textures=r),s.length>0&&(i.images=s),o.length>0&&(i.shapes=o),l.length>0&&(i.skeletons=l),h.length>0&&(i.animations=h),c.length>0&&(i.nodes=c)}return i.object=n,i;// extract data from the cache hash
// remove metadata on each item
// and return as array
function a(e){let t=[];for(let i in e){let n=e[i];delete n.metadata,t.push(n)}return t}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(let t=0;t<e.children.length;t++){let i=e.children[t];this.add(i.clone())}return this}}e3.DEFAULT_UP=/*@__PURE__*/new ei(0,1,0),e3.DEFAULT_MATRIX_AUTO_UPDATE=!0,e3.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const e5=/*@__PURE__*/new ei,e4=/*@__PURE__*/new ei,e6=/*@__PURE__*/new ei,e7=/*@__PURE__*/new ei,e8=/*@__PURE__*/new ei,e9=/*@__PURE__*/new ei,te=/*@__PURE__*/new ei,tt=/*@__PURE__*/new ei,ti=/*@__PURE__*/new ei,tn=/*@__PURE__*/new ei;let tr=!1;class ta{constructor(e=new ei,t=new ei,i=new ei){this.a=e,this.b=t,this.c=i}static getNormal(e,t,i,n){n.subVectors(i,t),e5.subVectors(e,t),n.cross(e5);let r=n.lengthSq();return r>0?n.multiplyScalar(1/Math.sqrt(r)):n.set(0,0,0)}// static/instance method to calculate barycentric coordinates
// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
static getBarycoord(e,t,i,n,r){e5.subVectors(n,t),e4.subVectors(i,t),e6.subVectors(e,t);let a=e5.dot(e5),s=e5.dot(e4),o=e5.dot(e6),l=e4.dot(e4),h=e4.dot(e6),c=a*l-s*s;// collinear or singular triangle
if(0===c)// not sure if this is the best idea, maybe should be returning undefined
return r.set(-2,-1,-1);let u=1/c,d=(l*o-s*h)*u,p=(a*h-s*o)*u;// barycentric coordinates must always sum to 1
return r.set(1-d-p,p,d)}static containsPoint(e,t,i,n){return this.getBarycoord(e,t,i,n,e7),e7.x>=0&&e7.y>=0&&e7.x+e7.y<=1}static getUV(e,t,i,n,r,a,s,o){return!1===tr&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),tr=!0),this.getInterpolation(e,t,i,n,r,a,s,o)}static getInterpolation(e,t,i,n,r,a,s,o){return this.getBarycoord(e,t,i,n,e7),o.setScalar(0),o.addScaledVector(r,e7.x),o.addScaledVector(a,e7.y),o.addScaledVector(s,e7.z),o}static isFrontFacing(e,t,i,n){// strictly front facing
return e5.subVectors(i,t),e4.subVectors(e,t),0>e5.cross(e4).dot(n)}set(e,t,i){return this.a.copy(e),this.b.copy(t),this.c.copy(i),this}setFromPointsAndIndices(e,t,i,n){return this.a.copy(e[t]),this.b.copy(e[i]),this.c.copy(e[n]),this}setFromAttributeAndIndices(e,t,i,n){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,i),this.c.fromBufferAttribute(e,n),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return e5.subVectors(this.c,this.b),e4.subVectors(this.a,this.b),.5*e5.cross(e4).length()}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return ta.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return ta.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,i,n,r){return!1===tr&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),tr=!0),ta.getInterpolation(e,this.a,this.b,this.c,t,i,n,r)}getInterpolation(e,t,i,n,r){return ta.getInterpolation(e,this.a,this.b,this.c,t,i,n,r)}containsPoint(e){return ta.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return ta.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){let i,n;let r=this.a,a=this.b,s=this.c;// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
// under the accompanying license; see chapter 5.1.5 for detailed explanation.
// basically, we're distinguishing which of the voronoi regions of the triangle
// the point lies in with the minimum amount of redundant computation.
e8.subVectors(a,r),e9.subVectors(s,r),tt.subVectors(e,r);let o=e8.dot(tt),l=e9.dot(tt);if(o<=0&&l<=0)return t.copy(r);ti.subVectors(e,a);let h=e8.dot(ti),c=e9.dot(ti);if(h>=0&&c<=h)return t.copy(a);let u=o*c-h*l;if(u<=0&&o>=0&&h<=0)// edge region of AB; barycentric coords (1-v, v, 0)
return i=o/(o-h),t.copy(r).addScaledVector(e8,i);tn.subVectors(e,s);let d=e8.dot(tn),p=e9.dot(tn);if(p>=0&&d<=p)return t.copy(s);let m=d*l-o*p;if(m<=0&&l>=0&&p<=0)// edge region of AC; barycentric coords (1-w, 0, w)
return n=l/(l-p),t.copy(r).addScaledVector(e9,n);let f=h*p-d*c;if(f<=0&&c-h>=0&&d-p>=0)// edge region of BC; barycentric coords (0, 1-w, w)
return te.subVectors(s,a),n=(c-h)/(c-h+(d-p)),t.copy(a).addScaledVector(te,n);// edge region of BC
// face region
let g=1/(f+m+u);return(// u = va * denom
i=m*g,n=u*g,t.copy(r).addScaledVector(e8,i).addScaledVector(e9,n))}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let ts=0;class to extends M{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:ts++}),this.uuid=T(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(void 0!==e)for(let t in e){let i=e[t];if(void 0===i){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}let n=this[t];if(void 0===n){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[t]=i}}toJSON(e){let t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});let i={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};// TODO: Copied from Object3D.toJSON
function n(e){let t=[];for(let i in e){let n=e[i];delete n.metadata,t.push(n)}return t}if(// standard Material serialization
i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),void 0!==this.sheen&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearcoat&&(i.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(i.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(i.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),void 0!==this.anisotropy&&(i.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(e).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(e).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(e).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(e).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(e).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(e).uuid,void 0!==this.combine&&(i.combine=this.combine)),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(i.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.transmission&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(e).uuid),void 0!==this.thickness&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(e).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(i.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(i.size=this.size),null!==this.shadowSide&&(i.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(i.blending=this.blending),0!==this.side&&(i.side=this.side),!0===this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=!0),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,i.colorWrite=this.colorWrite,i.stencilWrite=this.stencilWrite,i.stencilWriteMask=this.stencilWriteMask,i.stencilFunc=this.stencilFunc,i.stencilRef=this.stencilRef,i.stencilFuncMask=this.stencilFuncMask,i.stencilFail=this.stencilFail,i.stencilZFail=this.stencilZFail,i.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.alphaHash&&(i.alphaHash=!0),!0===this.alphaToCoverage&&(i.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=!0),!0===this.forceSinglePass&&(i.forceSinglePass=!0),!0===this.wireframe&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(i.flatShading=!0),!1===this.visible&&(i.visible=!1),!1===this.toneMapped&&(i.toneMapped=!1),!1===this.fog&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData),t){let t=n(e.textures),r=n(e.images);t.length>0&&(i.textures=t),r.length>0&&(i.images=r)}return i}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;let t=e.clippingPlanes,i=null;if(null!==t){let e=t.length;i=Array(e);for(let n=0;n!==e;++n)i[n]=t[n].clone()}return this.clippingPlanes=i,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}}const tl={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},th={h:0,s:0,l:0},tc={h:0,s:0,l:0};function tu(e,t,i){return(i<0&&(i+=1),i>1&&(i-=1),i<1/6)?e+(t-e)*6*i:i<.5?t:i<2/3?e+(t-e)*6*(2/3-i):e}class td{constructor(e,t,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,i)}set(e,t,i){return void 0===t&&void 0===i?e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e):this.setRGB(e,t,i),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=p){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,H.toWorkingColorSpace(this,t),this}setRGB(e,t,i,n=H.workingColorSpace){return this.r=e,this.g=t,this.b=i,H.toWorkingColorSpace(this,n),this}setHSL(e,t,i,n=H.workingColorSpace){if(// h,s,l ranges are in 0.0 - 1.0
e=(e%1+1)%1,t=w(t,0,1),i=w(i,0,1),0===t)this.r=this.g=this.b=i;else{let n=i<=.5?i*(1+t):i+t-i*t,r=2*i-n;this.r=tu(r,n,e+1/3),this.g=tu(r,n,e),this.b=tu(r,n,e-1/3)}return H.toWorkingColorSpace(this,n),this}setStyle(e,t=p){let i;function n(t){void 0!==t&&1>parseFloat(t)&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;let a=i[1],s=i[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return(// rgb(255,0,0) rgba(255,0,0,0.5)
n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t));if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return(// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t));break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return(// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t));break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){// hex color
let n=i[1],r=n.length;if(3===r)return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,t);if(6===r)return this.setHex(parseInt(n,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=p){// color keywords
let i=tl[e.toLowerCase()];return void 0!==i?this.setHex(i,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=G(e.r),this.g=G(e.g),this.b=G(e.b),this}copyLinearToSRGB(e){return this.r=q(e.r),this.g=q(e.g),this.b=q(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=p){return H.fromWorkingColorSpace(tp.copy(this),e),65536*Math.round(w(255*tp.r,0,255))+256*Math.round(w(255*tp.g,0,255))+Math.round(w(255*tp.b,0,255))}getHexString(e=p){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=H.workingColorSpace){let i,n;// h,s,l ranges are in 0.0 - 1.0
H.fromWorkingColorSpace(tp.copy(this),t);let r=tp.r,a=tp.g,s=tp.b,o=Math.max(r,a,s),l=Math.min(r,a,s),h=(l+o)/2;if(l===o)i=0,n=0;else{let e=o-l;switch(n=h<=.5?e/(o+l):e/(2-o-l),o){case r:i=(a-s)/e+(a<s?6:0);break;case a:i=(s-r)/e+2;break;case s:i=(r-a)/e+4}i/=6}return e.h=i,e.s=n,e.l=h,e}getRGB(e,t=H.workingColorSpace){return H.fromWorkingColorSpace(tp.copy(this),t),e.r=tp.r,e.g=tp.g,e.b=tp.b,e}getStyle(e=p){H.fromWorkingColorSpace(tp.copy(this),e);let t=tp.r,i=tp.g,n=tp.b;return e!==p?`color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${n.toFixed(3)})`:`rgb(${Math.round(255*t)},${Math.round(255*i)},${Math.round(255*n)})`}offsetHSL(e,t,i){return this.getHSL(th),this.setHSL(th.h+e,th.s+t,th.l+i)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,i){return this.r=e.r+(t.r-e.r)*i,this.g=e.g+(t.g-e.g)*i,this.b=e.b+(t.b-e.b)*i,this}lerpHSL(e,t){this.getHSL(th),e.getHSL(tc);let i=(1-t)*th.h+t*tc.h,n=(1-t)*th.s+t*tc.s,r=(1-t)*th.l+t*tc.l;return this.setHSL(i,n,r),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){let t=this.r,i=this.g,n=this.b,r=e.elements;return this.r=r[0]*t+r[3]*i+r[6]*n,this.g=r[1]*t+r[4]*i+r[7]*n,this.b=r[2]*t+r[5]*i+r[8]*n,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const tp=/*@__PURE__*/new td;td.NAMES=tl;class tm extends to{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new td(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const tf=/*@__PURE__*/new ei,tg=/*@__PURE__*/new P;class t_{constructor(e,t,i=!1){if(Array.isArray(e))throw TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=i,this.usage=35044,this.updateRange={offset:0,count:-1},this.gpuType=1015,this.version=0}onUploadCallback(){}set needsUpdate(e){!0===e&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,i){e*=this.itemSize,i*=t.itemSize;for(let n=0,r=this.itemSize;n<r;n++)this.array[e+n]=t.array[i+n];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(2===this.itemSize)for(let t=0,i=this.count;t<i;t++)tg.fromBufferAttribute(this,t),tg.applyMatrix3(e),this.setXY(t,tg.x,tg.y);else if(3===this.itemSize)for(let t=0,i=this.count;t<i;t++)tf.fromBufferAttribute(this,t),tf.applyMatrix3(e),this.setXYZ(t,tf.x,tf.y,tf.z);return this}applyMatrix4(e){for(let t=0,i=this.count;t<i;t++)tf.fromBufferAttribute(this,t),tf.applyMatrix4(e),this.setXYZ(t,tf.x,tf.y,tf.z);return this}applyNormalMatrix(e){for(let t=0,i=this.count;t<i;t++)tf.fromBufferAttribute(this,t),tf.applyNormalMatrix(e),this.setXYZ(t,tf.x,tf.y,tf.z);return this}transformDirection(e){for(let t=0,i=this.count;t<i;t++)tf.fromBufferAttribute(this,t),tf.transformDirection(e),this.setXYZ(t,tf.x,tf.y,tf.z);return this}set(e,t=0){return(// Matching BufferAttribute constructor, do not normalize the array.
this.array.set(e,t),this)}getComponent(e,t){let i=this.array[e*this.itemSize+t];return this.normalized&&(i=L(i,this.array)),i}setComponent(e,t,i){return this.normalized&&(i=C(i,this.array)),this.array[e*this.itemSize+t]=i,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=L(t,this.array)),t}setX(e,t){return this.normalized&&(t=C(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=L(t,this.array)),t}setY(e,t){return this.normalized&&(t=C(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=L(t,this.array)),t}setZ(e,t){return this.normalized&&(t=C(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=L(t,this.array)),t}setW(e,t){return this.normalized&&(t=C(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,i){return e*=this.itemSize,this.normalized&&(t=C(t,this.array),i=C(i,this.array)),this.array[e+0]=t,this.array[e+1]=i,this}setXYZ(e,t,i,n){return e*=this.itemSize,this.normalized&&(t=C(t,this.array),i=C(i,this.array),n=C(n,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=n,this}setXYZW(e,t,i,n,r){return e*=this.itemSize,this.normalized&&(t=C(t,this.array),i=C(i,this.array),n=C(n,this.array),r=C(r,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=n,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){let e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(e.name=this.name),35044!==this.usage&&(e.usage=this.usage),(0!==this.updateRange.offset||-1!==this.updateRange.count)&&(e.updateRange=this.updateRange),e}}class tv extends t_{constructor(e,t,i){super(new Uint16Array(e),t,i)}}class ty extends t_{constructor(e,t,i){super(new Uint32Array(e),t,i)}}class tx extends t_{constructor(e,t,i){super(new Float32Array(e),t,i)}}let tM=0;const tb=/*@__PURE__*/new eI,tS=/*@__PURE__*/new e3,tE=/*@__PURE__*/new ei,tT=/*@__PURE__*/new ea,tw=/*@__PURE__*/new ea,tA=/*@__PURE__*/new ei;class tR extends M{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:tM++}),this.uuid=T(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(U(e)?ty:tv)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return void 0!==this.attributes[e]}addGroup(e,t,i=0){this.groups.push({start:e,count:t,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){let t=this.attributes.position;void 0!==t&&(t.applyMatrix4(e),t.needsUpdate=!0);let i=this.attributes.normal;if(void 0!==i){let t=new I().getNormalMatrix(e);i.applyNormalMatrix(t),i.needsUpdate=!0}let n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(e),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(e){return tb.makeRotationFromQuaternion(e),this.applyMatrix4(tb),this}rotateX(e){return(// rotate geometry around world x-axis
tb.makeRotationX(e),this.applyMatrix4(tb),this)}rotateY(e){return(// rotate geometry around world y-axis
tb.makeRotationY(e),this.applyMatrix4(tb),this)}rotateZ(e){return(// rotate geometry around world z-axis
tb.makeRotationZ(e),this.applyMatrix4(tb),this)}translate(e,t,i){return(// translate geometry
tb.makeTranslation(e,t,i),this.applyMatrix4(tb),this)}scale(e,t,i){return(// scale geometry
tb.makeScale(e,t,i),this.applyMatrix4(tb),this)}lookAt(e){return tS.lookAt(e),tS.updateMatrix(),this.applyMatrix4(tS.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(tE).negate(),this.translate(tE.x,tE.y,tE.z),this}setFromPoints(e){let t=[];for(let i=0,n=e.length;i<n;i++){let n=e[i];t.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new tx(t,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new ea);let e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new ei(-1/0,-1/0,-1/0),new ei(1/0,1/0,1/0));return}if(void 0!==e)// process morph attributes if present
{if(this.boundingBox.setFromBufferAttribute(e),t)for(let e=0,i=t.length;e<i;e++){let i=t[e];tT.setFromBufferAttribute(i),this.morphTargetsRelative?(tA.addVectors(this.boundingBox.min,tT.min),this.boundingBox.expandByPoint(tA),tA.addVectors(this.boundingBox.max,tT.max),this.boundingBox.expandByPoint(tA)):(this.boundingBox.expandByPoint(tT.min),this.boundingBox.expandByPoint(tT.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new eS);let e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new ei,1/0);return}if(e){// first, find the center of the bounding sphere
let i=this.boundingSphere.center;// process morph attributes if present
if(tT.setFromBufferAttribute(e),t)for(let e=0,i=t.length;e<i;e++){let i=t[e];tw.setFromBufferAttribute(i),this.morphTargetsRelative?(tA.addVectors(tT.min,tw.min),tT.expandByPoint(tA),tA.addVectors(tT.max,tw.max),tT.expandByPoint(tA)):(tT.expandByPoint(tw.min),tT.expandByPoint(tw.max))}tT.getCenter(i);// second, try to find a boundingSphere with a radius smaller than the
// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
let n=0;for(let t=0,r=e.count;t<r;t++)tA.fromBufferAttribute(e,t),n=Math.max(n,i.distanceToSquared(tA));// process morph attributes if present
if(t)for(let r=0,a=t.length;r<a;r++){let a=t[r],s=this.morphTargetsRelative;for(let t=0,r=a.count;t<r;t++)tA.fromBufferAttribute(a,t),s&&(tE.fromBufferAttribute(e,t),tA.add(tE)),n=Math.max(n,i.distanceToSquared(tA))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){let e=this.index,t=this.attributes;// based on http://www.terathon.com/code/tangent.html
// (per vertex tangents)
if(null===e||void 0===t.position||void 0===t.normal||void 0===t.uv){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}let i=e.array,n=t.position.array,r=t.normal.array,a=t.uv.array,s=n.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new t_(new Float32Array(4*s),4));let o=this.getAttribute("tangent").array,l=[],h=[];for(let e=0;e<s;e++)l[e]=new ei,h[e]=new ei;let c=new ei,u=new ei,d=new ei,p=new P,m=new P,f=new P,g=new ei,_=new ei,v=this.groups;0===v.length&&(v=[{start:0,count:i.length}]);for(let e=0,t=v.length;e<t;++e){let t=v[e],r=t.start,s=t.count;for(let e=r,t=r+s;e<t;e+=3)!function(e,t,i){c.fromArray(n,3*e),u.fromArray(n,3*t),d.fromArray(n,3*i),p.fromArray(a,2*e),m.fromArray(a,2*t),f.fromArray(a,2*i),u.sub(c),d.sub(c),m.sub(p),f.sub(p);let r=1/(m.x*f.y-f.x*m.y);isFinite(r)&&(g.copy(u).multiplyScalar(f.y).addScaledVector(d,-m.y).multiplyScalar(r),_.copy(d).multiplyScalar(m.x).addScaledVector(u,-f.x).multiplyScalar(r),l[e].add(g),l[t].add(g),l[i].add(g),h[e].add(_),h[t].add(_),h[i].add(_))}(i[e+0],i[e+1],i[e+2])}let y=new ei,x=new ei,M=new ei,b=new ei;function S(e){M.fromArray(r,3*e),b.copy(M);let t=l[e];// Gram-Schmidt orthogonalize
y.copy(t),y.sub(M.multiplyScalar(M.dot(t))).normalize(),// Calculate handedness
x.crossVectors(b,t);let i=x.dot(h[e]);o[4*e]=y.x,o[4*e+1]=y.y,o[4*e+2]=y.z,o[4*e+3]=i<0?-1:1}for(let e=0,t=v.length;e<t;++e){let t=v[e],n=t.start,r=t.count;for(let e=n,t=n+r;e<t;e+=3)S(i[e+0]),S(i[e+1]),S(i[e+2])}}computeVertexNormals(){let e=this.index,t=this.getAttribute("position");if(void 0!==t){let i=this.getAttribute("normal");if(void 0===i)i=new t_(new Float32Array(3*t.count),3),this.setAttribute("normal",i);else for(let e=0,t=i.count;e<t;e++)i.setXYZ(e,0,0,0);let n=new ei,r=new ei,a=new ei,s=new ei,o=new ei,l=new ei,h=new ei,c=new ei;// indexed elements
if(e)for(let u=0,d=e.count;u<d;u+=3){let d=e.getX(u+0),p=e.getX(u+1),m=e.getX(u+2);n.fromBufferAttribute(t,d),r.fromBufferAttribute(t,p),a.fromBufferAttribute(t,m),h.subVectors(a,r),c.subVectors(n,r),h.cross(c),s.fromBufferAttribute(i,d),o.fromBufferAttribute(i,p),l.fromBufferAttribute(i,m),s.add(h),o.add(h),l.add(h),i.setXYZ(d,s.x,s.y,s.z),i.setXYZ(p,o.x,o.y,o.z),i.setXYZ(m,l.x,l.y,l.z)}else for(let e=0,s=t.count;e<s;e+=3)n.fromBufferAttribute(t,e+0),r.fromBufferAttribute(t,e+1),a.fromBufferAttribute(t,e+2),h.subVectors(a,r),c.subVectors(n,r),h.cross(c),i.setXYZ(e+0,h.x,h.y,h.z),i.setXYZ(e+1,h.x,h.y,h.z),i.setXYZ(e+2,h.x,h.y,h.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){let e=this.attributes.normal;for(let t=0,i=e.count;t<i;t++)tA.fromBufferAttribute(e,t),tA.normalize(),e.setXYZ(t,tA.x,tA.y,tA.z)}toNonIndexed(){function e(e,t){let i=e.array,n=e.itemSize,r=e.normalized,a=new i.constructor(t.length*n),s=0,o=0;for(let r=0,l=t.length;r<l;r++){s=e.isInterleavedBufferAttribute?t[r]*e.data.stride+e.offset:t[r]*n;for(let e=0;e<n;e++)a[o++]=i[s++]}return new t_(a,n,r)}//
if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;let t=new tR,i=this.index.array,n=this.attributes;// attributes
for(let r in n){let a=n[r],s=e(a,i);t.setAttribute(r,s)}// morph attributes
let r=this.morphAttributes;for(let n in r){let a=[],s=r[n];for(let t=0,n=s.length;t<n;t++){let n=s[t],r=e(n,i);a.push(r)}t.morphAttributes[n]=a}t.morphTargetsRelative=this.morphTargetsRelative;// groups
let a=this.groups;for(let e=0,i=a.length;e<i;e++){let i=a[e];t.addGroup(i.start,i.count,i.materialIndex)}return t}toJSON(){let e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(// standard BufferGeometry serialization
e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){let t=this.parameters;for(let i in t)void 0!==t[i]&&(e[i]=t[i]);return e}// for simplicity the code assumes attributes are not shared across geometries, see #15811
e.data={attributes:{}};let t=this.index;null!==t&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});let i=this.attributes;for(let t in i){let n=i[t];e.data.attributes[t]=n.toJSON(e.data)}let n={},r=!1;for(let t in this.morphAttributes){let i=this.morphAttributes[t],a=[];for(let t=0,n=i.length;t<n;t++){let n=i[t];a.push(n.toJSON(e.data))}a.length>0&&(n[t]=a,r=!0)}r&&(e.data.morphAttributes=n,e.data.morphTargetsRelative=this.morphTargetsRelative);let a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));let s=this.boundingSphere;return null!==s&&(e.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){// reset
this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;// used for storing cloned, shared data
let t={};// name
this.name=e.name;// index
let i=e.index;null!==i&&this.setIndex(i.clone(t));// attributes
let n=e.attributes;for(let e in n){let i=n[e];this.setAttribute(e,i.clone(t))}// morph attributes
let r=e.morphAttributes;for(let e in r){let i=[],n=r[e];for(let e=0,r=n.length;e<r;e++)i.push(n[e].clone(t));this.morphAttributes[e]=i}this.morphTargetsRelative=e.morphTargetsRelative;// groups
let a=e.groups;for(let e=0,t=a.length;e<t;e++){let t=a[e];this.addGroup(t.start,t.count,t.materialIndex)}// bounding box
let s=e.boundingBox;null!==s&&(this.boundingBox=s.clone());// bounding sphere
let o=e.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),// draw range
this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,// user data
this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const tL=/*@__PURE__*/new eI,tC=/*@__PURE__*/new eP,tP=/*@__PURE__*/new eS,tI=/*@__PURE__*/new ei,tO=/*@__PURE__*/new ei,tU=/*@__PURE__*/new ei,tN=/*@__PURE__*/new ei,tD=/*@__PURE__*/new ei,tF=/*@__PURE__*/new ei,tB=/*@__PURE__*/new P,tz=/*@__PURE__*/new P,tk=/*@__PURE__*/new P,tV=/*@__PURE__*/new ei,tH=/*@__PURE__*/new ei,tG=/*@__PURE__*/new ei,tq=/*@__PURE__*/new ei,tW=/*@__PURE__*/new ei;class tX extends e3{constructor(e=new tR,t=new tm){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){let e=this.geometry,t=e.morphAttributes,i=Object.keys(t);if(i.length>0){let e=t[i[0]];if(void 0!==e){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,i=e.length;t<i;t++){let i=e[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=t}}}}getVertexPosition(e,t){let i=this.geometry,n=i.attributes.position,r=i.morphAttributes.position,a=i.morphTargetsRelative;t.fromBufferAttribute(n,e);let s=this.morphTargetInfluences;if(r&&s){tF.set(0,0,0);for(let i=0,n=r.length;i<n;i++){let n=s[i],o=r[i];0!==n&&(tD.fromBufferAttribute(o,e),a?tF.addScaledVector(tD,n):tF.addScaledVector(tD.sub(t),n))}t.add(tF)}return t}raycast(e,t){let i=this.geometry,n=this.material,r=this.matrixWorld;if(void 0!==n){if(null===i.boundingSphere&&i.computeBoundingSphere(),tP.copy(i.boundingSphere),tP.applyMatrix4(r),// check distance from ray origin to bounding sphere
tC.copy(e.ray).recast(e.near),!1===tP.containsPoint(tC.origin)&&(null===tC.intersectSphere(tP,tI)||tC.origin.distanceToSquared(tI)>(e.far-e.near)**2)||(// convert ray to local space of mesh
tL.copy(r).invert(),tC.copy(e.ray).applyMatrix4(tL),null!==i.boundingBox&&!1===tC.intersectsBox(i.boundingBox)))return;// test for intersections with geometry
this._computeIntersections(e,t,tC)}}_computeIntersections(e,t,i){let n;let r=this.geometry,a=this.material,s=r.index,o=r.attributes.position,l=r.attributes.uv,h=r.attributes.uv1,c=r.attributes.normal,u=r.groups,d=r.drawRange;if(null!==s){// indexed buffer geometry
if(Array.isArray(a))for(let r=0,o=u.length;r<o;r++){let o=u[r],p=a[o.materialIndex],m=Math.max(o.start,d.start),f=Math.min(s.count,Math.min(o.start+o.count,d.start+d.count));for(let r=m;r<f;r+=3){let a=s.getX(r),u=s.getX(r+1),d=s.getX(r+2);(n=tj(this,p,e,i,l,h,c,a,u,d))&&(n.faceIndex=Math.floor(r/3),n.face.materialIndex=o.materialIndex,t.push(n))}}else{let r=Math.max(0,d.start),o=Math.min(s.count,d.start+d.count);for(let u=r;u<o;u+=3){let r=s.getX(u),o=s.getX(u+1),d=s.getX(u+2);(n=tj(this,a,e,i,l,h,c,r,o,d))&&(n.faceIndex=Math.floor(u/3),t.push(n))}}}else if(void 0!==o){// non-indexed buffer geometry
if(Array.isArray(a))for(let r=0,s=u.length;r<s;r++){let s=u[r],p=a[s.materialIndex],m=Math.max(s.start,d.start),f=Math.min(o.count,Math.min(s.start+s.count,d.start+d.count));for(let r=m;r<f;r+=3){let a=r,o=r+1,u=r+2;(n=tj(this,p,e,i,l,h,c,a,o,u))&&(n.faceIndex=Math.floor(r/3),n.face.materialIndex=s.materialIndex,t.push(n))}}else{let r=Math.max(0,d.start),s=Math.min(o.count,d.start+d.count);for(let o=r;o<s;o+=3){let r=o,s=o+1,u=o+2;(n=tj(this,a,e,i,l,h,c,r,s,u))&&(n.faceIndex=Math.floor(o/3),t.push(n))}}}}}function tj(e,t,i,n,r,a,s,o,l,h){e.getVertexPosition(o,tO),e.getVertexPosition(l,tU),e.getVertexPosition(h,tN);let c=function(e,t,i,n,r,a,s,o){if(null===(1===t.side?n.intersectTriangle(s,a,r,!0,o):n.intersectTriangle(r,a,s,0===t.side,o)))return null;tW.copy(o),tW.applyMatrix4(e.matrixWorld);let l=i.ray.origin.distanceTo(tW);return l<i.near||l>i.far?null:{distance:l,point:tW.clone(),object:e}}(e,t,i,n,tO,tU,tN,tq);if(c){r&&(tB.fromBufferAttribute(r,o),tz.fromBufferAttribute(r,l),tk.fromBufferAttribute(r,h),c.uv=ta.getInterpolation(tq,tO,tU,tN,tB,tz,tk,new P)),a&&(tB.fromBufferAttribute(a,o),tz.fromBufferAttribute(a,l),tk.fromBufferAttribute(a,h),c.uv1=ta.getInterpolation(tq,tO,tU,tN,tB,tz,tk,new P),c.uv2=c.uv1),s&&(tV.fromBufferAttribute(s,o),tH.fromBufferAttribute(s,l),tG.fromBufferAttribute(s,h),c.normal=ta.getInterpolation(tq,tO,tU,tN,tV,tH,tG,new ei),c.normal.dot(n.direction)>0&&c.normal.multiplyScalar(-1));let e={a:o,b:l,c:h,normal:new ei,materialIndex:0};ta.getNormal(tO,tU,tN,e.normal),c.face=e}return c}class tY extends tR{constructor(e=1,t=1,i=1,n=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:i,widthSegments:n,heightSegments:r,depthSegments:a};let s=this;// segments
n=Math.floor(n),r=Math.floor(r),a=Math.floor(a);// buffers
let o=[],l=[],h=[],c=[],u=0,d=0;function p(e,t,i,n,r,a,p,m,f,g,_){let v=a/f,y=p/g,x=a/2,M=p/2,b=m/2,S=f+1,E=g+1,T=0,w=0,A=new ei;// generate vertices, normals and uvs
for(let a=0;a<E;a++){let s=a*y-M;for(let o=0;o<S;o++){let u=o*v-x;// set values to correct vector component
A[e]=u*n,A[t]=s*r,A[i]=b,// now apply vector to vertex buffer
l.push(A.x,A.y,A.z),// set values to correct vector component
A[e]=0,A[t]=0,A[i]=m>0?1:-1,// now apply vector to normal buffer
h.push(A.x,A.y,A.z),// uvs
c.push(o/f),c.push(1-a/g),// counters
T+=1}}// indices
// 1. you need three indices to draw a single face
// 2. a single segment consists of two faces
// 3. so we need to generate six (2*3) indices per segment
for(let e=0;e<g;e++)for(let t=0;t<f;t++){let i=u+t+S*e,n=u+t+S*(e+1),r=u+(t+1)+S*(e+1),a=u+(t+1)+S*e;// faces
o.push(i,n,a),o.push(n,r,a),// increase counter
w+=6}// add a group to the geometry. this will ensure multi material support
s.addGroup(d,w,_),// calculate new start value for groups
d+=w,// update total number of vertices
u+=T}// build each side of the box geometry
p("z","y","x",-1,-1,i,t,e,a,r,0),p("z","y","x",1,-1,i,t,-e,a,r,1),p("x","z","y",1,1,e,i,t,n,a,2),p("x","z","y",1,-1,e,i,-t,n,a,3),p("x","y","z",1,-1,e,t,i,n,r,4),p("x","y","z",-1,-1,e,t,-i,n,r,5),// build geometry
this.setIndex(o),this.setAttribute("position",new tx(l,3)),this.setAttribute("normal",new tx(h,3)),this.setAttribute("uv",new tx(c,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new tY(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}/**
 * Uniform Utilities
 */function tZ(e){let t={};for(let i in e)for(let n in t[i]={},e[i]){let r=e[i][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[i][n]=null):t[i][n]=r.clone():Array.isArray(r)?t[i][n]=r.slice():t[i][n]=r}return t}function tQ(e){let t={};for(let i=0;i<e.length;i++){let n=tZ(e[i]);for(let e in n)t[e]=n[e]}return t}function tJ(e){return null===e.getRenderTarget()?e.outputColorSpace:H.workingColorSpace}// Legacy
const tK={clone:tZ,merge:tQ};class t$ extends to{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1// set to use shader texture LOD
},// When rendered geometry doesn't include these attributes but the material does,
// use these default values in WebGL. This avoids errors when buffer data is missing.
this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==e&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=tZ(e.uniforms),this.uniformsGroups=function(e){let t=[];for(let i=0;i<e.length;i++)t.push(e[i].clone());return t}(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){let t=super.toJSON(e);for(let i in t.glslVersion=this.glslVersion,t.uniforms={},this.uniforms){let n=this.uniforms[i],r=n.value;r&&r.isTexture?t.uniforms[i]={type:"t",value:r.toJSON(e).uuid}:r&&r.isColor?t.uniforms[i]={type:"c",value:r.getHex()}:r&&r.isVector2?t.uniforms[i]={type:"v2",value:r.toArray()}:r&&r.isVector3?t.uniforms[i]={type:"v3",value:r.toArray()}:r&&r.isVector4?t.uniforms[i]={type:"v4",value:r.toArray()}:r&&r.isMatrix3?t.uniforms[i]={type:"m3",value:r.toArray()}:r&&r.isMatrix4?t.uniforms[i]={type:"m4",value:r.toArray()}:t.uniforms[i]={value:r}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;let i={};for(let e in this.extensions)!0===this.extensions[e]&&(i[e]=!0);return Object.keys(i).length>0&&(t.extensions=i),t}}class t0 extends e3{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new eI,this.projectionMatrix=new eI,this.projectionMatrixInverse=new eI,this.coordinateSystem=2e3}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class t1 extends t0{constructor(e=50,t=1,i=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=i,this.far=n,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */setFocalLength(e){/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */let t=.5*this.getFilmHeight()/e;this.fov=2*E*Math.atan(t),this.updateProjectionMatrix()}/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */getFocalLength(){let e=Math.tan(.5*S*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return 2*E*Math.atan(Math.tan(.5*S*this.fov)/this.zoom)}getFilmWidth(){// film not completely covered in portrait format (aspect < 1)
return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){// film not completely covered in landscape format (aspect > 1)
return this.filmGauge/Math.max(this.aspect,1)}/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */setViewOffset(e,t,i,n,r,a){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){let e=this.near,t=e*Math.tan(.5*S*this.fov)/this.zoom,i=2*t,n=this.aspect*i,r=-.5*n,a=this.view;if(null!==this.view&&this.view.enabled){let e=a.fullWidth,s=a.fullHeight;r+=a.offsetX*n/e,t-=a.offsetY*i/s,n*=a.width/e,i*=a.height/s}let s=this.filmOffset;0!==s&&(r+=e*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+n,t,t-i,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){let t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}class t2 extends e3{constructor(e,t,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;let n=new t1(-90,1,e,t);n.layers=this.layers,this.add(n);let r=new t1(-90,1,e,t);r.layers=this.layers,this.add(r);let a=new t1(-90,1,e,t);a.layers=this.layers,this.add(a);let s=new t1(-90,1,e,t);s.layers=this.layers,this.add(s);let o=new t1(-90,1,e,t);o.layers=this.layers,this.add(o);let l=new t1(-90,1,e,t);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){let e=this.coordinateSystem,t=this.children.concat(),[i,n,r,a,s,o]=t;for(let e of t)this.remove(e);if(2e3===e)i.up.set(0,1,0),i.lookAt(1,0,0),n.up.set(0,1,0),n.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),s.up.set(0,1,0),s.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else if(2001===e)i.up.set(0,-1,0),i.lookAt(-1,0,0),n.up.set(0,-1,0),n.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),s.up.set(0,-1,0),s.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1);else throw Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(let e of t)this.add(e),e.updateMatrixWorld()}update(e,t){null===this.parent&&this.updateMatrixWorld();let{renderTarget:i,activeMipmapLevel:n}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());let[r,a,s,o,l,h]=this.children,c=e.getRenderTarget(),u=e.getActiveCubeFace(),d=e.getActiveMipmapLevel(),p=e.xr.enabled;e.xr.enabled=!1;let m=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,e.setRenderTarget(i,0,n),e.render(t,r),e.setRenderTarget(i,1,n),e.render(t,a),e.setRenderTarget(i,2,n),e.render(t,s),e.setRenderTarget(i,3,n),e.render(t,o),e.setRenderTarget(i,4,n),e.render(t,l),// mipmaps are generated during the last call of render()
// at this point, all sides of the cube render target are defined
i.texture.generateMipmaps=m,e.setRenderTarget(i,5,n),e.render(t,h),e.setRenderTarget(c,u,d),e.xr.enabled=p,i.texture.needsPMREMUpdate=!0}}class t3 extends Q{constructor(e,t,i,n,r,a,s,o,l,h){super(e=void 0!==e?e:[],t=void 0!==t?t:301,i,n,r,a,s,o,l,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class t5 extends ${constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;let i={width:e,height:e,depth:1},n=[i,i,i,i,i,i];void 0!==t.encoding&&(// @deprecated, r152
F("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),t.colorSpace=3001===t.encoding?p:""),this.texture=new t3(n,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:1006}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;let i={uniforms:{tEquirect:{value:null}},vertexShader:/* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:/* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},n=new tY(5,5,5),r=new t$({name:"CubemapFromEquirect",uniforms:tZ(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=t;let a=new tX(n,r),s=t.minFilter;1008===t.minFilter&&(t.minFilter=1006);let o=new t2(1,10,this);return o.update(e,a),t.minFilter=s,a.geometry.dispose(),a.material.dispose(),this}clear(e,t,i,n){let r=e.getRenderTarget();for(let r=0;r<6;r++)e.setRenderTarget(this,r),e.clear(t,i,n);e.setRenderTarget(r)}}const t4=/*@__PURE__*/new ei,t6=/*@__PURE__*/new ei,t7=/*@__PURE__*/new I;class t8{constructor(e=new ei(1,0,0),t=0){this.isPlane=!0,// normal is assumed to be normalized
this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,i,n){return this.normal.set(e,t,i),this.constant=n,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,i){let n=t4.subVectors(i,t).cross(t6.subVectors(e,t)).normalize();return(// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
this.setFromNormalAndCoplanarPoint(n,e),this)}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){// Note: will lead to a divide by zero if the plane is invalid.
let e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){let i=e.delta(t4),n=this.normal.dot(i);if(0===n)return(// line is coplanar, return origin
0===this.distanceToPoint(e.start)?t.copy(e.start):null);let r=-(e.start.dot(this.normal)+this.constant)/n;return r<0||r>1?null:t.copy(e.start).addScaledVector(i,r)}intersectsLine(e){// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
let t=this.distanceToPoint(e.start),i=this.distanceToPoint(e.end);return t<0&&i>0||i<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){let i=t||t7.getNormalMatrix(e),n=this.coplanarPoint(t4).applyMatrix4(e),r=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const t9=/*@__PURE__*/new eS,ie=/*@__PURE__*/new ei;class it{constructor(e=new t8,t=new t8,i=new t8,n=new t8,r=new t8,a=new t8){this.planes=[e,t,i,n,r,a]}set(e,t,i,n,r,a){let s=this.planes;return s[0].copy(e),s[1].copy(t),s[2].copy(i),s[3].copy(n),s[4].copy(r),s[5].copy(a),this}copy(e){let t=this.planes;for(let i=0;i<6;i++)t[i].copy(e.planes[i]);return this}setFromProjectionMatrix(e,t=2e3){let i=this.planes,n=e.elements,r=n[0],a=n[1],s=n[2],o=n[3],l=n[4],h=n[5],c=n[6],u=n[7],d=n[8],p=n[9],m=n[10],f=n[11],g=n[12],_=n[13],v=n[14],y=n[15];if(i[0].setComponents(o-r,u-l,f-d,y-g).normalize(),i[1].setComponents(o+r,u+l,f+d,y+g).normalize(),i[2].setComponents(o+a,u+h,f+p,y+_).normalize(),i[3].setComponents(o-a,u-h,f-p,y-_).normalize(),i[4].setComponents(o-s,u-c,f-m,y-v).normalize(),2e3===t)i[5].setComponents(o+s,u+c,f+m,y+v).normalize();else if(2001===t)i[5].setComponents(s,c,m,v).normalize();else throw Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(void 0!==e.boundingSphere)null===e.boundingSphere&&e.computeBoundingSphere(),t9.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{let t=e.geometry;null===t.boundingSphere&&t.computeBoundingSphere(),t9.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(t9)}intersectsSprite(e){return t9.center.set(0,0,0),t9.radius=.7071067811865476,t9.applyMatrix4(e.matrixWorld),this.intersectsSphere(t9)}intersectsSphere(e){let t=this.planes,i=e.center,n=-e.radius;for(let e=0;e<6;e++){let r=t[e].distanceToPoint(i);if(r<n)return!1}return!0}intersectsBox(e){let t=this.planes;for(let i=0;i<6;i++){let n=t[i];if(// corner at max distance
ie.x=n.normal.x>0?e.max.x:e.min.x,ie.y=n.normal.y>0?e.max.y:e.min.y,ie.z=n.normal.z>0?e.max.z:e.min.z,0>n.distanceToPoint(ie))return!1}return!0}containsPoint(e){let t=this.planes;for(let i=0;i<6;i++)if(0>t[i].distanceToPoint(e))return!1;return!0}clone(){return new this.constructor().copy(this)}}function ii(){let e=null,t=!1,i=null,n=null;function r(t,a){i(t,a),n=e.requestAnimationFrame(r)}return{start:function(){!0!==t&&null!==i&&(n=e.requestAnimationFrame(r),t=!0)},stop:function(){e.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(e){i=e},setContext:function(t){e=t}}}function ir(e,t){let i=t.isWebGL2,n=new WeakMap;return{get://
function(e){return e.isInterleavedBufferAttribute&&(e=e.data),n.get(e)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);let i=n.get(t);i&&(e.deleteBuffer(i.buffer),n.delete(t))},update:function(t,r){if(t.isGLBufferAttribute){let e=n.get(t);(!e||e.version<t.version)&&n.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version});return}t.isInterleavedBufferAttribute&&(t=t.data);let a=n.get(t);void 0===a?n.set(t,function(t,n){let r;let a=t.array,s=t.usage,o=e.createBuffer();if(e.bindBuffer(n,o),e.bufferData(n,a,s),t.onUploadCallback(),a instanceof Float32Array)r=e.FLOAT;else if(a instanceof Uint16Array){if(t.isFloat16BufferAttribute){if(i)r=e.HALF_FLOAT;else throw Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.")}else r=e.UNSIGNED_SHORT}else if(a instanceof Int16Array)r=e.SHORT;else if(a instanceof Uint32Array)r=e.UNSIGNED_INT;else if(a instanceof Int32Array)r=e.INT;else if(a instanceof Int8Array)r=e.BYTE;else if(a instanceof Uint8Array)r=e.UNSIGNED_BYTE;else if(a instanceof Uint8ClampedArray)r=e.UNSIGNED_BYTE;else throw Error("THREE.WebGLAttributes: Unsupported buffer data format: "+a);return{buffer:o,type:r,bytesPerElement:a.BYTES_PER_ELEMENT,version:t.version}}(t,r)):a.version<t.version&&(!function(t,n,r){let a=n.array,s=n.updateRange;e.bindBuffer(r,t),-1===s.count?e.bufferSubData(r,0,a):(i?e.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a,s.offset,s.count):e.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a.subarray(s.offset,s.offset+s.count)),s.count=-1),n.onUploadCallback()}(a.buffer,t,r),a.version=t.version)}}}class ia extends tR{constructor(e=1,t=1,i=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:i,heightSegments:n};let r=e/2,a=t/2,s=Math.floor(i),o=Math.floor(n),l=s+1,h=o+1,c=e/s,u=t/o,d=[],p=[],m=[],f=[];for(let e=0;e<h;e++){let t=e*u-a;for(let i=0;i<l;i++){let n=i*c-r;p.push(n,-t,0),m.push(0,0,1),f.push(i/s),f.push(1-e/o)}}for(let e=0;e<o;e++)for(let t=0;t<s;t++){let i=t+l*e,n=t+l*(e+1),r=t+1+l*(e+1),a=t+1+l*e;d.push(i,n,a),d.push(n,r,a)}this.setIndex(d),this.setAttribute("position",new tx(p,3)),this.setAttribute("normal",new tx(m,3)),this.setAttribute("uv",new tx(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ia(e.width,e.height,e.widthSegments,e.heightSegments)}}const is={alphahash_fragment:"#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = dFdx( surf_pos.xyz );\n		vec3 vSigmaY = dFdy( surf_pos.xyz );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_v0 0.339\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_v1 0.276\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_v4 0.046\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_v5 0.016\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_v6 0.0038\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n	vec3( 0.8224621, 0.177538, 0.0 ),\n	vec3( 0.0331941, 0.9668058, 0.0 ),\n	vec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n	vec3( 1.2249401, - 0.2249404, 0.0 ),\n	vec3( - 0.0420569, 1.0420571, 0.0 ),\n	vec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return sRGBTransferOETF( value );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n	varying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	anisotropyV /= material.anisotropy;\n	material.anisotropy = saturate( material.anisotropy );\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal;\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif",map_fragment:"#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n	uniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	uniform int boneTextureSize;\n	mat4 getBoneMatrix( const in float i ) {\n		float j = i * 4.0;\n		float x = mod( j, float( boneTextureSize ) );\n		float y = floor( j / float( boneTextureSize ) );\n		float dx = 1.0 / float( boneTextureSize );\n		float dy = 1.0 / float( boneTextureSize );\n		y = dy * ( y + 0.5 );\n		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n		mat4 bone = mat4( v1, v2, v3, v4 );\n		return bone;\n	}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}"},io={common:{diffuse:{value:/*@__PURE__*/new td(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:/*@__PURE__*/new I},alphaMap:{value:null},alphaMapTransform:{value:/*@__PURE__*/new I},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:/*@__PURE__*/new I}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:/*@__PURE__*/new I}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:/*@__PURE__*/new I}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:/*@__PURE__*/new I},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:/*@__PURE__*/new I},normalScale:{value:/*@__PURE__*/new P(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:/*@__PURE__*/new I},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:/*@__PURE__*/new I}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:/*@__PURE__*/new I}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:/*@__PURE__*/new I}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:/*@__PURE__*/new td(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:/*@__PURE__*/new td(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:/*@__PURE__*/new I},alphaTest:{value:0},uvTransform:{value:/*@__PURE__*/new I}},sprite:{diffuse:{value:/*@__PURE__*/new td(16777215)},opacity:{value:1},center:{value:/*@__PURE__*/new P(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:/*@__PURE__*/new I},alphaMap:{value:null},alphaMapTransform:{value:/*@__PURE__*/new I},alphaTest:{value:0}}},il={basic:{uniforms:/*@__PURE__*/tQ([io.common,io.specularmap,io.envmap,io.aomap,io.lightmap,io.fog]),vertexShader:is.meshbasic_vert,fragmentShader:is.meshbasic_frag},lambert:{uniforms:/*@__PURE__*/tQ([io.common,io.specularmap,io.envmap,io.aomap,io.lightmap,io.emissivemap,io.bumpmap,io.normalmap,io.displacementmap,io.fog,io.lights,{emissive:{value:/*@__PURE__*/new td(0)}}]),vertexShader:is.meshlambert_vert,fragmentShader:is.meshlambert_frag},phong:{uniforms:/*@__PURE__*/tQ([io.common,io.specularmap,io.envmap,io.aomap,io.lightmap,io.emissivemap,io.bumpmap,io.normalmap,io.displacementmap,io.fog,io.lights,{emissive:{value:/*@__PURE__*/new td(0)},specular:{value:/*@__PURE__*/new td(1118481)},shininess:{value:30}}]),vertexShader:is.meshphong_vert,fragmentShader:is.meshphong_frag},standard:{uniforms:/*@__PURE__*/tQ([io.common,io.envmap,io.aomap,io.lightmap,io.emissivemap,io.bumpmap,io.normalmap,io.displacementmap,io.roughnessmap,io.metalnessmap,io.fog,io.lights,{emissive:{value:/*@__PURE__*/new td(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}// temporary
}]),vertexShader:is.meshphysical_vert,fragmentShader:is.meshphysical_frag},toon:{uniforms:/*@__PURE__*/tQ([io.common,io.aomap,io.lightmap,io.emissivemap,io.bumpmap,io.normalmap,io.displacementmap,io.gradientmap,io.fog,io.lights,{emissive:{value:/*@__PURE__*/new td(0)}}]),vertexShader:is.meshtoon_vert,fragmentShader:is.meshtoon_frag},matcap:{uniforms:/*@__PURE__*/tQ([io.common,io.bumpmap,io.normalmap,io.displacementmap,io.fog,{matcap:{value:null}}]),vertexShader:is.meshmatcap_vert,fragmentShader:is.meshmatcap_frag},points:{uniforms:/*@__PURE__*/tQ([io.points,io.fog]),vertexShader:is.points_vert,fragmentShader:is.points_frag},dashed:{uniforms:/*@__PURE__*/tQ([io.common,io.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:is.linedashed_vert,fragmentShader:is.linedashed_frag},depth:{uniforms:/*@__PURE__*/tQ([io.common,io.displacementmap]),vertexShader:is.depth_vert,fragmentShader:is.depth_frag},normal:{uniforms:/*@__PURE__*/tQ([io.common,io.bumpmap,io.normalmap,io.displacementmap,{opacity:{value:1}}]),vertexShader:is.meshnormal_vert,fragmentShader:is.meshnormal_frag},sprite:{uniforms:/*@__PURE__*/tQ([io.sprite,io.fog]),vertexShader:is.sprite_vert,fragmentShader:is.sprite_frag},background:{uniforms:{uvTransform:{value:/*@__PURE__*/new I},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:is.background_vert,fragmentShader:is.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:is.backgroundCube_vert,fragmentShader:is.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:is.cube_vert,fragmentShader:is.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:is.equirect_vert,fragmentShader:is.equirect_frag},distanceRGBA:{uniforms:/*@__PURE__*/tQ([io.common,io.displacementmap,{referencePosition:{value:/*@__PURE__*/new ei},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:is.distanceRGBA_vert,fragmentShader:is.distanceRGBA_frag},shadow:{uniforms:/*@__PURE__*/tQ([io.lights,io.fog,{color:{value:/*@__PURE__*/new td(0)},opacity:{value:1}}]),vertexShader:is.shadow_vert,fragmentShader:is.shadow_frag}};il.physical={uniforms:/*@__PURE__*/tQ([il.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:/*@__PURE__*/new I},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:/*@__PURE__*/new I},clearcoatNormalScale:{value:/*@__PURE__*/new P(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:/*@__PURE__*/new I},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:/*@__PURE__*/new I},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:/*@__PURE__*/new I},sheen:{value:0},sheenColor:{value:/*@__PURE__*/new td(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:/*@__PURE__*/new I},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:/*@__PURE__*/new I},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:/*@__PURE__*/new I},transmissionSamplerSize:{value:/*@__PURE__*/new P},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:/*@__PURE__*/new I},attenuationDistance:{value:0},attenuationColor:{value:/*@__PURE__*/new td(0)},specularColor:{value:/*@__PURE__*/new td(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:/*@__PURE__*/new I},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:/*@__PURE__*/new I},anisotropyVector:{value:/*@__PURE__*/new P},anisotropyMap:{value:null},anisotropyMapTransform:{value:/*@__PURE__*/new I}}]),vertexShader:is.meshphysical_vert,fragmentShader:is.meshphysical_frag};const ih={r:0,b:0,g:0};function ic(e,t,i,n,r,a,s){let o,l;let h=new td(0),c=!0===a?0:1,u=null,d=0,p=null;function m(t,i){t.getRGB(ih,tJ(e)),n.buffers.color.setClear(ih.r,ih.g,ih.b,i,s)}return{getClearColor:function(){return h},setClearColor:function(e,t=1){h.set(e),m(h,c=t)},getClearAlpha:function(){return c},setClearAlpha:function(e){m(h,c=e)},render:function(a,f){let g=!1,_=!0===f.isScene?f.background:null;if(_&&_.isTexture){let e=f.backgroundBlurriness>0;// use PMREM if the user wants to blur the background
_=(e?i:t).get(_)}null===_?m(h,c):_&&_.isColor&&(m(_,1),g=!0);let y=e.xr.getEnvironmentBlendMode();"additive"===y?n.buffers.color.setClear(0,0,0,1,s):"alpha-blend"===y&&n.buffers.color.setClear(0,0,0,0,s),(e.autoClear||g)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),_&&(_.isCubeTexture||306===_.mapping)?(void 0===l&&((l=new tX(new tY(1,1,1),new t$({name:"BackgroundCubeMaterial",uniforms:tZ(il.backgroundCube.uniforms),vertexShader:il.backgroundCube.vertexShader,fragmentShader:il.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(e,t,i){this.matrixWorld.copyPosition(i.matrixWorld)},// add "envMap" material property so the renderer can evaluate it like for built-in materials
Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(l)),l.material.uniforms.envMap.value=_,l.material.uniforms.flipEnvMap.value=_.isCubeTexture&&!1===_.isRenderTargetTexture?-1:1,l.material.uniforms.backgroundBlurriness.value=f.backgroundBlurriness,l.material.uniforms.backgroundIntensity.value=f.backgroundIntensity,l.material.toneMapped=H.getTransfer(_.colorSpace)!==v,(u!==_||d!==_.version||p!==e.toneMapping)&&(l.material.needsUpdate=!0,u=_,d=_.version,p=e.toneMapping),l.layers.enableAll(),// push to the pre-sorted opaque render list
a.unshift(l,l.geometry,l.material,0,0,null)):_&&_.isTexture&&(void 0===o&&((o=new tX(new ia(2,2),new t$({name:"BackgroundMaterial",uniforms:tZ(il.background.uniforms),vertexShader:il.background.vertexShader,fragmentShader:il.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),// add "map" material property so the renderer can evaluate it like for built-in materials
Object.defineProperty(o.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(o)),o.material.uniforms.t2D.value=_,o.material.uniforms.backgroundIntensity.value=f.backgroundIntensity,o.material.toneMapped=H.getTransfer(_.colorSpace)!==v,!0===_.matrixAutoUpdate&&_.updateMatrix(),o.material.uniforms.uvTransform.value.copy(_.matrix),(u!==_||d!==_.version||p!==e.toneMapping)&&(o.material.needsUpdate=!0,u=_,d=_.version,p=e.toneMapping),o.layers.enableAll(),// push to the pre-sorted opaque render list
a.unshift(o,o.geometry,o.material,0,0,null))}}}function iu(e,t,i,n){let r=e.getParameter(e.MAX_VERTEX_ATTRIBS),a=n.isWebGL2?null:t.get("OES_vertex_array_object"),s=n.isWebGL2||null!==a,o={},l=p(null),h=l,c=!1;function u(t){return n.isWebGL2?e.bindVertexArray(t):a.bindVertexArrayOES(t)}function d(t){return n.isWebGL2?e.deleteVertexArray(t):a.deleteVertexArrayOES(t)}function p(e){let t=[],i=[],n=[];for(let e=0;e<r;e++)t[e]=0,i[e]=0,n[e]=0;return{// for backward compatibility on non-VAO support browser
geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:i,attributeDivisors:n,object:e,attributes:{},index:null}}function m(){let e=h.newAttributes;for(let t=0,i=e.length;t<i;t++)e[t]=0}function f(e){g(e,0)}function g(i,r){let a=h.newAttributes,s=h.enabledAttributes,o=h.attributeDivisors;if(a[i]=1,0===s[i]&&(e.enableVertexAttribArray(i),s[i]=1),o[i]!==r){let a=n.isWebGL2?e:t.get("ANGLE_instanced_arrays");a[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](i,r),o[i]=r}}function _(){let t=h.newAttributes,i=h.enabledAttributes;for(let n=0,r=i.length;n<r;n++)i[n]!==t[n]&&(e.disableVertexAttribArray(n),i[n]=0)}function v(t,i,n,r,a,s,o){!0===o?e.vertexAttribIPointer(t,i,n,a,s):e.vertexAttribPointer(t,i,n,r,a,s)}function y(){x(),c=!0,h!==l&&u((h=l).object)}// for backward-compatibility
function x(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,d,y,x){let M=!1;if(s){let t=function(t,i,r){let s=!0===r.wireframe,l=o[t.id];void 0===l&&(l={},o[t.id]=l);let h=l[i.id];void 0===h&&(h={},l[i.id]=h);let c=h[s];return void 0===c&&(c=p(n.isWebGL2?e.createVertexArray():a.createVertexArrayOES()),h[s]=c),c}(y,d,l);h!==t&&u((h=t).object),(M=function(e,t,i,n){let r=h.attributes,a=t.attributes,s=0,o=i.getAttributes();for(let t in o){let i=o[t];if(i.location>=0){let i=r[t],n=a[t];if(void 0===n&&("instanceMatrix"===t&&e.instanceMatrix&&(n=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(n=e.instanceColor)),void 0===i||i.attribute!==n||n&&i.data!==n.data)return!0;s++}}return h.attributesNum!==s||h.index!==n}(r,y,d,x))&&function(e,t,i,n){let r={},a=t.attributes,s=0,o=i.getAttributes();for(let t in o){let i=o[t];if(i.location>=0){let i=a[t];void 0===i&&("instanceMatrix"===t&&e.instanceMatrix&&(i=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(i=e.instanceColor));let n={};n.attribute=i,i&&i.data&&(n.data=i.data),r[t]=n,s++}}h.attributes=r,h.attributesNum=s,h.index=n}(r,y,d,x)}else{let e=!0===l.wireframe;(h.geometry!==y.id||h.program!==d.id||h.wireframe!==e)&&(h.geometry=y.id,h.program=d.id,h.wireframe=e,M=!0)}null!==x&&i.update(x,e.ELEMENT_ARRAY_BUFFER),(M||c)&&(c=!1,function(r,a,s,o){if(!1===n.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===t.get("ANGLE_instanced_arrays"))return;m();let l=o.attributes,h=s.getAttributes(),c=a.defaultAttributeValues;for(let t in h){let a=h[t];if(a.location>=0){let s=l[t];if(void 0===s&&("instanceMatrix"===t&&r.instanceMatrix&&(s=r.instanceMatrix),"instanceColor"===t&&r.instanceColor&&(s=r.instanceColor)),void 0!==s){let t=s.normalized,l=s.itemSize,h=i.get(s);// TODO Attribute may not be available on context restore
if(void 0===h)continue;let c=h.buffer,u=h.type,d=h.bytesPerElement,p=!0===n.isWebGL2&&(u===e.INT||u===e.UNSIGNED_INT||1013===s.gpuType);if(s.isInterleavedBufferAttribute){let i=s.data,n=i.stride,h=s.offset;if(i.isInstancedInterleavedBuffer){for(let e=0;e<a.locationSize;e++)g(a.location+e,i.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=i.meshPerAttribute*i.count)}else for(let e=0;e<a.locationSize;e++)f(a.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<a.locationSize;e++)v(a.location+e,l/a.locationSize,u,t,n*d,(h+l/a.locationSize*e)*d,p)}else{if(s.isInstancedBufferAttribute){for(let e=0;e<a.locationSize;e++)g(a.location+e,s.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let e=0;e<a.locationSize;e++)f(a.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<a.locationSize;e++)v(a.location+e,l/a.locationSize,u,t,l*d,l/a.locationSize*e*d,p)}}else if(void 0!==c){let i=c[t];if(void 0!==i)switch(i.length){case 2:e.vertexAttrib2fv(a.location,i);break;case 3:e.vertexAttrib3fv(a.location,i);break;case 4:e.vertexAttrib4fv(a.location,i);break;default:e.vertexAttrib1fv(a.location,i)}}}}_()}(r,l,d,y),null!==x&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,i.get(x).buffer))},reset:y,resetDefaultState:x,dispose:function(){for(let e in y(),o){let t=o[e];for(let e in t){let i=t[e];for(let e in i)d(i[e].object),delete i[e];delete t[e]}delete o[e]}},releaseStatesOfGeometry:function(e){if(void 0===o[e.id])return;let t=o[e.id];for(let e in t){let i=t[e];for(let e in i)d(i[e].object),delete i[e];delete t[e]}delete o[e.id]},releaseStatesOfProgram:function(e){for(let t in o){let i=o[t];if(void 0===i[e.id])continue;let n=i[e.id];for(let e in n)d(n[e].object),delete n[e];delete i[e.id]}},initAttributes:m,enableAttribute:f,disableUnusedAttributes:_}}function id(e,t,i,n){let r;let a=n.isWebGL2;//
this.setMode=function(e){r=e},this.render=function(t,n){e.drawArrays(r,t,n),i.update(n,r,1)},this.renderInstances=function(n,s,o){let l,h;if(0!==o){if(a)l=e,h="drawArraysInstanced";else if(l=t.get("ANGLE_instanced_arrays"),h="drawArraysInstancedANGLE",null===l){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}l[h](r,n,s,o),i.update(s,r,o)}}}function ip(e,t,i){let n;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let a="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===e.constructor.name,s=void 0!==i.precision?i.precision:"highp",o=r(s);o!==s&&(console.warn("THREE.WebGLRenderer:",s,"not supported, using",o,"instead."),s=o);let l=a||t.has("WEBGL_draw_buffers"),h=!0===i.logarithmicDepthBuffer,c=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_TEXTURE_SIZE),p=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),m=e.getParameter(e.MAX_VERTEX_ATTRIBS),f=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),g=e.getParameter(e.MAX_VARYING_VECTORS),_=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),v=u>0,y=a||t.has("OES_texture_float"),x=a?e.getParameter(e.MAX_SAMPLES):0;return{isWebGL2:a,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===t.has("EXT_texture_filter_anisotropic")){let i=t.get("EXT_texture_filter_anisotropic");n=e.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:r,precision:s,logarithmicDepthBuffer:h,maxTextures:c,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:_,vertexTextures:v,floatFragmentTextures:y,floatVertexTextures:v&&y,maxSamples:x}}function im(e){let t=this,i=null,n=0,r=!1,a=!1,s=new t8,o=new I,l={value:null,needsUpdate:!1};function h(e,i,n,r){let a=null!==e?e.length:0,h=null;if(0!==a){if(h=l.value,!0!==r||null===h){let t=n+4*a,r=i.matrixWorldInverse;o.getNormalMatrix(r),(null===h||h.length<t)&&(h=new Float32Array(t));for(let t=0,i=n;t!==a;++t,i+=4)s.copy(e[t]).applyMatrix4(r,o),s.normal.toArray(h,i),h[i+3]=s.constant}l.value=h,l.needsUpdate=!0}return t.numPlanes=a,t.numIntersection=0,h}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t){let i=0!==e.length||t||// enable state of previous frame - the clipping code has to
// run another frame in order to reset the state:
0!==n||r;return r=t,n=e.length,i},this.beginShadows=function(){a=!0,h(null)},this.endShadows=function(){a=!1},this.setGlobalState=function(e,t){i=h(e,t,0)},this.setState=function(s,o,c){let u=s.clippingPlanes,d=s.clipIntersection,p=s.clipShadows,m=e.get(s);if(r&&null!==u&&0!==u.length&&(!a||p)){let e=a?0:n,t=4*e,r=m.clippingState||null;l.value=r,r=h(u,o,t,c);for(let e=0;e!==t;++e)r[e]=i[e];m.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=e}else // there's no local clipping
a?h(null):(l.value!==i&&(l.value=i,l.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0)}}function ig(e){let t=new WeakMap;function i(e,t){return 303===t?e.mapping=301:304===t&&(e.mapping=302),e}function n(e){let i=e.target;i.removeEventListener("dispose",n);let r=t.get(i);void 0!==r&&(t.delete(i),r.dispose())}return{get:function(r){if(r&&r.isTexture&&!1===r.isRenderTargetTexture){let a=r.mapping;if(303===a||304===a){if(t.has(r)){let e=t.get(r).texture;return i(e,r.mapping)}{let a=r.image;if(!a||!(a.height>0))return null;{let s=new t5(a.height/2);return s.fromEquirectangularTexture(e,r),t.set(r,s),r.addEventListener("dispose",n),i(s.texture,r.mapping)}}}}return r},dispose:function(){t=new WeakMap}}}// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const i_=[.125,.215,.35,.446,.526,.582],iv=/*@__PURE__*/new class extends t0{constructor(e=-1,t=1,i=1,n=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=i,this.bottom=n,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this}setViewOffset(e,t,i,n,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=n,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){let e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2,r=i-e,a=i+e,s=n+t,o=n-t;if(null!==this.view&&this.view.enabled){let e=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=e*this.view.offsetX,a=r+e*this.view.width,s-=t*this.view.offsetY,o=s-t*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){let t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}},iy=/*@__PURE__*/new td;let ix=null;// Golden Ratio
const iM=(1+Math.sqrt(5))/2,ib=1/iM,iS=[/*@__PURE__*/new ei(1,1,1),/*@__PURE__*/new ei(-1,1,1),/*@__PURE__*/new ei(1,1,-1),/*@__PURE__*/new ei(-1,1,-1),/*@__PURE__*/new ei(0,iM,ib),/*@__PURE__*/new ei(0,iM,-ib),/*@__PURE__*/new ei(ib,0,iM),/*@__PURE__*/new ei(-ib,0,iM),/*@__PURE__*/new ei(iM,ib,0),/*@__PURE__*/new ei(-iM,ib,0)];/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/class iE{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */fromScene(e,t=0,i=.1,n=100){ix=this._renderer.getRenderTarget(),this._setSize(256);let r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,i,n,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */fromEquirectangular(e,t=null){return this._fromTexture(e,t)}/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */fromCubemap(e,t=null){return this._fromTexture(e,t)}/**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=iR(),this._compileMaterial(this._cubemapMaterial))}/**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=iA(),this._compileMaterial(this._equirectMaterial))}/**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}// private interface
_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(ix),e.scissorTest=!1,iw(e,0,0,e.width,e.height)}_fromTexture(e,t){301===e.mapping||302===e.mapping?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),ix=this._renderer.getRenderTarget();let i=t||this._allocateTargets();return this._textureToCubeUV(e,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){let e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,i={magFilter:1006,minFilter:1006,generateMipmaps:!1,type:1016,format:1023,colorSpace:m,depthBuffer:!1},n=iT(e,t,i);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=iT(e,t,i);let{_lodMax:n}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){let t=[],i=[],n=[],r=e,a=e-4+1+i_.length;for(let s=0;s<a;s++){let a=Math.pow(2,r);i.push(a);let o=1/a;s>e-4?o=i_[s-e+4-1]:0===s&&(o=0),n.push(o);let l=1/(a-2),h=-l,c=1+l,u=[h,h,c,h,c,c,h,h,c,c,h,c],d=new Float32Array(108),p=new Float32Array(72),m=new Float32Array(36);for(let e=0;e<6;e++){let t=e%3*2/3-1,i=e>2?0:-1,n=[t,i,0,t+2/3,i,0,t+2/3,i+1,0,t,i,0,t+2/3,i+1,0,t,i+1,0];d.set(n,18*e),p.set(u,12*e);let r=[e,e,e,e,e,e];m.set(r,6*e)}let f=new tR;f.setAttribute("position",new t_(d,3)),f.setAttribute("uv",new t_(p,2)),f.setAttribute("faceIndex",new t_(m,1)),t.push(f),r>4&&r--}return{lodPlanes:t,sizeLods:i,sigmas:n}}(n)),this._blurMaterial=function(e,t,i){let n=new Float32Array(20),r=new ei(0,1,0),a=new t$({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/i,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:iL(),fragmentShader:/* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return a}(n,e,t)}return n}_compileMaterial(e){let t=new tX(this._lodPlanes[0],e);this._renderer.compile(t,iv)}_sceneToCubeUV(e,t,i,n){let r=new t1(90,1,t,i),a=[1,-1,1,1,1,1],s=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,h=o.toneMapping;o.getClearColor(iy),o.toneMapping=0,o.autoClear=!1;let c=new tm({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),u=new tX(new tY,c),d=!1,p=e.background;p?p.isColor&&(c.color.copy(p),e.background=null,d=!0):(c.color.copy(iy),d=!0);for(let t=0;t<6;t++){let i=t%3;0===i?(r.up.set(0,a[t],0),r.lookAt(s[t],0,0)):1===i?(r.up.set(0,0,a[t]),r.lookAt(0,s[t],0)):(r.up.set(0,a[t],0),r.lookAt(0,0,s[t]));let l=this._cubeSize;iw(n,i*l,t>2?l:0,l,l),o.setRenderTarget(n),d&&o.render(u,r),o.render(e,r)}u.geometry.dispose(),u.material.dispose(),o.toneMapping=h,o.autoClear=l,e.background=p}_textureToCubeUV(e,t){let i=this._renderer,n=301===e.mapping||302===e.mapping;n?(null===this._cubemapMaterial&&(this._cubemapMaterial=iR()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===e.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=iA());let r=n?this._cubemapMaterial:this._equirectMaterial,a=new tX(this._lodPlanes[0],r),s=r.uniforms;s.envMap.value=e;let o=this._cubeSize;iw(t,0,0,3*o,2*o),i.setRenderTarget(t),i.render(a,iv)}_applyPMREM(e){let t=this._renderer,i=t.autoClear;t.autoClear=!1;for(let t=1;t<this._lodPlanes.length;t++){let i=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),n=iS[(t-1)%iS.length];this._blur(e,t-1,t,i,n)}t.autoClear=i}/**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */_blur(e,t,i,n,r){let a=this._pingPongRenderTarget;this._halfBlur(e,a,t,i,n,"latitudinal",r),this._halfBlur(a,e,i,i,n,"longitudinal",r)}_halfBlur(e,t,i,n,r,a,s){let o=this._renderer,l=this._blurMaterial;"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");let h=new tX(this._lodPlanes[n],l),c=l.uniforms,u=this._sizeLods[i]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,m=isFinite(r)?1+Math.floor(3*p):20;m>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);let f=[],g=0;for(let e=0;e<20;++e){let t=e/p,i=Math.exp(-t*t/2);f.push(i),0===e?g+=i:e<m&&(g+=2*i)}for(let e=0;e<f.length;e++)f[e]=f[e]/g;c.envMap.value=e.texture,c.samples.value=m,c.weights.value=f,c.latitudinal.value="latitudinal"===a,s&&(c.poleAxis.value=s);let{_lodMax:_}=this;c.dTheta.value=d,c.mipInt.value=_-i;let v=this._sizeLods[n],y=3*v*(n>_-4?n-_+4:0),x=4*(this._cubeSize-v);iw(t,y,x,3*v,2*v),o.setRenderTarget(t),o.render(h,iv)}}function iT(e,t,i){let n=new $(e,t,i);return n.texture.mapping=306,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function iw(e,t,i,n,r){e.viewport.set(t,i,n,r),e.scissor.set(t,i,n,r)}function iA(){return new t$({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:iL(),fragmentShader:/* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:0,depthTest:!1,depthWrite:!1})}function iR(){return new t$({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:iL(),fragmentShader:/* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:0,depthTest:!1,depthWrite:!1})}function iL(){return/* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function iC(e){let t=new WeakMap,i=null;function n(e){let i=e.target;i.removeEventListener("dispose",n);let r=t.get(i);void 0!==r&&(t.delete(i),r.dispose())}return{get:function(r){if(r&&r.isTexture){let a=r.mapping,s=303===a||304===a,o=301===a||302===a;// equirect/cube map to cubeUV conversion
if(s||o){if(r.isRenderTargetTexture&&!0===r.needsPMREMUpdate){r.needsPMREMUpdate=!1;let n=t.get(r);return null===i&&(i=new iE(e)),n=s?i.fromEquirectangular(r,n):i.fromCubemap(r,n),t.set(r,n),n.texture}if(t.has(r))return t.get(r).texture;{let a=r.image;if(!(s&&a&&a.height>0||o&&a&&function(e){let t=0;for(let i=0;i<6;i++)void 0!==e[i]&&t++;return 6===t}(a)))return null;{null===i&&(i=new iE(e));let a=s?i.fromEquirectangular(r):i.fromCubemap(r);return t.set(r,a),r.addEventListener("dispose",n),a.texture}}}}return r},dispose:function(){t=new WeakMap,null!==i&&(i.dispose(),i=null)}}}function iP(e){let t={};function i(i){let n;if(void 0!==t[i])return t[i];switch(i){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=e.getExtension(i)}return t[i]=n,n}return{has:function(e){return null!==i(e)},init:function(e){e.isWebGL2?i("EXT_color_buffer_float"):(i("WEBGL_depth_texture"),i("OES_texture_float"),i("OES_texture_half_float"),i("OES_texture_half_float_linear"),i("OES_standard_derivatives"),i("OES_element_index_uint"),i("OES_vertex_array_object"),i("ANGLE_instanced_arrays")),i("OES_texture_float_linear"),i("EXT_color_buffer_half_float"),i("WEBGL_multisampled_render_to_texture")},get:function(e){let t=i(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function iI(e,t,i,n){let r={},a=new WeakMap;function s(e){let o=e.target;for(let e in null!==o.index&&t.remove(o.index),o.attributes)t.remove(o.attributes[e]);for(let e in o.morphAttributes){let i=o.morphAttributes[e];for(let e=0,n=i.length;e<n;e++)t.remove(i[e])}o.removeEventListener("dispose",s),delete r[o.id];let l=a.get(o);l&&(t.remove(l),a.delete(o)),n.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,//
i.memory.geometries--}function o(e){let i=[],n=e.index,r=e.attributes.position,s=0;if(null!==n){let e=n.array;s=n.version;for(let t=0,n=e.length;t<n;t+=3){let n=e[t+0],r=e[t+1],a=e[t+2];i.push(n,r,r,a,a,n)}}else{if(void 0===r)return;let e=r.array;s=r.version;for(let t=0,n=e.length/3-1;t<n;t+=3){let e=t+0,n=t+1,r=t+2;i.push(e,n,n,r,r,e)}}let o=new(U(i)?ty:tv)(i,1);o.version=s;// Updating index buffer in VAO now. See WebGLBindingStates
//
let l=a.get(e);l&&t.remove(l),//
a.set(e,o)}return{get:function(e,t){return!0===r[t.id]||(t.addEventListener("dispose",s),r[t.id]=!0,i.memory.geometries++),t},update:function(i){let n=i.attributes;// Updating index buffer in VAO now. See WebGLBindingStates.
for(let i in n)t.update(n[i],e.ARRAY_BUFFER);// morph targets
let r=i.morphAttributes;for(let i in r){let n=r[i];for(let i=0,r=n.length;i<r;i++)t.update(n[i],e.ARRAY_BUFFER)}},getWireframeAttribute:function(e){let t=a.get(e);if(t){let i=e.index;null!==i&&t.version<i.version&&o(e)}else o(e);return a.get(e)}}}function iO(e,t,i,n){let r,a,s;let o=n.isWebGL2;//
this.setMode=function(e){r=e},this.setIndex=function(e){a=e.type,s=e.bytesPerElement},this.render=function(t,n){e.drawElements(r,n,a,t*s),i.update(n,r,1)},this.renderInstances=function(n,l,h){let c,u;if(0!==h){if(o)c=e,u="drawElementsInstanced";else if(c=t.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",null===c){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}c[u](r,l,a,n*s,h),i.update(l,r,h)}}}function iU(e){let t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(i,n,r){switch(t.calls++,n){case e.TRIANGLES:t.triangles+=r*(i/3);break;case e.LINES:t.lines+=r*(i/2);break;case e.LINE_STRIP:t.lines+=r*(i-1);break;case e.LINE_LOOP:t.lines+=r*i;break;case e.POINTS:t.points+=r*i;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function iN(e,t){return e[0]-t[0]}function iD(e,t){return Math.abs(t[1])-Math.abs(e[1])}function iF(e,t,i){let n={},r=new Float32Array(8),a=new WeakMap,s=new J,o=[];for(let e=0;e<8;e++)o[e]=[e,0];return{update:function(l,h,c){let u=l.morphTargetInfluences;if(!0===t.isWebGL2){// instead of using attributes, the WebGL 2 code path encodes morph targets
// into an array of data textures. Each layer represents a single morph target.
let n=h.morphAttributes.position||h.morphAttributes.normal||h.morphAttributes.color,r=void 0!==n?n.length:0,o=a.get(h);if(void 0===o||o.count!==r){void 0!==o&&o.texture.dispose();let e=void 0!==h.morphAttributes.position,i=void 0!==h.morphAttributes.normal,n=void 0!==h.morphAttributes.color,l=h.morphAttributes.position||[],c=h.morphAttributes.normal||[],u=h.morphAttributes.color||[],d=0;!0===e&&(d=1),!0===i&&(d=2),!0===n&&(d=3);let p=h.attributes.position.count*d,m=1;p>t.maxTextureSize&&(m=Math.ceil(p/t.maxTextureSize),p=t.maxTextureSize);let f=new Float32Array(p*m*4*r),g=new ee(f,p,m,r);g.type=1015,g.needsUpdate=!0;// fill buffer
let _=4*d;for(let t=0;t<r;t++){let r=l[t],a=c[t],o=u[t],h=p*m*4*t;for(let t=0;t<r.count;t++){let l=t*_;!0===e&&(s.fromBufferAttribute(r,t),f[h+l+0]=s.x,f[h+l+1]=s.y,f[h+l+2]=s.z,f[h+l+3]=0),!0===i&&(s.fromBufferAttribute(a,t),f[h+l+4]=s.x,f[h+l+5]=s.y,f[h+l+6]=s.z,f[h+l+7]=0),!0===n&&(s.fromBufferAttribute(o,t),f[h+l+8]=s.x,f[h+l+9]=s.y,f[h+l+10]=s.z,f[h+l+11]=4===o.itemSize?s.w:1)}}o={count:r,texture:g,size:new P(p,m)},a.set(h,o),h.addEventListener("dispose",function e(){g.dispose(),a.delete(h),h.removeEventListener("dispose",e)})}//
let l=0;for(let e=0;e<u.length;e++)l+=u[e];let d=h.morphTargetsRelative?1:1-l;c.getUniforms().setValue(e,"morphTargetBaseInfluence",d),c.getUniforms().setValue(e,"morphTargetInfluences",u),c.getUniforms().setValue(e,"morphTargetsTexture",o.texture,i),c.getUniforms().setValue(e,"morphTargetsTextureSize",o.size)}else{// When object doesn't have morph target influences defined, we treat it as a 0-length array
// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
let t=void 0===u?0:u.length,i=n[h.id];if(void 0===i||i.length!==t){// initialise list
i=[];for(let e=0;e<t;e++)i[e]=[e,0];n[h.id]=i}// Collect influences
for(let e=0;e<t;e++){let t=i[e];t[0]=e,t[1]=u[e]}i.sort(iD);for(let e=0;e<8;e++)e<t&&i[e][1]?(o[e][0]=i[e][0],o[e][1]=i[e][1]):(o[e][0]=Number.MAX_SAFE_INTEGER,o[e][1]=0);o.sort(iN);let a=h.morphAttributes.position,s=h.morphAttributes.normal,l=0;for(let e=0;e<8;e++){let t=o[e],i=t[0],n=t[1];i!==Number.MAX_SAFE_INTEGER&&n?(a&&h.getAttribute("morphTarget"+e)!==a[i]&&h.setAttribute("morphTarget"+e,a[i]),s&&h.getAttribute("morphNormal"+e)!==s[i]&&h.setAttribute("morphNormal"+e,s[i]),r[e]=n,l+=n):(a&&!0===h.hasAttribute("morphTarget"+e)&&h.deleteAttribute("morphTarget"+e),s&&!0===h.hasAttribute("morphNormal"+e)&&h.deleteAttribute("morphNormal"+e),r[e]=0)}// GLSL shader uses formula baseinfluence * base + sum(target * influence)
// This allows us to switch between absolute morphs and relative morphs without changing shader code
// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
let d=h.morphTargetsRelative?1:1-l;c.getUniforms().setValue(e,"morphTargetBaseInfluence",d),c.getUniforms().setValue(e,"morphTargetInfluences",r)}}}}function iB(e,t,i,n){let r=new WeakMap;function a(e){let t=e.target;t.removeEventListener("dispose",a),i.remove(t.instanceMatrix),null!==t.instanceColor&&i.remove(t.instanceColor)}return{update:function(s){let o=n.render.frame,l=s.geometry,h=t.get(s,l);if(r.get(h)!==o&&(t.update(h),r.set(h,o)),s.isInstancedMesh&&(!1===s.hasEventListener("dispose",a)&&s.addEventListener("dispose",a),r.get(s)!==o&&(i.update(s.instanceMatrix,e.ARRAY_BUFFER),null!==s.instanceColor&&i.update(s.instanceColor,e.ARRAY_BUFFER),r.set(s,o))),s.isSkinnedMesh){let e=s.skeleton;r.get(e)!==o&&(e.update(),r.set(e,o))}return h},dispose:function(){r=new WeakMap}}}/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */const iz=/*@__PURE__*/new Q,ik=/*@__PURE__*/new ee,iV=/*@__PURE__*/new class extends Q{constructor(e=null,t=1,i=1,n=1){// We're going to add .setXXX() methods for setting properties later.
// Users can still set in DataTexture3D directly.
//
//	const texture = new THREE.DataTexture3D( data, width, height, depth );
// 	texture.anisotropy = 16;
//
// See #14839
super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:i,depth:n},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},iH=/*@__PURE__*/new t3,iG=[],iq=[],iW=new Float32Array(16),iX=new Float32Array(9),ij=new Float32Array(4);// Flattening for arrays of vectors and matrices
function iY(e,t,i){let n=e[0];if(n<=0||n>0)return e;// unoptimized: ! isNaN( firstElem )
// see http://jacksondunstan.com/articles/983
let r=t*i,a=iG[r];if(void 0===a&&(a=new Float32Array(r),iG[r]=a),0!==t){n.toArray(a,0);for(let n=1,r=0;n!==t;++n)r+=i,e[n].toArray(a,r)}return a}function iZ(e,t){if(e.length!==t.length)return!1;for(let i=0,n=e.length;i<n;i++)if(e[i]!==t[i])return!1;return!0}function iQ(e,t){for(let i=0,n=t.length;i<n;i++)e[i]=t[i]}// Texture unit allocation
function iJ(e,t){let i=iq[t];void 0===i&&(i=new Int32Array(t),iq[t]=i);for(let n=0;n!==t;++n)i[n]=e.allocateTextureUnit();return i}// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function iK(e,t){let i=this.cache;i[0]!==t&&(e.uniform1f(this.addr,t),i[0]=t)}// Single float vector (from flat array or THREE.VectorN)
function i$(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y)&&(e.uniform2f(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(iZ(i,t))return;e.uniform2fv(this.addr,t),iQ(i,t)}}function i0(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(e.uniform3f(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else if(void 0!==t.r)(i[0]!==t.r||i[1]!==t.g||i[2]!==t.b)&&(e.uniform3f(this.addr,t.r,t.g,t.b),i[0]=t.r,i[1]=t.g,i[2]=t.b);else{if(iZ(i,t))return;e.uniform3fv(this.addr,t),iQ(i,t)}}function i1(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(iZ(i,t))return;e.uniform4fv(this.addr,t),iQ(i,t)}}// Single matrix (from flat array or THREE.MatrixN)
function i2(e,t){let i=this.cache,n=t.elements;if(void 0===n){if(iZ(i,t))return;e.uniformMatrix2fv(this.addr,!1,t),iQ(i,t)}else{if(iZ(i,n))return;ij.set(n),e.uniformMatrix2fv(this.addr,!1,ij),iQ(i,n)}}function i3(e,t){let i=this.cache,n=t.elements;if(void 0===n){if(iZ(i,t))return;e.uniformMatrix3fv(this.addr,!1,t),iQ(i,t)}else{if(iZ(i,n))return;iX.set(n),e.uniformMatrix3fv(this.addr,!1,iX),iQ(i,n)}}function i5(e,t){let i=this.cache,n=t.elements;if(void 0===n){if(iZ(i,t))return;e.uniformMatrix4fv(this.addr,!1,t),iQ(i,t)}else{if(iZ(i,n))return;iW.set(n),e.uniformMatrix4fv(this.addr,!1,iW),iQ(i,n)}}// Single integer / boolean
function i4(e,t){let i=this.cache;i[0]!==t&&(e.uniform1i(this.addr,t),i[0]=t)}// Single integer / boolean vector (from flat array or THREE.VectorN)
function i6(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y)&&(e.uniform2i(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(iZ(i,t))return;e.uniform2iv(this.addr,t),iQ(i,t)}}function i7(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(e.uniform3i(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else{if(iZ(i,t))return;e.uniform3iv(this.addr,t),iQ(i,t)}}function i8(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(e.uniform4i(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(iZ(i,t))return;e.uniform4iv(this.addr,t),iQ(i,t)}}// Single unsigned integer
function i9(e,t){let i=this.cache;i[0]!==t&&(e.uniform1ui(this.addr,t),i[0]=t)}// Single unsigned integer vector (from flat array or THREE.VectorN)
function ne(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y)&&(e.uniform2ui(this.addr,t.x,t.y),i[0]=t.x,i[1]=t.y);else{if(iZ(i,t))return;e.uniform2uiv(this.addr,t),iQ(i,t)}}function nt(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z)&&(e.uniform3ui(this.addr,t.x,t.y,t.z),i[0]=t.x,i[1]=t.y,i[2]=t.z);else{if(iZ(i,t))return;e.uniform3uiv(this.addr,t),iQ(i,t)}}function ni(e,t){let i=this.cache;if(void 0!==t.x)(i[0]!==t.x||i[1]!==t.y||i[2]!==t.z||i[3]!==t.w)&&(e.uniform4ui(this.addr,t.x,t.y,t.z,t.w),i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=t.w);else{if(iZ(i,t))return;e.uniform4uiv(this.addr,t),iQ(i,t)}}// Single texture (2D / Cube)
function nn(e,t,i){let n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(e.uniform1i(this.addr,r),n[0]=r),i.setTexture2D(t||iz,r)}function nr(e,t,i){let n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(e.uniform1i(this.addr,r),n[0]=r),i.setTexture3D(t||iV,r)}function na(e,t,i){let n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(e.uniform1i(this.addr,r),n[0]=r),i.setTextureCube(t||iH,r)}function ns(e,t,i){let n=this.cache,r=i.allocateTextureUnit();n[0]!==r&&(e.uniform1i(this.addr,r),n[0]=r),i.setTexture2DArray(t||ik,r)}// Array of scalars
function no(e,t){e.uniform1fv(this.addr,t)}// Array of vectors (from flat array or array of THREE.VectorN)
function nl(e,t){let i=iY(t,this.size,2);e.uniform2fv(this.addr,i)}function nh(e,t){let i=iY(t,this.size,3);e.uniform3fv(this.addr,i)}function nc(e,t){let i=iY(t,this.size,4);e.uniform4fv(this.addr,i)}// Array of matrices (from flat array or array of THREE.MatrixN)
function nu(e,t){let i=iY(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,i)}function nd(e,t){let i=iY(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,i)}function np(e,t){let i=iY(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,i)}// Array of integer / boolean
function nm(e,t){e.uniform1iv(this.addr,t)}// Array of integer / boolean vectors (from flat array)
function nf(e,t){e.uniform2iv(this.addr,t)}function ng(e,t){e.uniform3iv(this.addr,t)}function n_(e,t){e.uniform4iv(this.addr,t)}// Array of unsigned integer
function nv(e,t){e.uniform1uiv(this.addr,t)}// Array of unsigned integer vectors (from flat array)
function ny(e,t){e.uniform2uiv(this.addr,t)}function nx(e,t){e.uniform3uiv(this.addr,t)}function nM(e,t){e.uniform4uiv(this.addr,t)}// Array of textures (2D / 3D / Cube / 2DArray)
function nb(e,t,i){let n=this.cache,r=t.length,a=iJ(i,r);iZ(n,a)||(e.uniform1iv(this.addr,a),iQ(n,a));for(let e=0;e!==r;++e)i.setTexture2D(t[e]||iz,a[e])}function nS(e,t,i){let n=this.cache,r=t.length,a=iJ(i,r);iZ(n,a)||(e.uniform1iv(this.addr,a),iQ(n,a));for(let e=0;e!==r;++e)i.setTexture3D(t[e]||iV,a[e])}function nE(e,t,i){let n=this.cache,r=t.length,a=iJ(i,r);iZ(n,a)||(e.uniform1iv(this.addr,a),iQ(n,a));for(let e=0;e!==r;++e)i.setTextureCube(t[e]||iH,a[e])}function nT(e,t,i){let n=this.cache,r=t.length,a=iJ(i,r);iZ(n,a)||(e.uniform1iv(this.addr,a),iQ(n,a));for(let e=0;e!==r;++e)i.setTexture2DArray(t[e]||ik,a[e])}// --- Uniform Classes ---
class nw{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.setValue=// Helper to pick the right setter for the singular case
function(e){switch(e){case 5126:return iK;// FLOAT
case 35664:return i$;// _VEC2
case 35665:return i0;// _VEC3
case 35666:return i1;// _VEC4
case 35674:return i2;// _MAT2
case 35675:return i3;// _MAT3
case 35676:return i5;// _MAT4
case 5124:case 35670:return i4;// INT, BOOL
case 35667:case 35671:return i6;// _VEC2
case 35668:case 35672:return i7;// _VEC3
case 35669:case 35673:return i8;// _VEC4
case 5125:return i9;// UINT
case 36294:return ne;// _VEC2
case 36295:return nt;// _VEC3
case 36296:return ni;// _VEC4
case 35678:case 36198:case 36298:case 36306:case 35682:return nn;case 35679:case 36299:case 36307:return nr;case 35680:case 36300:case 36308:case 36293:return na;case 36289:case 36303:case 36311:case 36292:return ns}}(t.type);// this.path = activeInfo.name; // DEBUG
}}class nA{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.size=t.size,this.setValue=// Helper to pick the right setter for a pure (bottom-level) array
function(e){switch(e){case 5126:return no;// FLOAT
case 35664:return nl;// _VEC2
case 35665:return nh;// _VEC3
case 35666:return nc;// _VEC4
case 35674:return nu;// _MAT2
case 35675:return nd;// _MAT3
case 35676:return np;// _MAT4
case 5124:case 35670:return nm;// INT, BOOL
case 35667:case 35671:return nf;// _VEC2
case 35668:case 35672:return ng;// _VEC3
case 35669:case 35673:return n_;// _VEC4
case 5125:return nv;// UINT
case 36294:return ny;// _VEC2
case 36295:return nx;// _VEC3
case 36296:return nM;// _VEC4
case 35678:case 36198:case 36298:case 36306:case 35682:return nb;case 35679:case 36299:case 36307:return nS;case 35680:case 36300:case 36308:case 36293:return nE;case 36289:case 36303:case 36311:case 36292:return nT}}(t.type);// this.path = activeInfo.name; // DEBUG
}}class nR{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,i){let n=this.seq;for(let r=0,a=n.length;r!==a;++r){let a=n[r];a.setValue(e,t[a.id],i)}}}// --- Top-level ---
// Parser - builds up the property tree from the path strings
const nL=/(\w+)(\])?(\[|\.)?/g;// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function nC(e,t){e.seq.push(t),e.map[t.id]=t}// Root Container
class nP{constructor(e,t){this.seq=[],this.map={};let i=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let n=0;n<i;++n){let i=e.getActiveUniform(t,n),r=e.getUniformLocation(t,i.name);!function(e,t,i){let n=e.name,r=n.length;for(// reset RegExp object, because of the early exit of a previous run
nL.lastIndex=0;;){let a=nL.exec(n),s=nL.lastIndex,o=a[1],l="]"===a[2],h=a[3];if(l&&(o|=0),void 0===h||"["===h&&s+2===r){// bare name or "pure" bottom-level array "[0]" suffix
nC(i,void 0===h?new nw(o,e,t):new nA(o,e,t));break}{// step into inner node / create it in case it doesn't exist
let e=i.map,t=e[o];void 0===t&&nC(i,t=new nR(o)),i=t}}}(i,r,this)}}setValue(e,t,i,n){let r=this.map[t];void 0!==r&&r.setValue(e,i,n)}setOptional(e,t,i){let n=t[i];void 0!==n&&this.setValue(e,i,n)}static upload(e,t,i,n){for(let r=0,a=t.length;r!==a;++r){let a=t[r],s=i[a.id];!1!==s.needsUpdate&&a.setValue(e,s.value,n)}}static seqWithValue(e,t){let i=[];for(let n=0,r=e.length;n!==r;++n){let r=e[n];r.id in t&&i.push(r)}return i}}function nI(e,t,i){let n=e.createShader(t);return e.shaderSource(n,i),e.compileShader(n),n}let nO=0;function nU(e,t,i){let n=e.getShaderParameter(t,e.COMPILE_STATUS),r=e.getShaderInfoLog(t).trim();if(n&&""===r)return"";let a=/ERROR: 0:(\d+)/.exec(r);if(!a)return r;{// --enable-privileged-webgl-extension
// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
let n=parseInt(a[1]);return i.toUpperCase()+"\n\n"+r+"\n\n"+function(e,t){let i=e.split("\n"),n=[],r=Math.max(t-6,0),a=Math.min(t+6,i.length);for(let e=r;e<a;e++){let r=e+1;n.push(`${r===t?">":" "} ${r}: ${i[e]}`)}return n.join("\n")}(e.getShaderSource(t),n)}}function nN(e){return""!==e}function nD(e,t){let i=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,i).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function nF(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}// Resolve Includes
const nB=/^[ \t]*#include +<([\w\d./]+)>/gm;function nz(e){return e.replace(nB,nV)}const nk=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function nV(e,t){let i=is[t];if(void 0===i){let e=nk.get(t);if(void 0!==e)i=is[e],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e);else throw Error("Can not resolve #include <"+t+">")}return nz(i)}// Unroll Loops
const nH=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function nG(e){return e.replace(nH,nq)}function nq(e,t,i,n){let r="";for(let e=parseInt(t);e<parseInt(i);e++)r+=n.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return r}//
function nW(e){let t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function nX(e,t,i,n){let r,a,s,o,l,h;// TODO Send this event to Three.js DevTools
// console.log( 'WebGLProgram', cacheKey );
let c=e.getContext(),u=i.defines,d=i.vertexShader,_=i.fragmentShader,v=(l="SHADOWMAP_TYPE_BASIC",1===i.shadowMapType?l="SHADOWMAP_TYPE_PCF":2===i.shadowMapType?l="SHADOWMAP_TYPE_PCF_SOFT":3===i.shadowMapType&&(l="SHADOWMAP_TYPE_VSM"),l),M=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case 301:case 302:t="ENVMAP_TYPE_CUBE";break;case 306:t="ENVMAP_TYPE_CUBE_UV"}return t}(i),b=(h="ENVMAP_MODE_REFLECTION",i.envMap&&302===i.envMapMode&&(h="ENVMAP_MODE_REFRACTION"),h),S=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(i),E=function(e){let t=e.envMapCubeUVHeight;if(null===t)return null;let i=Math.log2(t)-2;return{texelWidth:1/(3*Math.max(Math.pow(2,i),112)),texelHeight:1/t,maxMip:i}}(i),T=i.isWebGL2?"":function(e){let t=[e.extensionDerivatives||e.envMapCubeUVHeight||e.bumpMap||e.normalMapTangentSpace||e.clearcoatNormalMap||e.flatShading||"physical"===e.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap||e.transmission)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return t.filter(nN).join("\n")}(i),w=function(e){let t=[];for(let i in e){let n=e[i];!1!==n&&t.push("#define "+i+" "+n)}return t.join("\n")}(u),A=c.createProgram(),R=i.glslVersion?"#version "+i.glslVersion+"\n":"";i.isRawShaderMaterial?((r=["#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,w].filter(nN).join("\n")).length>0&&(r+="\n"),(a=[T,"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,w].filter(nN).join("\n")).length>0&&(a+="\n")):(r=[nW(i),"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,w,i.instancing?"#define USE_INSTANCING":"",i.instancingColor?"#define USE_INSTANCING_COLOR":"",i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+b:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.displacementMap?"#define USE_DISPLACEMENTMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.anisotropy?"#define USE_ANISOTROPY":"",i.anisotropyMap?"#define USE_ANISOTROPYMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaHash?"#define USE_ALPHAHASH":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",//
i.mapUv?"#define MAP_UV "+i.mapUv:"",i.alphaMapUv?"#define ALPHAMAP_UV "+i.alphaMapUv:"",i.lightMapUv?"#define LIGHTMAP_UV "+i.lightMapUv:"",i.aoMapUv?"#define AOMAP_UV "+i.aoMapUv:"",i.emissiveMapUv?"#define EMISSIVEMAP_UV "+i.emissiveMapUv:"",i.bumpMapUv?"#define BUMPMAP_UV "+i.bumpMapUv:"",i.normalMapUv?"#define NORMALMAP_UV "+i.normalMapUv:"",i.displacementMapUv?"#define DISPLACEMENTMAP_UV "+i.displacementMapUv:"",i.metalnessMapUv?"#define METALNESSMAP_UV "+i.metalnessMapUv:"",i.roughnessMapUv?"#define ROUGHNESSMAP_UV "+i.roughnessMapUv:"",i.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+i.anisotropyMapUv:"",i.clearcoatMapUv?"#define CLEARCOATMAP_UV "+i.clearcoatMapUv:"",i.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+i.clearcoatNormalMapUv:"",i.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+i.clearcoatRoughnessMapUv:"",i.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+i.iridescenceMapUv:"",i.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+i.iridescenceThicknessMapUv:"",i.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+i.sheenColorMapUv:"",i.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+i.sheenRoughnessMapUv:"",i.specularMapUv?"#define SPECULARMAP_UV "+i.specularMapUv:"",i.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+i.specularColorMapUv:"",i.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+i.specularIntensityMapUv:"",i.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+i.transmissionMapUv:"",i.thicknessMapUv?"#define THICKNESSMAP_UV "+i.thicknessMapUv:"",//
i.vertexTangents&&!1===i.flatShading?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&!1===i.flatShading?"#define USE_MORPHNORMALS":"",i.morphColors&&i.isWebGL2?"#define USE_MORPHCOLORS":"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+i.morphTextureStride:"",i.morphTargetsCount>0&&i.isWebGL2?"#define MORPHTARGETS_COUNT "+i.morphTargetsCount:"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+v:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.numLightProbes>0?"#define USE_LIGHT_PROBES":"",i.useLegacyLights?"#define LEGACY_LIGHTS":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(nN).join("\n"),a=[T,nW(i),"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,w,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+M:"",i.envMap?"#define "+b:"",i.envMap?"#define "+S:"",E?"#define CUBEUV_TEXEL_WIDTH "+E.texelWidth:"",E?"#define CUBEUV_TEXEL_HEIGHT "+E.texelHeight:"",E?"#define CUBEUV_MAX_MIP "+E.maxMip+".0":"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.anisotropy?"#define USE_ANISOTROPY":"",i.anisotropyMap?"#define USE_ANISOTROPYMAP":"",i.clearcoat?"#define USE_CLEARCOAT":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescence?"#define USE_IRIDESCENCE":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaTest?"#define USE_ALPHATEST":"",i.alphaHash?"#define USE_ALPHAHASH":"",i.sheen?"#define USE_SHEEN":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.vertexTangents&&!1===i.flatShading?"#define USE_TANGENT":"",i.vertexColors||i.instancingColor?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+v:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.numLightProbes>0?"#define USE_LIGHT_PROBES":"",i.useLegacyLights?"#define LEGACY_LIGHTS":"",i.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==i.toneMapping?"#define TONE_MAPPING":"",0!==i.toneMapping?is.tonemapping_pars_fragment:"",0!==i.toneMapping?function(e,t){let i;switch(t){case 1:i="Linear";break;case 2:i="Reinhard";break;case 3:i="OptimizedCineon";break;case 4:i="ACESFilmic";break;case 5:i="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),i="Linear"}return"vec3 "+e+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.opaque?"#define OPAQUE":"",is.colorspace_pars_fragment,function(e,t){let i=function(e){let t;let i=H.getPrimaries(H.workingColorSpace),n=H.getPrimaries(e);switch(i===n?t="":"p3"===i&&n===y?t="LinearDisplayP3ToLinearSRGB":i===y&&"p3"===n&&(t="LinearSRGBToLinearDisplayP3"),e){case m:case g:return[t,"LinearTransferOETF"];case p:case f:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",e),[t,"LinearTransferOETF"]}}(t);return`vec4 ${e}( vec4 value ) { return ${i[0]}( ${i[1]}( value ) ); }`}("linearToOutputTexel",i.outputColorSpace),i.useDepthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(nN).join("\n")),d=nF(d=nD(d=nz(d),i),i),_=nF(_=nD(_=nz(_),i),i),d=nG(d),_=nG(_),i.isWebGL2&&!0!==i.isRawShaderMaterial&&(// GLSL 3.0 conversion for built-in materials and ShaderMaterial
R="#version 300 es\n",r="precision mediump sampler2DArray;\n#define attribute in\n#define varying out\n#define texture2D texture\n"+r,a=["#define varying in",i.glslVersion===x?"":"layout(location = 0) out highp vec4 pc_fragColor;",i.glslVersion===x?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+a);let L=R+r+d,C=R+a+_,P=nI(c,c.VERTEX_SHADER,L),I=nI(c,c.FRAGMENT_SHADER,C);// check for link errors
if(c.attachShader(A,P),c.attachShader(A,I),void 0!==i.index0AttributeName?c.bindAttribLocation(A,0,i.index0AttributeName):!0===i.morphTargets&&c.bindAttribLocation(A,0,"position"),c.linkProgram(A),e.debug.checkShaderErrors){let t=c.getProgramInfoLog(A).trim(),i=c.getShaderInfoLog(P).trim(),n=c.getShaderInfoLog(I).trim(),s=!0,o=!0;if(!1===c.getProgramParameter(A,c.LINK_STATUS)){if(s=!1,"function"==typeof e.debug.onShaderError)e.debug.onShaderError(c,A,P,I);else{// default error reporting
let e=nU(c,P,"vertex"),i=nU(c,I,"fragment");console.error("THREE.WebGLProgram: Shader Error "+c.getError()+" - VALIDATE_STATUS "+c.getProgramParameter(A,c.VALIDATE_STATUS)+"\n\nProgram Info Log: "+t+"\n"+e+"\n"+i)}}else""!==t?console.warn("THREE.WebGLProgram: Program Info Log:",t):(""===i||""===n)&&(o=!1);o&&(this.diagnostics={runnable:s,programLog:t,vertexShader:{log:i,prefix:r},fragmentShader:{log:n,prefix:a}})}return(// Clean up
// Crashes in iOS9 and iOS10. #18402
// gl.detachShader( program, glVertexShader );
// gl.detachShader( program, glFragmentShader );
c.deleteShader(P),c.deleteShader(I),this.getUniforms=function(){return void 0===s&&(s=new nP(c,A)),s},this.getAttributes=function(){return void 0===o&&(o=function(e,t){let i={},n=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let r=0;r<n;r++){let n=e.getActiveAttrib(t,r),a=n.name,s=1;n.type===e.FLOAT_MAT2&&(s=2),n.type===e.FLOAT_MAT3&&(s=3),n.type===e.FLOAT_MAT4&&(s=4),// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
i[a]={type:n.type,location:e.getAttribLocation(t,a),locationSize:s}}return i}(c,A)),o},// free resource
this.destroy=function(){n.releaseStatesOfProgram(this),c.deleteProgram(A),this.program=void 0},//
this.type=i.shaderType,this.name=i.shaderName,this.id=nO++,this.cacheKey=t,this.usedTimes=1,this.program=A,this.vertexShader=P,this.fragmentShader=I,this)}let nj=0;class nY{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){let t=e.vertexShader,i=e.fragmentShader,n=this._getShaderStage(t),r=this._getShaderStage(i),a=this._getShaderCacheForMaterial(e);return!1===a.has(n)&&(a.add(n),n.usedTimes++),!1===a.has(r)&&(a.add(r),r.usedTimes++),this}remove(e){let t=this.materialCache.get(e);for(let e of t)e.usedTimes--,0===e.usedTimes&&this.shaderCache.delete(e.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){let t=this.materialCache,i=t.get(e);return void 0===i&&(i=new Set,t.set(e,i)),i}_getShaderStage(e){let t=this.shaderCache,i=t.get(e);return void 0===i&&(i=new nZ(e),t.set(e,i)),i}}class nZ{constructor(e){this.id=nj++,this.code=e,this.usedTimes=0}}function nQ(e,t,i,n,r,a,s){let o=new eG,l=new nY,h=[],c=r.isWebGL2,u=r.logarithmicDepthBuffer,d=r.vertexTextures,p=r.precision,f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function g(e){return 0===e?"uv":`uv${e}`}return{getParameters:function(a,o,h,_,y){let x,M,b,S;let E=_.fog,T=y.geometry,w=a.isMeshStandardMaterial?_.environment:null,A=(a.isMeshStandardMaterial?i:t).get(a.envMap||w),R=A&&306===A.mapping?A.image.height:null,L=f[a.type];null!==a.precision&&(p=r.getMaxPrecision(a.precision))!==a.precision&&console.warn("THREE.WebGLProgram.getParameters:",a.precision,"not supported, using",p,"instead.");//
let C=T.morphAttributes.position||T.morphAttributes.normal||T.morphAttributes.color,P=void 0!==C?C.length:0,I=0;if(void 0!==T.morphAttributes.position&&(I=1),void 0!==T.morphAttributes.normal&&(I=2),void 0!==T.morphAttributes.color&&(I=3),L){let e=il[L];x=e.vertexShader,M=e.fragmentShader}else x=a.vertexShader,M=a.fragmentShader,l.update(a),b=l.getVertexShaderID(a),S=l.getFragmentShaderID(a);let O=e.getRenderTarget(),U=!0===y.isInstancedMesh,N=!!a.map,D=!!a.matcap,F=!!A,B=!!a.aoMap,z=!!a.lightMap,k=!!a.bumpMap,V=!!a.normalMap,G=!!a.displacementMap,q=!!a.emissiveMap,W=!!a.metalnessMap,X=!!a.roughnessMap,j=a.anisotropy>0,Y=a.clearcoat>0,Z=a.iridescence>0,Q=a.sheen>0,J=a.transmission>0,K=j&&!!a.anisotropyMap,$=Y&&!!a.clearcoatMap,ee=Y&&!!a.clearcoatNormalMap,et=Y&&!!a.clearcoatRoughnessMap,ei=Z&&!!a.iridescenceMap,en=Z&&!!a.iridescenceThicknessMap,er=Q&&!!a.sheenColorMap,ea=Q&&!!a.sheenRoughnessMap,es=!!a.specularMap,eo=!!a.specularColorMap,el=!!a.specularIntensityMap,eh=J&&!!a.transmissionMap,ec=J&&!!a.thicknessMap,eu=!!a.gradientMap,ed=!!a.alphaMap,ep=a.alphaTest>0,em=!!a.alphaHash,ef=!!a.extensions,eg=!!T.attributes.uv1,e_=!!T.attributes.uv2,ev=!!T.attributes.uv3,ey=0;a.toneMapped&&(null===O||!0===O.isXRRenderTarget)&&(ey=e.toneMapping);let ex={isWebGL2:c,shaderID:L,shaderType:a.type,shaderName:a.name,vertexShader:x,fragmentShader:M,defines:a.defines,customVertexShaderID:b,customFragmentShaderID:S,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:p,instancing:U,instancingColor:U&&null!==y.instanceColor,supportsVertexTextures:d,outputColorSpace:null===O?e.outputColorSpace:!0===O.isXRRenderTarget?O.texture.colorSpace:m,map:N,matcap:D,envMap:F,envMapMode:F&&A.mapping,envMapCubeUVHeight:R,aoMap:B,lightMap:z,bumpMap:k,normalMap:V,displacementMap:d&&G,emissiveMap:q,normalMapObjectSpace:V&&1===a.normalMapType,normalMapTangentSpace:V&&0===a.normalMapType,metalnessMap:W,roughnessMap:X,anisotropy:j,anisotropyMap:K,clearcoat:Y,clearcoatMap:$,clearcoatNormalMap:ee,clearcoatRoughnessMap:et,iridescence:Z,iridescenceMap:ei,iridescenceThicknessMap:en,sheen:Q,sheenColorMap:er,sheenRoughnessMap:ea,specularMap:es,specularColorMap:eo,specularIntensityMap:el,transmission:J,transmissionMap:eh,thicknessMap:ec,gradientMap:eu,opaque:!1===a.transparent&&1===a.blending,alphaMap:ed,alphaTest:ep,alphaHash:em,combine:a.combine,//
mapUv:N&&g(a.map.channel),aoMapUv:B&&g(a.aoMap.channel),lightMapUv:z&&g(a.lightMap.channel),bumpMapUv:k&&g(a.bumpMap.channel),normalMapUv:V&&g(a.normalMap.channel),displacementMapUv:G&&g(a.displacementMap.channel),emissiveMapUv:q&&g(a.emissiveMap.channel),metalnessMapUv:W&&g(a.metalnessMap.channel),roughnessMapUv:X&&g(a.roughnessMap.channel),anisotropyMapUv:K&&g(a.anisotropyMap.channel),clearcoatMapUv:$&&g(a.clearcoatMap.channel),clearcoatNormalMapUv:ee&&g(a.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:et&&g(a.clearcoatRoughnessMap.channel),iridescenceMapUv:ei&&g(a.iridescenceMap.channel),iridescenceThicknessMapUv:en&&g(a.iridescenceThicknessMap.channel),sheenColorMapUv:er&&g(a.sheenColorMap.channel),sheenRoughnessMapUv:ea&&g(a.sheenRoughnessMap.channel),specularMapUv:es&&g(a.specularMap.channel),specularColorMapUv:eo&&g(a.specularColorMap.channel),specularIntensityMapUv:el&&g(a.specularIntensityMap.channel),transmissionMapUv:eh&&g(a.transmissionMap.channel),thicknessMapUv:ec&&g(a.thicknessMap.channel),alphaMapUv:ed&&g(a.alphaMap.channel),//
vertexTangents:!!T.attributes.tangent&&(V||j),vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!T.attributes.color&&4===T.attributes.color.itemSize,vertexUv1s:eg,vertexUv2s:e_,vertexUv3s:ev,pointsUvs:!0===y.isPoints&&!!T.attributes.uv&&(N||ed),fog:!!E,useFog:!0===a.fog,fogExp2:E&&E.isFogExp2,flatShading:!0===a.flatShading,sizeAttenuation:!0===a.sizeAttenuation,logarithmicDepthBuffer:u,skinning:!0===y.isSkinnedMesh,morphTargets:void 0!==T.morphAttributes.position,morphNormals:void 0!==T.morphAttributes.normal,morphColors:void 0!==T.morphAttributes.color,morphTargetsCount:P,morphTextureStride:I,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:a.dithering,shadowMapEnabled:e.shadowMap.enabled&&h.length>0,shadowMapType:e.shadowMap.type,toneMapping:ey,useLegacyLights:e._useLegacyLights,decodeVideoTexture:N&&!0===a.map.isVideoTexture&&H.getTransfer(a.map.colorSpace)===v,premultipliedAlpha:a.premultipliedAlpha,doubleSided:2===a.side,flipSided:1===a.side,useDepthPacking:a.depthPacking>=0,depthPacking:a.depthPacking||0,index0AttributeName:a.index0AttributeName,extensionDerivatives:ef&&!0===a.extensions.derivatives,extensionFragDepth:ef&&!0===a.extensions.fragDepth,extensionDrawBuffers:ef&&!0===a.extensions.drawBuffers,extensionShaderTextureLOD:ef&&!0===a.extensions.shaderTextureLOD,rendererExtensionFragDepth:c||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:c||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:c||n.has("EXT_shader_texture_lod"),customProgramCacheKey:a.customProgramCacheKey()};return ex},getProgramCacheKey:function(t){let i=[];if(t.shaderID?i.push(t.shaderID):(i.push(t.customVertexShaderID),i.push(t.customFragmentShaderID)),void 0!==t.defines)for(let e in t.defines)i.push(e),i.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(i.push(t.precision),i.push(t.outputColorSpace),i.push(t.envMapMode),i.push(t.envMapCubeUVHeight),i.push(t.mapUv),i.push(t.alphaMapUv),i.push(t.lightMapUv),i.push(t.aoMapUv),i.push(t.bumpMapUv),i.push(t.normalMapUv),i.push(t.displacementMapUv),i.push(t.emissiveMapUv),i.push(t.metalnessMapUv),i.push(t.roughnessMapUv),i.push(t.anisotropyMapUv),i.push(t.clearcoatMapUv),i.push(t.clearcoatNormalMapUv),i.push(t.clearcoatRoughnessMapUv),i.push(t.iridescenceMapUv),i.push(t.iridescenceThicknessMapUv),i.push(t.sheenColorMapUv),i.push(t.sheenRoughnessMapUv),i.push(t.specularMapUv),i.push(t.specularColorMapUv),i.push(t.specularIntensityMapUv),i.push(t.transmissionMapUv),i.push(t.thicknessMapUv),i.push(t.combine),i.push(t.fogExp2),i.push(t.sizeAttenuation),i.push(t.morphTargetsCount),i.push(t.morphAttributeCount),i.push(t.numDirLights),i.push(t.numPointLights),i.push(t.numSpotLights),i.push(t.numSpotLightMaps),i.push(t.numHemiLights),i.push(t.numRectAreaLights),i.push(t.numDirLightShadows),i.push(t.numPointLightShadows),i.push(t.numSpotLightShadows),i.push(t.numSpotLightShadowsWithMaps),i.push(t.numLightProbes),i.push(t.shadowMapType),i.push(t.toneMapping),i.push(t.numClippingPlanes),i.push(t.numClipIntersection),i.push(t.depthPacking),o.disableAll(),t.isWebGL2&&o.enable(0),t.supportsVertexTextures&&o.enable(1),t.instancing&&o.enable(2),t.instancingColor&&o.enable(3),t.matcap&&o.enable(4),t.envMap&&o.enable(5),t.normalMapObjectSpace&&o.enable(6),t.normalMapTangentSpace&&o.enable(7),t.clearcoat&&o.enable(8),t.iridescence&&o.enable(9),t.alphaTest&&o.enable(10),t.vertexColors&&o.enable(11),t.vertexAlphas&&o.enable(12),t.vertexUv1s&&o.enable(13),t.vertexUv2s&&o.enable(14),t.vertexUv3s&&o.enable(15),t.vertexTangents&&o.enable(16),t.anisotropy&&o.enable(17),i.push(o.mask),o.disableAll(),t.fog&&o.enable(0),t.useFog&&o.enable(1),t.flatShading&&o.enable(2),t.logarithmicDepthBuffer&&o.enable(3),t.skinning&&o.enable(4),t.morphTargets&&o.enable(5),t.morphNormals&&o.enable(6),t.morphColors&&o.enable(7),t.premultipliedAlpha&&o.enable(8),t.shadowMapEnabled&&o.enable(9),t.useLegacyLights&&o.enable(10),t.doubleSided&&o.enable(11),t.flipSided&&o.enable(12),t.useDepthPacking&&o.enable(13),t.dithering&&o.enable(14),t.transmission&&o.enable(15),t.sheen&&o.enable(16),t.opaque&&o.enable(17),t.pointsUvs&&o.enable(18),t.decodeVideoTexture&&o.enable(19),i.push(o.mask),i.push(e.outputColorSpace)),i.push(t.customProgramCacheKey),i.join()},getUniforms:function(e){let t;let i=f[e.type];if(i){let e=il[i];t=tK.clone(e.uniforms)}else t=e.uniforms;return t},acquireProgram:function(t,i){let n;// Check if code has been already compiled
for(let e=0,t=h.length;e<t;e++){let t=h[e];if(t.cacheKey===i){n=t,++n.usedTimes;break}}return void 0===n&&(n=new nX(e,i,t,a),h.push(n)),n},releaseProgram:function(e){if(0==--e.usedTimes){// Remove from unordered set
let t=h.indexOf(e);h[t]=h[h.length-1],h.pop(),// Free WebGL resources
e.destroy()}},releaseShaderCache:function(e){l.remove(e)},// Exposed for resource monitoring & error feedback via renderer.info:
programs:h,dispose:function(){l.dispose()}}}function nJ(){let e=new WeakMap;return{get:function(t){let i=e.get(t);return void 0===i&&(i={},e.set(t,i)),i},remove:function(t){e.delete(t)},update:function(t,i,n){e.get(t)[i]=n},dispose:function(){e=new WeakMap}}}function nK(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function n$(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function n0(){let e=[],t=0,i=[],n=[],r=[];function a(i,n,r,a,s,o){let l=e[t];return void 0===l?(l={id:i.id,object:i,geometry:n,material:r,groupOrder:a,renderOrder:i.renderOrder,z:s,group:o},e[t]=l):(l.id=i.id,l.object=i,l.geometry=n,l.material=r,l.groupOrder=a,l.renderOrder=i.renderOrder,l.z=s,l.group=o),t++,l}return{opaque:i,transmissive:n,transparent:r,init:function(){t=0,i.length=0,n.length=0,r.length=0},push:function(e,t,s,o,l,h){let c=a(e,t,s,o,l,h);s.transmission>0?n.push(c):!0===s.transparent?r.push(c):i.push(c)},unshift:function(e,t,s,o,l,h){let c=a(e,t,s,o,l,h);s.transmission>0?n.unshift(c):!0===s.transparent?r.unshift(c):i.unshift(c)},finish:function(){// Clear references from inactive renderItems in the list
for(let i=t,n=e.length;i<n;i++){let t=e[i];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(e,t){i.length>1&&i.sort(e||nK),n.length>1&&n.sort(t||n$),r.length>1&&r.sort(t||n$)}}}function n1(){let e=new WeakMap;return{get:function(t,i){let n;let r=e.get(t);return void 0===r?(n=new n0,e.set(t,[n])):i>=r.length?(n=new n0,r.push(n)):n=r[i],n},dispose:function(){e=new WeakMap}}}function n2(){let e={};return{get:function(t){let i;if(void 0!==e[t.id])return e[t.id];switch(t.type){case"DirectionalLight":i={direction:new ei,color:new td};break;case"SpotLight":i={position:new ei,direction:new ei,color:new td,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new ei,color:new td,distance:0,decay:0};break;case"HemisphereLight":i={direction:new ei,skyColor:new td,groundColor:new td};break;case"RectAreaLight":i={color:new td,position:new ei,halfWidth:new ei,halfHeight:new ei}}return e[t.id]=i,i}}}let n3=0;function n5(e,t){return(t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function n4(e,t){let i=new n2,n=function(){let e={};return{get:function(t){let i;if(void 0!==e[t.id])return e[t.id];switch(t.type){case"DirectionalLight":case"SpotLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new P};break;case"PointLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new P,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=i,i}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let e=0;e<9;e++)r.probe.push(new ei);let a=new ei,s=new eI,o=new eI;return{setup:function(a,s){let o=0,l=0,h=0;for(let e=0;e<9;e++)r.probe[e].set(0,0,0);let c=0,u=0,d=0,p=0,m=0,f=0,g=0,_=0,v=0,y=0,x=0;// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
a.sort(n5);// artist-friendly light intensity scaling factor
let M=!0===s?Math.PI:1;for(let e=0,t=a.length;e<t;e++){let t=a[e],s=t.color,b=t.intensity,S=t.distance,E=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)o+=s.r*b*M,l+=s.g*b*M,h+=s.b*b*M;else if(t.isLightProbe){for(let e=0;e<9;e++)r.probe[e].addScaledVector(t.sh.coefficients[e],b);x++}else if(t.isDirectionalLight){let e=i.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*M),t.castShadow){let e=t.shadow,i=n.get(t);i.shadowBias=e.bias,i.shadowNormalBias=e.normalBias,i.shadowRadius=e.radius,i.shadowMapSize=e.mapSize,r.directionalShadow[c]=i,r.directionalShadowMap[c]=E,r.directionalShadowMatrix[c]=t.shadow.matrix,f++}r.directional[c]=e,c++}else if(t.isSpotLight){let e=i.get(t);e.position.setFromMatrixPosition(t.matrixWorld),e.color.copy(s).multiplyScalar(b*M),e.distance=S,e.coneCos=Math.cos(t.angle),e.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),e.decay=t.decay,r.spot[d]=e;let a=t.shadow;if(t.map&&(r.spotLightMap[v]=t.map,v++,// make sure the lightMatrix is up to date
// TODO : do it if required only
a.updateMatrices(t),t.castShadow&&y++),r.spotLightMatrix[d]=a.matrix,t.castShadow){let e=n.get(t);e.shadowBias=a.bias,e.shadowNormalBias=a.normalBias,e.shadowRadius=a.radius,e.shadowMapSize=a.mapSize,r.spotShadow[d]=e,r.spotShadowMap[d]=E,_++}d++}else if(t.isRectAreaLight){let e=i.get(t);e.color.copy(s).multiplyScalar(b),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),r.rectArea[p]=e,p++}else if(t.isPointLight){let e=i.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*M),e.distance=t.distance,e.decay=t.decay,t.castShadow){let e=t.shadow,i=n.get(t);i.shadowBias=e.bias,i.shadowNormalBias=e.normalBias,i.shadowRadius=e.radius,i.shadowMapSize=e.mapSize,i.shadowCameraNear=e.camera.near,i.shadowCameraFar=e.camera.far,r.pointShadow[u]=i,r.pointShadowMap[u]=E,r.pointShadowMatrix[u]=t.shadow.matrix,g++}r.point[u]=e,u++}else if(t.isHemisphereLight){let e=i.get(t);e.skyColor.copy(t.color).multiplyScalar(b*M),e.groundColor.copy(t.groundColor).multiplyScalar(b*M),r.hemi[m]=e,m++}}p>0&&(t.isWebGL2?(// WebGL 2
r.rectAreaLTC1=io.LTC_FLOAT_1,r.rectAreaLTC2=io.LTC_FLOAT_2):!0===e.has("OES_texture_float_linear")?(r.rectAreaLTC1=io.LTC_FLOAT_1,r.rectAreaLTC2=io.LTC_FLOAT_2):!0===e.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=io.LTC_HALF_1,r.rectAreaLTC2=io.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=h;let b=r.hash;(b.directionalLength!==c||b.pointLength!==u||b.spotLength!==d||b.rectAreaLength!==p||b.hemiLength!==m||b.numDirectionalShadows!==f||b.numPointShadows!==g||b.numSpotShadows!==_||b.numSpotMaps!==v||b.numLightProbes!==x)&&(r.directional.length=c,r.spot.length=d,r.rectArea.length=p,r.point.length=u,r.hemi.length=m,r.directionalShadow.length=f,r.directionalShadowMap.length=f,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=_,r.spotShadowMap.length=_,r.directionalShadowMatrix.length=f,r.pointShadowMatrix.length=g,r.spotLightMatrix.length=_+v-y,r.spotLightMap.length=v,r.numSpotLightShadowsWithMaps=y,r.numLightProbes=x,b.directionalLength=c,b.pointLength=u,b.spotLength=d,b.rectAreaLength=p,b.hemiLength=m,b.numDirectionalShadows=f,b.numPointShadows=g,b.numSpotShadows=_,b.numSpotMaps=v,b.numLightProbes=x,r.version=n3++)},setupView:function(e,t){let i=0,n=0,l=0,h=0,c=0,u=t.matrixWorldInverse;for(let t=0,d=e.length;t<d;t++){let d=e[t];if(d.isDirectionalLight){let e=r.directional[i];e.direction.setFromMatrixPosition(d.matrixWorld),a.setFromMatrixPosition(d.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(u),i++}else if(d.isSpotLight){let e=r.spot[l];e.position.setFromMatrixPosition(d.matrixWorld),e.position.applyMatrix4(u),e.direction.setFromMatrixPosition(d.matrixWorld),a.setFromMatrixPosition(d.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(u),l++}else if(d.isRectAreaLight){let e=r.rectArea[h];e.position.setFromMatrixPosition(d.matrixWorld),e.position.applyMatrix4(u),// extract local rotation of light to derive width/height half vectors
o.identity(),s.copy(d.matrixWorld),s.premultiply(u),o.extractRotation(s),e.halfWidth.set(.5*d.width,0,0),e.halfHeight.set(0,.5*d.height,0),e.halfWidth.applyMatrix4(o),e.halfHeight.applyMatrix4(o),h++}else if(d.isPointLight){let e=r.point[n];e.position.setFromMatrixPosition(d.matrixWorld),e.position.applyMatrix4(u),n++}else if(d.isHemisphereLight){let e=r.hemi[c];e.direction.setFromMatrixPosition(d.matrixWorld),e.direction.transformDirection(u),c++}}},state:r}}function n6(e,t){let i=new n4(e,t),n=[],r=[];return{init:function(){n.length=0,r.length=0},state:{lightsArray:n,shadowsArray:r,lights:i},setupLights:function(e){i.setup(n,e)},setupLightsView:function(e){i.setupView(n,e)},pushLight:function(e){n.push(e)},pushShadow:function(e){r.push(e)}}}function n7(e,t){let i=new WeakMap;return{get:function(n,r=0){let a;let s=i.get(n);return void 0===s?(a=new n6(e,t),i.set(n,[a])):r>=s.length?(a=new n6(e,t),s.push(a)):a=s[r],a},dispose:function(){i=new WeakMap}}}class n8 extends to{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class n9 extends to{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}function re(e,t,i){let n=new it,r=new P,a=new P,s=new J,o=new n8({depthPacking:3201}),l=new n9,h={},c=i.maxTextureSize,u={0:1,1:0,2:2},d=new t$({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new P},radius:{value:4}},vertexShader:"void main() {\n	gl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),p=d.clone();p.defines.HORIZONTAL_PASS=1;let m=new tR;m.setAttribute("position",new t_(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));let f=new tX(m,d),g=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1;let _=this.type;function v(t,i,n,r){let a=null,s=!0===n.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(void 0!==s)a=s;else if(a=!0===n.isPointLight?l:o,e.localClippingEnabled&&!0===i.clipShadows&&Array.isArray(i.clippingPlanes)&&0!==i.clippingPlanes.length||i.displacementMap&&0!==i.displacementScale||i.alphaMap&&i.alphaTest>0||i.map&&i.alphaTest>0){// in this case we need a unique material instance reflecting the
// appropriate state
let e=a.uuid,t=i.uuid,n=h[e];void 0===n&&(n={},h[e]=n);let r=n[t];void 0===r&&(r=a.clone(),n[t]=r),a=r}if(a.visible=i.visible,a.wireframe=i.wireframe,3===r?a.side=null!==i.shadowSide?i.shadowSide:i.side:a.side=null!==i.shadowSide?i.shadowSide:u[i.side],a.alphaMap=i.alphaMap,a.alphaTest=i.alphaTest,a.map=i.map,a.clipShadows=i.clipShadows,a.clippingPlanes=i.clippingPlanes,a.clipIntersection=i.clipIntersection,a.displacementMap=i.displacementMap,a.displacementScale=i.displacementScale,a.displacementBias=i.displacementBias,a.wireframeLinewidth=i.wireframeLinewidth,a.linewidth=i.linewidth,!0===n.isPointLight&&!0===a.isMeshDistanceMaterial){let t=e.properties.get(a);t.light=n}return a}this.render=function(i,o,l){if(!1===g.enabled||!1===g.autoUpdate&&!1===g.needsUpdate||0===i.length)return;let h=e.getRenderTarget(),u=e.getActiveCubeFace(),m=e.getActiveMipmapLevel(),y=e.state;// Set GL state for depth map.
y.setBlending(0),y.buffers.color.setClear(1,1,1,1),y.buffers.depth.setTest(!0),y.setScissorTest(!1);// check for shadow map type changes
let x=3!==_&&3===this.type,M=3===_&&3!==this.type;// render depth map
for(let h=0,u=i.length;h<u;h++){let u=i[h],m=u.shadow;if(void 0===m){console.warn("THREE.WebGLShadowMap:",u,"has no shadow.");continue}if(!1===m.autoUpdate&&!1===m.needsUpdate)continue;r.copy(m.mapSize);let g=m.getFrameExtents();if(r.multiply(g),a.copy(m.mapSize),(r.x>c||r.y>c)&&(r.x>c&&(a.x=Math.floor(c/g.x),r.x=a.x*g.x,m.mapSize.x=a.x),r.y>c&&(a.y=Math.floor(c/g.y),r.y=a.y*g.y,m.mapSize.y=a.y)),null===m.map||!0===x||!0===M){let e=3!==this.type?{minFilter:1003,magFilter:1003}:{};null!==m.map&&m.map.dispose(),m.map=new $(r.x,r.y,e),m.map.texture.name=u.name+".shadowMap",m.camera.updateProjectionMatrix()}e.setRenderTarget(m.map),e.clear();let _=m.getViewportCount();for(let i=0;i<_;i++){let r=m.getViewport(i);s.set(a.x*r.x,a.y*r.y,a.x*r.z,a.y*r.w),y.viewport(s),m.updateMatrices(u,i),n=m.getFrustum(),function i(r,a,s,o,l){if(!1===r.visible)return;let h=r.layers.test(a.layers);if(h&&(r.isMesh||r.isLine||r.isPoints)&&(r.castShadow||r.receiveShadow&&3===l)&&(!r.frustumCulled||n.intersectsObject(r))){r.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,r.matrixWorld);let i=t.update(r),n=r.material;if(Array.isArray(n)){let t=i.groups;for(let a=0,h=t.length;a<h;a++){let h=t[a],c=n[h.materialIndex];if(c&&c.visible){let t=v(r,c,o,l);e.renderBufferDirect(s,null,i,t,r,h)}}}else if(n.visible){let t=v(r,n,o,l);e.renderBufferDirect(s,null,i,t,r,null)}}let c=r.children;for(let e=0,t=c.length;e<t;e++)i(c[e],a,s,o,l)}(o,l,m.camera,u,this.type)}!0!==m.isPointLightShadow&&3===this.type&&function(i,n){let a=t.update(f);d.defines.VSM_SAMPLES!==i.blurSamples&&(d.defines.VSM_SAMPLES=i.blurSamples,p.defines.VSM_SAMPLES=i.blurSamples,d.needsUpdate=!0,p.needsUpdate=!0),null===i.mapPass&&(i.mapPass=new $(r.x,r.y)),// vertical pass
d.uniforms.shadow_pass.value=i.map.texture,d.uniforms.resolution.value=i.mapSize,d.uniforms.radius.value=i.radius,e.setRenderTarget(i.mapPass),e.clear(),e.renderBufferDirect(n,null,a,d,f,null),// horizontal pass
p.uniforms.shadow_pass.value=i.mapPass.texture,p.uniforms.resolution.value=i.mapSize,p.uniforms.radius.value=i.radius,e.setRenderTarget(i.map),e.clear(),e.renderBufferDirect(n,null,a,p,f,null)}(m,l),m.needsUpdate=!1}_=this.type,g.needsUpdate=!1,e.setRenderTarget(h,u,m)}}function rt(e,t,i){let n=i.isWebGL2,r=new function(){let t=!1,i=new J,n=null,r=new J(0,0,0,0);return{setMask:function(i){n===i||t||(e.colorMask(i,i,i,i),n=i)},setLocked:function(e){t=e},setClear:function(t,n,a,s,o){!0===o&&(t*=s,n*=s,a*=s),i.set(t,n,a,s),!1===r.equals(i)&&(e.clearColor(t,n,a,s),r.copy(i))},reset:function(){t=!1,n=null,r.set(-1,0,0,0)}}},a=new function(){let t=!1,i=null,n=null,r=null;return{setTest:function(t){t?z(e.DEPTH_TEST):k(e.DEPTH_TEST)},setMask:function(n){i===n||t||(e.depthMask(n),i=n)},setFunc:function(t){if(n!==t){switch(t){case 0:e.depthFunc(e.NEVER);break;case 1:e.depthFunc(e.ALWAYS);break;case 2:e.depthFunc(e.LESS);break;case 3:default:e.depthFunc(e.LEQUAL);break;case 4:e.depthFunc(e.EQUAL);break;case 5:e.depthFunc(e.GEQUAL);break;case 6:e.depthFunc(e.GREATER);break;case 7:e.depthFunc(e.NOTEQUAL)}n=t}},setLocked:function(e){t=e},setClear:function(t){r!==t&&(e.clearDepth(t),r=t)},reset:function(){t=!1,i=null,n=null,r=null}}},s=new function(){let t=!1,i=null,n=null,r=null,a=null,s=null,o=null,l=null,h=null;return{setTest:function(i){t||(i?z(e.STENCIL_TEST):k(e.STENCIL_TEST))},setMask:function(n){i===n||t||(e.stencilMask(n),i=n)},setFunc:function(t,i,s){(n!==t||r!==i||a!==s)&&(e.stencilFunc(t,i,s),n=t,r=i,a=s)},setOp:function(t,i,n){(s!==t||o!==i||l!==n)&&(e.stencilOp(t,i,n),s=t,o=i,l=n)},setLocked:function(e){t=e},setClear:function(t){h!==t&&(e.clearStencil(t),h=t)},reset:function(){t=!1,i=null,n=null,r=null,a=null,s=null,o=null,l=null,h=null}}},o=new WeakMap,l=new WeakMap,h={},c={},u=new WeakMap,d=[],p=null,m=!1,f=null,g=null,_=null,v=null,y=null,x=null,M=null,b=!1,S=null,E=null,T=null,w=null,A=null,R=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),L=!1,C=e.getParameter(e.VERSION);-1!==C.indexOf("WebGL")?L=parseFloat(/^WebGL (\d)/.exec(C)[1])>=1:-1!==C.indexOf("OpenGL ES")&&(L=parseFloat(/^OpenGL ES (\d)/.exec(C)[1])>=2);let P=null,I={},O=e.getParameter(e.SCISSOR_BOX),U=e.getParameter(e.VIEWPORT),N=new J().fromArray(O),D=new J().fromArray(U);function F(t,i,r,a){let s=new Uint8Array(4),o=e.createTexture();// 4 is required to match default unpack alignment of 4.
e.bindTexture(t,o),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let o=0;o<r;o++)n&&(t===e.TEXTURE_3D||t===e.TEXTURE_2D_ARRAY)?e.texImage3D(i,0,e.RGBA,1,1,a,0,e.RGBA,e.UNSIGNED_BYTE,s):e.texImage2D(i+o,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,s);return o}let B={};//
function z(t){!0!==h[t]&&(e.enable(t),h[t]=!0)}function k(t){!1!==h[t]&&(e.disable(t),h[t]=!1)}B[e.TEXTURE_2D]=F(e.TEXTURE_2D,e.TEXTURE_2D,1),B[e.TEXTURE_CUBE_MAP]=F(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),n&&(B[e.TEXTURE_2D_ARRAY]=F(e.TEXTURE_2D_ARRAY,e.TEXTURE_2D_ARRAY,1,1),B[e.TEXTURE_3D]=F(e.TEXTURE_3D,e.TEXTURE_3D,1,1)),// init
r.setClear(0,0,0,1),a.setClear(1),s.setClear(0),z(e.DEPTH_TEST),a.setFunc(3),q(!1),W(1),z(e.CULL_FACE),G(0);let V={100:e.FUNC_ADD,101:e.FUNC_SUBTRACT,102:e.FUNC_REVERSE_SUBTRACT};if(n)V[103]=e.MIN,V[104]=e.MAX;else{let e=t.get("EXT_blend_minmax");null!==e&&(V[103]=e.MIN_EXT,V[104]=e.MAX_EXT)}let H={200:e.ZERO,201:e.ONE,202:e.SRC_COLOR,204:e.SRC_ALPHA,210:e.SRC_ALPHA_SATURATE,208:e.DST_COLOR,206:e.DST_ALPHA,203:e.ONE_MINUS_SRC_COLOR,205:e.ONE_MINUS_SRC_ALPHA,209:e.ONE_MINUS_DST_COLOR,207:e.ONE_MINUS_DST_ALPHA};function G(t,i,n,r,a,s,o,l){if(0===t){!0===m&&(k(e.BLEND),m=!1);return}if(!1===m&&(z(e.BLEND),m=!0),5!==t){if(t!==f||l!==b){if((100!==g||100!==y)&&(e.blendEquation(e.FUNC_ADD),g=100,y=100),l)switch(t){case 1:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.ONE,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}_=null,v=null,x=null,M=null,f=t,b=l}return}// custom blending
a=a||i,s=s||n,o=o||r,(i!==g||a!==y)&&(e.blendEquationSeparate(V[i],V[a]),g=i,y=a),(n!==_||r!==v||s!==x||o!==M)&&(e.blendFuncSeparate(H[n],H[r],H[s],H[o]),_=n,v=r,x=s,M=o),f=t,b=!1}//
function q(t){S!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),S=t)}function W(t){0!==t?(z(e.CULL_FACE),t!==E&&(1===t?e.cullFace(e.BACK):2===t?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):k(e.CULL_FACE),E=t}function X(t,i,n){t?(z(e.POLYGON_OFFSET_FILL),(w!==i||A!==n)&&(e.polygonOffset(i,n),w=i,A=n)):k(e.POLYGON_OFFSET_FILL)}return{buffers:{color:r,depth:a,stencil:s},enable:z,disable:k,bindFramebuffer:function(t,i){return c[t]!==i&&(e.bindFramebuffer(t,i),c[t]=i,n&&(t===e.DRAW_FRAMEBUFFER&&(c[e.FRAMEBUFFER]=i),t===e.FRAMEBUFFER&&(c[e.DRAW_FRAMEBUFFER]=i)),!0)},drawBuffers:function(n,r){let a=d,s=!1;if(n){if(void 0===(a=u.get(r))&&(a=[],u.set(r,a)),n.isWebGLMultipleRenderTargets){let t=n.texture;if(a.length!==t.length||a[0]!==e.COLOR_ATTACHMENT0){for(let i=0,n=t.length;i<n;i++)a[i]=e.COLOR_ATTACHMENT0+i;a.length=t.length,s=!0}}else a[0]!==e.COLOR_ATTACHMENT0&&(a[0]=e.COLOR_ATTACHMENT0,s=!0)}else a[0]!==e.BACK&&(a[0]=e.BACK,s=!0);s&&(i.isWebGL2?e.drawBuffers(a):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(a))},useProgram:function(t){return p!==t&&(e.useProgram(t),p=t,!0)},setBlending:G,setMaterial:function(t,i){2===t.side?k(e.CULL_FACE):z(e.CULL_FACE);let n=1===t.side;i&&(n=!n),q(n),1===t.blending&&!1===t.transparent?G(0):G(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),r.setMask(t.colorWrite);let o=t.stencilWrite;s.setTest(o),o&&(s.setMask(t.stencilWriteMask),s.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),s.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),X(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?z(e.SAMPLE_ALPHA_TO_COVERAGE):k(e.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:q,setCullFace:W,setLineWidth:function(t){t!==T&&(L&&e.lineWidth(t),T=t)},setPolygonOffset:X,setScissorTest:function(t){t?z(e.SCISSOR_TEST):k(e.SCISSOR_TEST)},activeTexture:// texture
function(t){void 0===t&&(t=e.TEXTURE0+R-1),P!==t&&(e.activeTexture(t),P=t)},bindTexture:function(t,i,n){void 0===n&&(n=null===P?e.TEXTURE0+R-1:P);let r=I[n];void 0===r&&(r={type:void 0,texture:void 0},I[n]=r),(r.type!==t||r.texture!==i)&&(P!==n&&(e.activeTexture(n),P=n),e.bindTexture(t,i||B[t]),r.type=t,r.texture=i)},unbindTexture:function(){let t=I[P];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexImage3D:function(){try{e.compressedTexImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},updateUBOMapping:function(t,i){let n=l.get(i);void 0===n&&(n=new WeakMap,l.set(i,n));let r=n.get(t);void 0===r&&(r=e.getUniformBlockIndex(i,t.name),n.set(t,r))},uniformBlockBinding:function(t,i){let n=l.get(i),r=n.get(t);o.get(i)!==r&&(// bind shader specific block index to global block point
e.uniformBlockBinding(i,r,t.__bindingPointIndex),o.set(i,r))},texStorage2D:function(){try{e.texStorage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texStorage3D:function(){try{e.texStorage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage2D:function(){try{e.texSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texSubImage3D:function(){try{e.texSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage2D:function(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},compressedTexSubImage3D:function(){try{e.compressedTexSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor://
function(t){!1===N.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),N.copy(t))},viewport:function(t){!1===D.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),D.copy(t))},reset://
function(){// reset state
e.disable(e.BLEND),e.disable(e.CULL_FACE),e.disable(e.DEPTH_TEST),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SCISSOR_TEST),e.disable(e.STENCIL_TEST),e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO),e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(e.LESS),e.clearDepth(1),e.stencilMask(4294967295),e.stencilFunc(e.ALWAYS,0,4294967295),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.clearStencil(0),e.cullFace(e.BACK),e.frontFace(e.CCW),e.polygonOffset(0,0),e.activeTexture(e.TEXTURE0),e.bindFramebuffer(e.FRAMEBUFFER,null),!0===n&&(e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),e.bindFramebuffer(e.READ_FRAMEBUFFER,null)),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),// reset internals
h={},P=null,I={},c={},u=new WeakMap,d=[],p=null,m=!1,f=null,g=null,_=null,v=null,y=null,x=null,M=null,b=!1,S=null,E=null,T=null,w=null,A=null,N.set(0,0,e.canvas.width,e.canvas.height),D.set(0,0,e.canvas.width,e.canvas.height),r.reset(),a.reset(),s.reset()}}}function ri(e,t,i,n,r,a,s){let o;let l=r.isWebGL2,h=r.maxTextures,c=r.maxCubemapSize,u=r.maxTextureSize,d=r.maxSamples,p=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,f="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),g=new WeakMap,y=new WeakMap,x=!1;try{x="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){// Ignore any errors
}function M(e,t){// Use OffscreenCanvas when available. Specially needed in web workers
return x?new OffscreenCanvas(e,t):N("canvas")}function b(e,t,i,n){let r=1;// only perform resize if necessary
if((e.width>n||e.height>n)&&(r=n/Math.max(e.width,e.height)),r<1||!0===t){// only perform resize for certain image types
if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){let n=t?R:Math.floor,a=n(r*e.width),s=n(r*e.height);void 0===o&&(o=M(a,s));// cube textures can't reuse the same canvas
let l=i?M(a,s):o;l.width=a,l.height=s;let h=l.getContext("2d");return h.drawImage(e,0,0,a,s),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+a+"x"+s+")."),l}"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+").")}return e}function S(e){return A(e.width)&&A(e.height)}function E(e,t){return e.generateMipmaps&&t&&1003!==e.minFilter&&1006!==e.minFilter}function T(t){e.generateMipmap(t)}function w(i,n,r,a,s=!1){if(!1===l)return n;if(null!==i){if(void 0!==e[i])return e[i];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+i+"'")}let o=n;if(n===e.RED&&(r===e.FLOAT&&(o=e.R32F),r===e.HALF_FLOAT&&(o=e.R16F),r===e.UNSIGNED_BYTE&&(o=e.R8)),n===e.RED_INTEGER&&(r===e.UNSIGNED_BYTE&&(o=e.R8UI),r===e.UNSIGNED_SHORT&&(o=e.R16UI),r===e.UNSIGNED_INT&&(o=e.R32UI),r===e.BYTE&&(o=e.R8I),r===e.SHORT&&(o=e.R16I),r===e.INT&&(o=e.R32I)),n===e.RG&&(r===e.FLOAT&&(o=e.RG32F),r===e.HALF_FLOAT&&(o=e.RG16F),r===e.UNSIGNED_BYTE&&(o=e.RG8)),n===e.RGBA){let t=s?_:H.getTransfer(a);r===e.FLOAT&&(o=e.RGBA32F),r===e.HALF_FLOAT&&(o=e.RGBA16F),r===e.UNSIGNED_BYTE&&(o=t===v?e.SRGB8_ALPHA8:e.RGBA8),r===e.UNSIGNED_SHORT_4_4_4_4&&(o=e.RGBA4),r===e.UNSIGNED_SHORT_5_5_5_1&&(o=e.RGB5_A1)}return(o===e.R16F||o===e.R32F||o===e.RG16F||o===e.RG32F||o===e.RGBA16F||o===e.RGBA32F)&&t.get("EXT_color_buffer_float"),o}function L(e,t,i){return!0===E(e,i)||e.isFramebufferTexture&&1003!==e.minFilter&&1006!==e.minFilter?Math.log2(Math.max(t.width,t.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}// Fallback filters for non-power-of-2 textures
function C(t){return 1003===t||1004===t||1005===t?e.NEAREST:e.LINEAR}//
function P(e){let t=e.target;t.removeEventListener("dispose",P),//
function(e){let t=n.get(e);if(void 0===t.__webglInit)return;// check if it's necessary to remove the WebGLTexture object
let i=e.source,r=y.get(i);if(r){let n=r[t.__cacheKey];n.usedTimes--,0===n.usedTimes&&O(e),0===Object.keys(r).length&&y.delete(i)}n.remove(e)}(t),t.isVideoTexture&&g.delete(t)}function I(t){let i=t.target;i.removeEventListener("dispose",I),function(t){let i=t.texture,r=n.get(t),a=n.get(i);if(void 0!==a.__webglTexture&&(e.deleteTexture(a.__webglTexture),s.memory.textures--),t.depthTexture&&t.depthTexture.dispose(),t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++){if(Array.isArray(r.__webglFramebuffer[t]))for(let i=0;i<r.__webglFramebuffer[t].length;i++)e.deleteFramebuffer(r.__webglFramebuffer[t][i]);else e.deleteFramebuffer(r.__webglFramebuffer[t]);r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer[t])}else{if(Array.isArray(r.__webglFramebuffer))for(let t=0;t<r.__webglFramebuffer.length;t++)e.deleteFramebuffer(r.__webglFramebuffer[t]);else e.deleteFramebuffer(r.__webglFramebuffer);if(r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&e.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer)for(let t=0;t<r.__webglColorRenderbuffer.length;t++)r.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(r.__webglColorRenderbuffer[t]);r.__webglDepthRenderbuffer&&e.deleteRenderbuffer(r.__webglDepthRenderbuffer)}if(t.isWebGLMultipleRenderTargets)for(let t=0,r=i.length;t<r;t++){let r=n.get(i[t]);r.__webglTexture&&(e.deleteTexture(r.__webglTexture),s.memory.textures--),n.remove(i[t])}n.remove(i),n.remove(t)}(i)}function O(t){let i=n.get(t);e.deleteTexture(i.__webglTexture);let r=t.source,a=y.get(r);delete a[i.__cacheKey],s.memory.textures--}//
let U=0;//
function D(t,r){let a=n.get(t);if(t.isVideoTexture&&function(e){let t=s.render.frame;// Check the last frame we updated the VideoTexture
g.get(e)!==t&&(g.set(e,t),e.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&a.__version!==t.version){let e=t.image;if(null===e)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(!1===e.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{G(a,t,r);return}}i.bindTexture(e.TEXTURE_2D,a.__webglTexture,e.TEXTURE0+r)}let F={1e3:e.REPEAT,1001:e.CLAMP_TO_EDGE,1002:e.MIRRORED_REPEAT},B={1003:e.NEAREST,1004:e.NEAREST_MIPMAP_NEAREST,1005:e.NEAREST_MIPMAP_LINEAR,1006:e.LINEAR,1007:e.LINEAR_MIPMAP_NEAREST,1008:e.LINEAR_MIPMAP_LINEAR},z={512:e.NEVER,519:e.ALWAYS,513:e.LESS,515:e.LEQUAL,514:e.EQUAL,518:e.GEQUAL,516:e.GREATER,517:e.NOTEQUAL};function k(i,a,s){if(s?(e.texParameteri(i,e.TEXTURE_WRAP_S,F[a.wrapS]),e.texParameteri(i,e.TEXTURE_WRAP_T,F[a.wrapT]),(i===e.TEXTURE_3D||i===e.TEXTURE_2D_ARRAY)&&e.texParameteri(i,e.TEXTURE_WRAP_R,F[a.wrapR]),e.texParameteri(i,e.TEXTURE_MAG_FILTER,B[a.magFilter]),e.texParameteri(i,e.TEXTURE_MIN_FILTER,B[a.minFilter])):(e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),(i===e.TEXTURE_3D||i===e.TEXTURE_2D_ARRAY)&&e.texParameteri(i,e.TEXTURE_WRAP_R,e.CLAMP_TO_EDGE),(1001!==a.wrapS||1001!==a.wrapT)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(i,e.TEXTURE_MAG_FILTER,C(a.magFilter)),e.texParameteri(i,e.TEXTURE_MIN_FILTER,C(a.minFilter)),1003!==a.minFilter&&1006!==a.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),a.compareFunction&&(e.texParameteri(i,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE),e.texParameteri(i,e.TEXTURE_COMPARE_FUNC,z[a.compareFunction])),!0===t.has("EXT_texture_filter_anisotropic")){let s=t.get("EXT_texture_filter_anisotropic");1003!==a.magFilter&&(1005===a.minFilter||1008===a.minFilter)&&(1015!==a.type||!1!==t.has("OES_texture_float_linear"))&&(!1!==l||1016!==a.type||!1!==t.has("OES_texture_half_float_linear"))&&(a.anisotropy>1||n.get(a).__currentAnisotropy)&&(e.texParameterf(i,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),n.get(a).__currentAnisotropy=a.anisotropy)}}function V(t,i){let n=!1;void 0===t.__webglInit&&(t.__webglInit=!0,i.addEventListener("dispose",P));// create Source <-> WebGLTextures mapping if necessary
let r=i.source,a=y.get(r);void 0===a&&(a={},y.set(r,a));// check if there is already a WebGLTexture object for the given texture parameters
let o=function(e){let t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.wrapR||0),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.colorSpace),t.join()}(i);if(o!==t.__cacheKey){void 0===a[o]&&(// create new entry
a[o]={texture:e.createTexture(),usedTimes:0},s.memory.textures++,// when a new instance of WebGLTexture was created, a texture upload is required
// even if the image contents are identical
n=!0),a[o].usedTimes++;// every time the texture cache key changes, it's necessary to check if an instance of
// WebGLTexture can be deleted in order to avoid a memory leak.
let r=a[t.__cacheKey];void 0!==r&&(a[t.__cacheKey].usedTimes--,0===r.usedTimes&&O(i)),// store references to cache key and WebGLTexture object
t.__cacheKey=o,t.__webglTexture=a[o].texture}return n}function G(t,r,s){let o=e.TEXTURE_2D;(r.isDataArrayTexture||r.isCompressedArrayTexture)&&(o=e.TEXTURE_2D_ARRAY),r.isData3DTexture&&(o=e.TEXTURE_3D);let h=V(t,r),c=r.source;i.bindTexture(o,t.__webglTexture,e.TEXTURE0+s);let d=n.get(c);if(c.version!==d.__version||!0===h){let t;i.activeTexture(e.TEXTURE0+s);let n=H.getPrimaries(H.workingColorSpace),p=""===r.colorSpace?null:H.getPrimaries(r.colorSpace),m=""===r.colorSpace||n===p?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,r.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,m);let f=!l&&(1001!==r.wrapS||1001!==r.wrapT||1003!==r.minFilter&&1006!==r.minFilter)&&!1===S(r.image),g=b(r.image,f,!1,u);g=Q(r,g);let _=S(g)||l,v=a.convert(r.format,r.colorSpace),y=a.convert(r.type),x=w(r.internalFormat,v,y,r.colorSpace,r.isVideoTexture);k(o,r,_);let M=r.mipmaps,A=l&&!0!==r.isVideoTexture,R=void 0===d.__version||!0===h,C=L(r,g,_);if(r.isDepthTexture)// populate depth texture with dummy data
x=e.DEPTH_COMPONENT,l?x=1015===r.type?e.DEPTH_COMPONENT32F:1014===r.type?e.DEPTH_COMPONENT24:1020===r.type?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT16:1015===r.type&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),1026===r.format&&x===e.DEPTH_COMPONENT&&1012!==r.type&&1014!==r.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=1014,y=a.convert(r.type)),1027===r.format&&x===e.DEPTH_COMPONENT&&(// Depth stencil textures need the DEPTH_STENCIL internal format
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
x=e.DEPTH_STENCIL,1020!==r.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=1020,y=a.convert(r.type))),R&&(A?i.texStorage2D(e.TEXTURE_2D,1,x,g.width,g.height):i.texImage2D(e.TEXTURE_2D,0,x,g.width,g.height,0,v,y,null));else if(r.isDataTexture){// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(M.length>0&&_){A&&R&&i.texStorage2D(e.TEXTURE_2D,C,x,M[0].width,M[0].height);for(let n=0,r=M.length;n<r;n++)t=M[n],A?i.texSubImage2D(e.TEXTURE_2D,n,0,0,t.width,t.height,v,y,t.data):i.texImage2D(e.TEXTURE_2D,n,x,t.width,t.height,0,v,y,t.data);r.generateMipmaps=!1}else A?(R&&i.texStorage2D(e.TEXTURE_2D,C,x,g.width,g.height),i.texSubImage2D(e.TEXTURE_2D,0,0,0,g.width,g.height,v,y,g.data)):i.texImage2D(e.TEXTURE_2D,0,x,g.width,g.height,0,v,y,g.data)}else if(r.isCompressedTexture){if(r.isCompressedArrayTexture){A&&R&&i.texStorage3D(e.TEXTURE_2D_ARRAY,C,x,M[0].width,M[0].height,g.depth);for(let n=0,a=M.length;n<a;n++)t=M[n],1023!==r.format?null!==v?A?i.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,n,0,0,0,t.width,t.height,g.depth,v,t.data,0,0):i.compressedTexImage3D(e.TEXTURE_2D_ARRAY,n,x,t.width,t.height,g.depth,0,t.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):A?i.texSubImage3D(e.TEXTURE_2D_ARRAY,n,0,0,0,t.width,t.height,g.depth,v,y,t.data):i.texImage3D(e.TEXTURE_2D_ARRAY,n,x,t.width,t.height,g.depth,0,v,y,t.data)}else{A&&R&&i.texStorage2D(e.TEXTURE_2D,C,x,M[0].width,M[0].height);for(let n=0,a=M.length;n<a;n++)t=M[n],1023!==r.format?null!==v?A?i.compressedTexSubImage2D(e.TEXTURE_2D,n,0,0,t.width,t.height,v,t.data):i.compressedTexImage2D(e.TEXTURE_2D,n,x,t.width,t.height,0,t.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):A?i.texSubImage2D(e.TEXTURE_2D,n,0,0,t.width,t.height,v,y,t.data):i.texImage2D(e.TEXTURE_2D,n,x,t.width,t.height,0,v,y,t.data)}}else if(r.isDataArrayTexture)A?(R&&i.texStorage3D(e.TEXTURE_2D_ARRAY,C,x,g.width,g.height,g.depth),i.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,g.width,g.height,g.depth,v,y,g.data)):i.texImage3D(e.TEXTURE_2D_ARRAY,0,x,g.width,g.height,g.depth,0,v,y,g.data);else if(r.isData3DTexture)A?(R&&i.texStorage3D(e.TEXTURE_3D,C,x,g.width,g.height,g.depth),i.texSubImage3D(e.TEXTURE_3D,0,0,0,0,g.width,g.height,g.depth,v,y,g.data)):i.texImage3D(e.TEXTURE_3D,0,x,g.width,g.height,g.depth,0,v,y,g.data);else if(r.isFramebufferTexture){if(R){if(A)i.texStorage2D(e.TEXTURE_2D,C,x,g.width,g.height);else{let t=g.width,n=g.height;for(let r=0;r<C;r++)i.texImage2D(e.TEXTURE_2D,r,x,t,n,0,v,y,null),t>>=1,n>>=1}}}else // regular Texture (image, video, canvas)
// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(M.length>0&&_){A&&R&&i.texStorage2D(e.TEXTURE_2D,C,x,M[0].width,M[0].height);for(let n=0,r=M.length;n<r;n++)t=M[n],A?i.texSubImage2D(e.TEXTURE_2D,n,0,0,v,y,t):i.texImage2D(e.TEXTURE_2D,n,x,v,y,t);r.generateMipmaps=!1}else A?(R&&i.texStorage2D(e.TEXTURE_2D,C,x,g.width,g.height),i.texSubImage2D(e.TEXTURE_2D,0,0,0,v,y,g)):i.texImage2D(e.TEXTURE_2D,0,x,v,y,g);E(r,_)&&T(o),d.__version=c.version,r.onUpdate&&r.onUpdate(r)}t.__version=r.version}// Render targets
// Setup storage for target texture and bind it to correct framebuffer
function q(t,r,s,o,l,h){let c=a.convert(s.format,s.colorSpace),u=a.convert(s.type),d=w(s.internalFormat,c,u,s.colorSpace),m=n.get(r);if(!m.__hasExternalTextures){let t=Math.max(1,r.width>>h),n=Math.max(1,r.height>>h);l===e.TEXTURE_3D||l===e.TEXTURE_2D_ARRAY?i.texImage3D(l,h,d,t,n,r.depth,0,c,u,null):i.texImage2D(l,h,d,t,n,0,c,u,null)}i.bindFramebuffer(e.FRAMEBUFFER,t),Z(r)?p.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,o,l,n.get(s).__webglTexture,0,Y(r)):(l===e.TEXTURE_2D||l>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&l<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,o,l,n.get(s).__webglTexture,h),i.bindFramebuffer(e.FRAMEBUFFER,null)}// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
function X(t,i,n){if(e.bindRenderbuffer(e.RENDERBUFFER,t),i.depthBuffer&&!i.stencilBuffer){let r=!0===l?e.DEPTH_COMPONENT24:e.DEPTH_COMPONENT16;if(n||Z(i)){let t=i.depthTexture;t&&t.isDepthTexture&&(1015===t.type?r=e.DEPTH_COMPONENT32F:1014===t.type&&(r=e.DEPTH_COMPONENT24));let n=Y(i);Z(i)?p.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,n,r,i.width,i.height):e.renderbufferStorageMultisample(e.RENDERBUFFER,n,r,i.width,i.height)}else e.renderbufferStorage(e.RENDERBUFFER,r,i.width,i.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)}else if(i.depthBuffer&&i.stencilBuffer){let r=Y(i);n&&!1===Z(i)?e.renderbufferStorageMultisample(e.RENDERBUFFER,r,e.DEPTH24_STENCIL8,i.width,i.height):Z(i)?p.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,r,e.DEPTH24_STENCIL8,i.width,i.height):e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,i.width,i.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)}else{let t=!0===i.isWebGLMultipleRenderTargets?i.texture:[i.texture];for(let r=0;r<t.length;r++){let s=t[r],o=a.convert(s.format,s.colorSpace),l=a.convert(s.type),h=w(s.internalFormat,o,l,s.colorSpace),c=Y(i);n&&!1===Z(i)?e.renderbufferStorageMultisample(e.RENDERBUFFER,c,h,i.width,i.height):Z(i)?p.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,c,h,i.width,i.height):e.renderbufferStorage(e.RENDERBUFFER,h,i.width,i.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}// Setup GL resources for a non-texture depth buffer
function j(t){let r=n.get(t),a=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw Error("target.depthTexture not supported in Cube render targets");!// Setup resources for a Depth Texture for a FBO (needs an extension)
function(t,r){let a=r&&r.isWebGLCubeRenderTarget;if(a)throw Error("Depth Texture with cube render targets is not supported");if(i.bindFramebuffer(e.FRAMEBUFFER,t),!(r.depthTexture&&r.depthTexture.isDepthTexture))throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),D(r.depthTexture,0);let s=n.get(r.depthTexture).__webglTexture,o=Y(r);if(1026===r.depthTexture.format)Z(r)?p.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0,o):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0);else if(1027===r.depthTexture.format)Z(r)?p.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0,o):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0);else throw Error("Unknown depthTexture format")}(r.__webglFramebuffer,t)}else if(a){r.__webglDepthbuffer=[];for(let n=0;n<6;n++)i.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[n]),r.__webglDepthbuffer[n]=e.createRenderbuffer(),X(r.__webglDepthbuffer[n],t,!1)}else i.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer),r.__webglDepthbuffer=e.createRenderbuffer(),X(r.__webglDepthbuffer,t,!1);i.bindFramebuffer(e.FRAMEBUFFER,null)}function Y(e){return Math.min(d,e.samples)}function Z(e){let i=n.get(e);return l&&e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==i.__useRenderToTexture}function Q(e,i){let n=e.colorSpace,r=e.format,a=e.type;return!0===e.isCompressedTexture||!0===e.isVideoTexture||1035===e.format||n!==m&&""!==n&&(H.getTransfer(n)===v?!1===l?!0===t.has("EXT_sRGB")&&1023===r?(e.format=1035,// it's not possible to generate mips in WebGL 1 with this extension
e.minFilter=1006,e.generateMipmaps=!1):i=W.sRGBToLinear(i):(1023!==r||1009!==a)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",n)),i}//
this.allocateTextureUnit=function(){let e=U;return e>=h&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+h),U+=1,e},this.resetTextureUnits=function(){U=0},this.setTexture2D=D,this.setTexture2DArray=function(t,r){let a=n.get(t);if(t.version>0&&a.__version!==t.version){G(a,t,r);return}i.bindTexture(e.TEXTURE_2D_ARRAY,a.__webglTexture,e.TEXTURE0+r)},this.setTexture3D=function(t,r){let a=n.get(t);if(t.version>0&&a.__version!==t.version){G(a,t,r);return}i.bindTexture(e.TEXTURE_3D,a.__webglTexture,e.TEXTURE0+r)},this.setTextureCube=function(t,r){let s=n.get(t);if(t.version>0&&s.__version!==t.version){(function(t,r,s){if(6!==r.image.length)return;let o=V(t,r),h=r.source;i.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+s);let u=n.get(h);if(h.version!==u.__version||!0===o){let t;i.activeTexture(e.TEXTURE0+s);let n=H.getPrimaries(H.workingColorSpace),d=""===r.colorSpace?null:H.getPrimaries(r.colorSpace),p=""===r.colorSpace||n===d?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,r.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,p);let m=r.isCompressedTexture||r.image[0].isCompressedTexture,f=r.image[0]&&r.image[0].isDataTexture,g=[];for(let e=0;e<6;e++)m||f?g[e]=f?r.image[e].image:r.image[e]:g[e]=b(r.image[e],!1,!0,c),g[e]=Q(r,g[e]);let _=g[0],v=S(_)||l,y=a.convert(r.format,r.colorSpace),x=a.convert(r.type),M=w(r.internalFormat,y,x,r.colorSpace),A=l&&!0!==r.isVideoTexture,R=void 0===u.__version||!0===o,C=L(r,_,v);if(k(e.TEXTURE_CUBE_MAP,r,v),m){A&&R&&i.texStorage2D(e.TEXTURE_CUBE_MAP,C,M,_.width,_.height);for(let n=0;n<6;n++){t=g[n].mipmaps;for(let a=0;a<t.length;a++){let s=t[a];1023!==r.format?null!==y?A?i.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,a,0,0,s.width,s.height,y,s.data):i.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,a,M,s.width,s.height,0,s.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):A?i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,a,0,0,s.width,s.height,y,x,s.data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,a,M,s.width,s.height,0,y,x,s.data)}}}else{t=r.mipmaps,A&&R&&(t.length>0&&C++,i.texStorage2D(e.TEXTURE_CUBE_MAP,C,M,g[0].width,g[0].height));for(let n=0;n<6;n++)if(f){A?i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,0,0,g[n].width,g[n].height,y,x,g[n].data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,M,g[n].width,g[n].height,0,y,x,g[n].data);for(let r=0;r<t.length;r++){let a=t[r],s=a.image[n].image;A?i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r+1,0,0,s.width,s.height,y,x,s.data):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r+1,M,s.width,s.height,0,y,x,s.data)}}else{A?i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,0,0,y,x,g[n]):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0,M,y,x,g[n]);for(let r=0;r<t.length;r++){let a=t[r];A?i.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r+1,0,0,y,x,a.image[n]):i.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r+1,M,y,x,a.image[n])}}}E(r,v)&&T(e.TEXTURE_CUBE_MAP),u.__version=h.version,r.onUpdate&&r.onUpdate(r)}t.__version=r.version})(s,t,r);return}i.bindTexture(e.TEXTURE_CUBE_MAP,s.__webglTexture,e.TEXTURE0+r)},this.rebindTextures=// rebind framebuffer with external textures
function(t,i,r){let a=n.get(t);void 0!==i&&q(a.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0),void 0!==r&&j(t)},this.setupRenderTarget=// Set up GL resources for the render target
function(t){let o=t.texture,h=n.get(t),c=n.get(o);t.addEventListener("dispose",I),!0!==t.isWebGLMultipleRenderTargets&&(void 0===c.__webglTexture&&(c.__webglTexture=e.createTexture()),c.__version=o.version,s.memory.textures++);let u=!0===t.isWebGLCubeRenderTarget,d=!0===t.isWebGLMultipleRenderTargets,p=S(t)||l;// Setup framebuffer
if(u){h.__webglFramebuffer=[];for(let t=0;t<6;t++)if(l&&o.mipmaps&&o.mipmaps.length>0){h.__webglFramebuffer[t]=[];for(let i=0;i<o.mipmaps.length;i++)h.__webglFramebuffer[t][i]=e.createFramebuffer()}else h.__webglFramebuffer[t]=e.createFramebuffer()}else{if(l&&o.mipmaps&&o.mipmaps.length>0){h.__webglFramebuffer=[];for(let t=0;t<o.mipmaps.length;t++)h.__webglFramebuffer[t]=e.createFramebuffer()}else h.__webglFramebuffer=e.createFramebuffer();if(d){if(r.drawBuffers){let i=t.texture;for(let t=0,r=i.length;t<r;t++){let r=n.get(i[t]);void 0===r.__webglTexture&&(r.__webglTexture=e.createTexture(),s.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.")}if(l&&t.samples>0&&!1===Z(t)){let n=d?o:[o];h.__webglMultisampledFramebuffer=e.createFramebuffer(),h.__webglColorRenderbuffer=[],i.bindFramebuffer(e.FRAMEBUFFER,h.__webglMultisampledFramebuffer);for(let i=0;i<n.length;i++){let r=n[i];h.__webglColorRenderbuffer[i]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,h.__webglColorRenderbuffer[i]);let s=a.convert(r.format,r.colorSpace),o=a.convert(r.type),l=w(r.internalFormat,s,o,r.colorSpace,!0===t.isXRRenderTarget),c=Y(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,c,l,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+i,e.RENDERBUFFER,h.__webglColorRenderbuffer[i])}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(h.__webglDepthRenderbuffer=e.createRenderbuffer(),X(h.__webglDepthRenderbuffer,t,!0)),i.bindFramebuffer(e.FRAMEBUFFER,null)}}// Setup color buffer
if(u){i.bindTexture(e.TEXTURE_CUBE_MAP,c.__webglTexture),k(e.TEXTURE_CUBE_MAP,o,p);for(let i=0;i<6;i++)if(l&&o.mipmaps&&o.mipmaps.length>0)for(let n=0;n<o.mipmaps.length;n++)q(h.__webglFramebuffer[i][n],t,o,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+i,n);else q(h.__webglFramebuffer[i],t,o,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+i,0);E(o,p)&&T(e.TEXTURE_CUBE_MAP),i.unbindTexture()}else if(d){let r=t.texture;for(let a=0,s=r.length;a<s;a++){let s=r[a],o=n.get(s);i.bindTexture(e.TEXTURE_2D,o.__webglTexture),k(e.TEXTURE_2D,s,p),q(h.__webglFramebuffer,t,s,e.COLOR_ATTACHMENT0+a,e.TEXTURE_2D,0),E(s,p)&&T(e.TEXTURE_2D)}i.unbindTexture()}else{let n=e.TEXTURE_2D;if((t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(l?n=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),i.bindTexture(n,c.__webglTexture),k(n,o,p),l&&o.mipmaps&&o.mipmaps.length>0)for(let i=0;i<o.mipmaps.length;i++)q(h.__webglFramebuffer[i],t,o,e.COLOR_ATTACHMENT0,n,i);else q(h.__webglFramebuffer,t,o,e.COLOR_ATTACHMENT0,n,0);E(o,p)&&T(n),i.unbindTexture()}t.depthBuffer&&j(t)},this.updateRenderTargetMipmap=function(t){let r=S(t)||l,a=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let s=0,o=a.length;s<o;s++){let o=a[s];if(E(o,r)){let r=t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,a=n.get(o).__webglTexture;i.bindTexture(r,a),T(r),i.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(l&&t.samples>0&&!1===Z(t)){let r=t.isWebGLMultipleRenderTargets?t.texture:[t.texture],a=t.width,s=t.height,o=e.COLOR_BUFFER_BIT,l=[],h=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,c=n.get(t),u=!0===t.isWebGLMultipleRenderTargets;// If MRT we need to remove FBO attachments
if(u)for(let t=0;t<r.length;t++)i.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),i.bindFramebuffer(e.FRAMEBUFFER,c.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);i.bindFramebuffer(e.READ_FRAMEBUFFER,c.__webglMultisampledFramebuffer),i.bindFramebuffer(e.DRAW_FRAMEBUFFER,c.__webglFramebuffer);for(let i=0;i<r.length;i++){l.push(e.COLOR_ATTACHMENT0+i),t.depthBuffer&&l.push(h);let d=void 0!==c.__ignoreDepthValues&&c.__ignoreDepthValues;if(!1===d&&(t.depthBuffer&&(o|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&(o|=e.STENCIL_BUFFER_BIT)),u&&e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,c.__webglColorRenderbuffer[i]),!0===d&&(e.invalidateFramebuffer(e.READ_FRAMEBUFFER,[h]),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[h])),u){let t=n.get(r[i]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,a,s,0,0,a,s,o,e.NEAREST),f&&e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l)}// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
if(i.bindFramebuffer(e.READ_FRAMEBUFFER,null),i.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),u)for(let t=0;t<r.length;t++){i.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,c.__webglColorRenderbuffer[t]);let a=n.get(r[t]).__webglTexture;i.bindFramebuffer(e.FRAMEBUFFER,c.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,a,0)}i.bindFramebuffer(e.DRAW_FRAMEBUFFER,c.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=j,this.setupFrameBufferTexture=q,this.useMultisampledRTT=Z}function rn(e,t,i){let n=i.isWebGL2;return{convert:function(i,r=""){let a;let s=H.getTransfer(r);if(1009===i)return e.UNSIGNED_BYTE;if(1017===i)return e.UNSIGNED_SHORT_4_4_4_4;if(1018===i)return e.UNSIGNED_SHORT_5_5_5_1;if(1010===i)return e.BYTE;if(1011===i)return e.SHORT;if(1012===i)return e.UNSIGNED_SHORT;if(1013===i)return e.INT;if(1014===i)return e.UNSIGNED_INT;if(1015===i)return e.FLOAT;if(1016===i)return n?e.HALF_FLOAT:null!==(a=t.get("OES_texture_half_float"))?a.HALF_FLOAT_OES:null;if(1021===i)return e.ALPHA;if(1023===i)return e.RGBA;if(1024===i)return e.LUMINANCE;if(1025===i)return e.LUMINANCE_ALPHA;if(1026===i)return e.DEPTH_COMPONENT;if(1027===i)return e.DEPTH_STENCIL;// WebGL 1 sRGB fallback
if(1035===i)return null!==(a=t.get("EXT_sRGB"))?a.SRGB_ALPHA_EXT:null;// WebGL2 formats.
if(1028===i)return e.RED;if(1029===i)return e.RED_INTEGER;if(1030===i)return e.RG;if(1031===i)return e.RG_INTEGER;if(1033===i)return e.RGBA_INTEGER;// S3TC
if(33776===i||33777===i||33778===i||33779===i){if(s===v){if(null===(a=t.get("WEBGL_compressed_texture_s3tc_srgb")))return null;if(33776===i)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(33777===i)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(33778===i)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(33779===i)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(null===(a=t.get("WEBGL_compressed_texture_s3tc")))return null;if(33776===i)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===i)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===i)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===i)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}}// PVRTC
if(35840===i||35841===i||35842===i||35843===i){if(null===(a=t.get("WEBGL_compressed_texture_pvrtc")))return null;if(35840===i)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===i)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===i)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===i)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}// ETC1
if(36196===i)return null!==(a=t.get("WEBGL_compressed_texture_etc1"))?a.COMPRESSED_RGB_ETC1_WEBGL:null;// ETC2
if(37492===i||37496===i){if(null===(a=t.get("WEBGL_compressed_texture_etc")))return null;if(37492===i)return s===v?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(37496===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}// ASTC
if(37808===i||37809===i||37810===i||37811===i||37812===i||37813===i||37814===i||37815===i||37816===i||37817===i||37818===i||37819===i||37820===i||37821===i){if(null===(a=t.get("WEBGL_compressed_texture_astc")))return null;if(37808===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===i)return s===v?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}// BPTC
if(36492===i||36494===i||36495===i){if(null===(a=t.get("EXT_texture_compression_bptc")))return null;if(36492===i)return s===v?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(36494===i)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(36495===i)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}// RGTC
if(36283===i||36284===i||36285===i||36286===i){if(null===(a=t.get("EXT_texture_compression_rgtc")))return null;if(36492===i)return a.COMPRESSED_RED_RGTC1_EXT;if(36284===i)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(36285===i)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(36286===i)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return(//
1020===i?n?e.UNSIGNED_INT_24_8:null!==(a=t.get("WEBGL_depth_texture"))?a.UNSIGNED_INT_24_8_WEBGL:null:void 0!==e[i]?e[i]:null)}}}class rr extends t1{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class ra extends e3{constructor(){super(),this.isGroup=!0,this.type="Group"}}const rs={type:"move"};class ro{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new ra,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new ra,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ei,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ei),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new ra,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ei,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ei),this._grip}dispatchEvent(e){return null!==this._targetRay&&this._targetRay.dispatchEvent(e),null!==this._grip&&this._grip.dispatchEvent(e),null!==this._hand&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){let t=this._hand;if(t)for(let i of e.hand.values())this._getHandJoint(t,i)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(e,t,i){let n=null,r=null,a=null,s=this._targetRay,o=this._grip,l=this._hand;if(e&&"visible-blurred"!==t.session.visibilityState){if(l&&e.hand){for(let n of(a=!0,e.hand.values())){// Update the joints groups with the XRJoint poses
let e=t.getJointPose(n,i),r=this._getHandJoint(l,n);null!==e&&(r.matrix.fromArray(e.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.matrixWorldNeedsUpdate=!0,r.jointRadius=e.radius),r.visible=null!==e}// Custom events
// Check pinchz
let n=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],s=n.position.distanceTo(r.position);l.inputState.pinching&&s>.025?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&s<=.015&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else null!==o&&e.gripSpace&&null!==(r=t.getPose(e.gripSpace,i))&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1);null!==s&&(null===(n=t.getPose(e.targetRaySpace,i))&&null!==r&&(n=r),null!==n&&(s.matrix.fromArray(n.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.matrixWorldNeedsUpdate=!0,n.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(n.linearVelocity)):s.hasLinearVelocity=!1,n.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(n.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(rs)))}return null!==s&&(s.visible=null!==n),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==a),this}// private method
_getHandJoint(e,t){if(void 0===e.joints[t.jointName]){let i=new ra;i.matrixAutoUpdate=!1,i.visible=!1,e.joints[t.jointName]=i,e.add(i)}return e.joints[t.jointName]}}class rl extends Q{constructor(e,t,i,n,r,a,s,o,l,h){if(1026!==(h=void 0!==h?h:1026)&&1027!==h)throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===i&&1026===h&&(i=1014),void 0===i&&1027===h&&(i=1020),super(null,n,r,a,s,o,h,i,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=void 0!==s?s:1003,this.minFilter=void 0!==o?o:1003,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){let t=super.toJSON(e);return null!==this.compareFunction&&(t.compareFunction=this.compareFunction),t}}class rh extends M{constructor(e,t){super();let i=this,n=null,r=1,a=null,s="local-floor",o=1,l=null,h=null,c=null,u=null,d=null,p=null,m=t.getContextAttributes(),f=null,g=null,_=[],v=[],y=new t1;y.layers.enable(1),y.viewport=new J;let x=new t1;x.layers.enable(2),x.viewport=new J;let M=[y,x],b=new rr;b.layers.enable(1),b.layers.enable(2);let S=null,T=null;//
function w(e){let t=v.indexOf(e.inputSource);if(-1===t)return;let i=_[t];void 0!==i&&(i.update(e.inputSource,e.frame,l||a),i.dispatchEvent({type:e.type,data:e.inputSource}))}function A(){n.removeEventListener("select",w),n.removeEventListener("selectstart",w),n.removeEventListener("selectend",w),n.removeEventListener("squeeze",w),n.removeEventListener("squeezestart",w),n.removeEventListener("squeezeend",w),n.removeEventListener("end",A),n.removeEventListener("inputsourceschange",R);for(let e=0;e<_.length;e++){let t=v[e];null!==t&&(v[e]=null,_[e].disconnect(t))}S=null,T=null,// restore framebuffer/rendering state
e.setRenderTarget(f),d=null,u=null,c=null,n=null,g=null,//
O.stop(),i.isPresenting=!1,i.dispatchEvent({type:"sessionend"})}function R(e){// Notify disconnected
for(let t=0;t<e.removed.length;t++){let i=e.removed[t],n=v.indexOf(i);n>=0&&(v[n]=null,_[n].disconnect(i))}// Notify connected
for(let t=0;t<e.added.length;t++){let i=e.added[t],n=v.indexOf(i);if(-1===n){// Assign input source a controller that currently has no input source
for(let e=0;e<_.length;e++){if(e>=v.length){v.push(i),n=e;break}if(null===v[e]){v[e]=i,n=e;break}}// If all controllers do currently receive input we ignore new ones
if(-1===n)break}let r=_[n];r&&r.connect(i)}}//
this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=_[e];return void 0===t&&(t=new ro,_[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=_[e];return void 0===t&&(t=new ro,_[e]=t),t.getGripSpace()},this.getHand=function(e){let t=_[e];return void 0===t&&(t=new ro,_[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){r=e,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){s=e,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||a},this.setReferenceSpace=function(e){l=e},this.getBaseLayer=function(){return null!==u?u:d},this.getBinding=function(){return c},this.getFrame=function(){return p},this.getSession=function(){return n},this.setSession=async function(h){if(null!==(n=h)){if(f=e.getRenderTarget(),n.addEventListener("select",w),n.addEventListener("selectstart",w),n.addEventListener("selectend",w),n.addEventListener("squeeze",w),n.addEventListener("squeezestart",w),n.addEventListener("squeezeend",w),n.addEventListener("end",A),n.addEventListener("inputsourceschange",R),!0!==m.xrCompatible&&await t.makeXRCompatible(),void 0===n.renderState.layers||!1===e.capabilities.isWebGL2){let i={antialias:void 0!==n.renderState.layers||m.antialias,alpha:!0,depth:m.depth,stencil:m.stencil,framebufferScaleFactor:r};d=new XRWebGLLayer(n,t,i),n.updateRenderState({baseLayer:d}),g=new $(d.framebufferWidth,d.framebufferHeight,{format:1023,type:1009,colorSpace:e.outputColorSpace,stencilBuffer:m.stencil})}else{let i=null,a=null,s=null;m.depth&&(s=m.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,i=m.stencil?1027:1026,a=m.stencil?1020:1014);let o={colorFormat:t.RGBA8,depthFormat:s,scaleFactor:r};u=(c=new XRWebGLBinding(n,t)).createProjectionLayer(o),n.updateRenderState({layers:[u]}),g=new $(u.textureWidth,u.textureHeight,{format:1023,type:1009,depthTexture:new rl(u.textureWidth,u.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,i),stencilBuffer:m.stencil,colorSpace:e.outputColorSpace,samples:m.antialias?4:0});let l=e.properties.get(g);l.__ignoreDepthValues=u.ignoreDepthValues}g.isXRRenderTarget=!0,this.setFoveation(o),l=null,a=await n.requestReferenceSpace(s),O.setContext(n),O.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==n)return n.environmentBlendMode};//
let L=new ei,C=new ei;function P(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(null===n)return;b.near=x.near=y.near=e.near,b.far=x.far=y.far=e.far,(S!==b.near||T!==b.far)&&(// Note that the new renderState won't apply until the next frame. See #18320
n.updateRenderState({depthNear:b.near,depthFar:b.far}),S=b.near,T=b.far);let t=e.parent,i=b.cameras;P(b,t);for(let e=0;e<i.length;e++)P(i[e],t);2===i.length?/**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */function(e,t,i){L.setFromMatrixPosition(t.matrixWorld),C.setFromMatrixPosition(i.matrixWorld);let n=L.distanceTo(C),r=t.projectionMatrix.elements,a=i.projectionMatrix.elements,s=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],h=(r[9]-1)/r[5],c=(r[8]-1)/r[0],u=(a[8]+1)/a[0],d=n/(-c+u),p=-(d*c);// TODO: Better way to apply this offset?
t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(p),e.translateZ(d),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert();// Find the union of the frustum values of the cameras and scale
// the values so that the near plane's position does not change in world space,
// although must now be relative to the new union camera.
let m=s+d,f=o+d,g=s*c-p,_=s*u+(n-p),v=l*o/f*m,y=h*o/f*m;e.projectionMatrix.makePerspective(g,_,v,y,m,f),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}(b,y,x):b.projectionMatrix.copy(y.projectionMatrix),null===t?e.matrix.copy(b.matrixWorld):(e.matrix.copy(t.matrixWorld),e.matrix.invert(),e.matrix.multiply(b.matrixWorld)),e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(b.projectionMatrix),e.projectionMatrixInverse.copy(b.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*E*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)},this.getCamera=function(){return b},this.getFoveation=function(){if(null!==u||null!==d)return o},this.setFoveation=function(e){// 0 = no foveation = full resolution
// 1 = maximum foveation = the edges render at lower resolution
o=e,null!==u&&(u.fixedFoveation=e),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=e)};// Animation Loop
let I=null,O=new ii;O.setAnimationLoop(function(t,n){if(h=n.getViewerPose(l||a),p=n,null!==h){let t=h.views;null!==d&&(e.setRenderTargetFramebuffer(g,d.framebuffer),e.setRenderTarget(g));let i=!1;// check if it's necessary to rebuild cameraXR's camera list
t.length!==b.cameras.length&&(b.cameras.length=0,i=!0);for(let n=0;n<t.length;n++){let r=t[n],a=null;if(null!==d)a=d.getViewport(r);else{let t=c.getViewSubImage(u,r);a=t.viewport,0===n&&(e.setRenderTargetTextures(g,t.colorTexture,u.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(g))}let s=M[n];void 0===s&&((s=new t1).layers.enable(n),s.viewport=new J,M[n]=s),s.matrix.fromArray(r.transform.matrix),s.matrix.decompose(s.position,s.quaternion,s.scale),s.projectionMatrix.fromArray(r.projectionMatrix),s.projectionMatrixInverse.copy(s.projectionMatrix).invert(),s.viewport.set(a.x,a.y,a.width,a.height),0===n&&(b.matrix.copy(s.matrix),b.matrix.decompose(b.position,b.quaternion,b.scale)),!0===i&&b.cameras.push(s)}}//
for(let e=0;e<_.length;e++){let t=v[e],i=_[e];null!==t&&void 0!==i&&i.update(t,n,l||a)}I&&I(t,n),n.detectedPlanes&&i.dispatchEvent({type:"planesdetected",data:n}),p=null}),this.setAnimationLoop=function(e){I=e},this.dispose=function(){}}}function rc(e,t){function i(e,t){!0===e.matrixAutoUpdate&&e.updateMatrix(),t.value.copy(e.matrix)}function n(n,r){n.opacity.value=r.opacity,r.color&&n.diffuse.value.copy(r.color),r.emissive&&n.emissive.value.copy(r.emissive).multiplyScalar(r.emissiveIntensity),r.map&&(n.map.value=r.map,i(r.map,n.mapTransform)),r.alphaMap&&(n.alphaMap.value=r.alphaMap,i(r.alphaMap,n.alphaMapTransform)),r.bumpMap&&(n.bumpMap.value=r.bumpMap,i(r.bumpMap,n.bumpMapTransform),n.bumpScale.value=r.bumpScale,1===r.side&&(n.bumpScale.value*=-1)),r.normalMap&&(n.normalMap.value=r.normalMap,i(r.normalMap,n.normalMapTransform),n.normalScale.value.copy(r.normalScale),1===r.side&&n.normalScale.value.negate()),r.displacementMap&&(n.displacementMap.value=r.displacementMap,i(r.displacementMap,n.displacementMapTransform),n.displacementScale.value=r.displacementScale,n.displacementBias.value=r.displacementBias),r.emissiveMap&&(n.emissiveMap.value=r.emissiveMap,i(r.emissiveMap,n.emissiveMapTransform)),r.specularMap&&(n.specularMap.value=r.specularMap,i(r.specularMap,n.specularMapTransform)),r.alphaTest>0&&(n.alphaTest.value=r.alphaTest);let a=t.get(r).envMap;if(a&&(n.envMap.value=a,n.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,n.reflectivity.value=r.reflectivity,n.ior.value=r.ior,n.refractionRatio.value=r.refractionRatio),r.lightMap){n.lightMap.value=r.lightMap;// artist-friendly light intensity scaling factor
let t=!0===e._useLegacyLights?Math.PI:1;n.lightMapIntensity.value=r.lightMapIntensity*t,i(r.lightMap,n.lightMapTransform)}r.aoMap&&(n.aoMap.value=r.aoMap,n.aoMapIntensity.value=r.aoMapIntensity,i(r.aoMap,n.aoMapTransform))}return{refreshFogUniforms:function(t,i){i.color.getRGB(t.fogColor.value,tJ(e)),i.isFog?(t.fogNear.value=i.near,t.fogFar.value=i.far):i.isFogExp2&&(t.fogDensity.value=i.density)},refreshMaterialUniforms:function(e,r,a,s,o){r.isMeshBasicMaterial?n(e,r):r.isMeshLambertMaterial?n(e,r):r.isMeshToonMaterial?(n(e,r),r.gradientMap&&(e.gradientMap.value=r.gradientMap)):r.isMeshPhongMaterial?(n(e,r),e.specular.value.copy(r.specular),e.shininess.value=Math.max(r.shininess,1e-4)):r.isMeshStandardMaterial?(n(e,r),function(e,n){e.metalness.value=n.metalness,n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap,i(n.metalnessMap,e.metalnessMapTransform)),e.roughness.value=n.roughness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap,i(n.roughnessMap,e.roughnessMapTransform));let r=t.get(n).envMap;r&&(e.envMapIntensity.value=n.envMapIntensity)}(e,r),r.isMeshPhysicalMaterial&&(e.ior.value=r.ior,r.sheen>0&&(e.sheenColor.value.copy(r.sheenColor).multiplyScalar(r.sheen),e.sheenRoughness.value=r.sheenRoughness,r.sheenColorMap&&(e.sheenColorMap.value=r.sheenColorMap,i(r.sheenColorMap,e.sheenColorMapTransform)),r.sheenRoughnessMap&&(e.sheenRoughnessMap.value=r.sheenRoughnessMap,i(r.sheenRoughnessMap,e.sheenRoughnessMapTransform))),r.clearcoat>0&&(e.clearcoat.value=r.clearcoat,e.clearcoatRoughness.value=r.clearcoatRoughness,r.clearcoatMap&&(e.clearcoatMap.value=r.clearcoatMap,i(r.clearcoatMap,e.clearcoatMapTransform)),r.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=r.clearcoatRoughnessMap,i(r.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)),r.clearcoatNormalMap&&(e.clearcoatNormalMap.value=r.clearcoatNormalMap,i(r.clearcoatNormalMap,e.clearcoatNormalMapTransform),e.clearcoatNormalScale.value.copy(r.clearcoatNormalScale),1===r.side&&e.clearcoatNormalScale.value.negate())),r.iridescence>0&&(e.iridescence.value=r.iridescence,e.iridescenceIOR.value=r.iridescenceIOR,e.iridescenceThicknessMinimum.value=r.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=r.iridescenceThicknessRange[1],r.iridescenceMap&&(e.iridescenceMap.value=r.iridescenceMap,i(r.iridescenceMap,e.iridescenceMapTransform)),r.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=r.iridescenceThicknessMap,i(r.iridescenceThicknessMap,e.iridescenceThicknessMapTransform))),r.transmission>0&&(e.transmission.value=r.transmission,e.transmissionSamplerMap.value=o.texture,e.transmissionSamplerSize.value.set(o.width,o.height),r.transmissionMap&&(e.transmissionMap.value=r.transmissionMap,i(r.transmissionMap,e.transmissionMapTransform)),e.thickness.value=r.thickness,r.thicknessMap&&(e.thicknessMap.value=r.thicknessMap,i(r.thicknessMap,e.thicknessMapTransform)),e.attenuationDistance.value=r.attenuationDistance,e.attenuationColor.value.copy(r.attenuationColor)),r.anisotropy>0&&(e.anisotropyVector.value.set(r.anisotropy*Math.cos(r.anisotropyRotation),r.anisotropy*Math.sin(r.anisotropyRotation)),r.anisotropyMap&&(e.anisotropyMap.value=r.anisotropyMap,i(r.anisotropyMap,e.anisotropyMapTransform))),e.specularIntensity.value=r.specularIntensity,e.specularColor.value.copy(r.specularColor),r.specularColorMap&&(e.specularColorMap.value=r.specularColorMap,i(r.specularColorMap,e.specularColorMapTransform)),r.specularIntensityMap&&(e.specularIntensityMap.value=r.specularIntensityMap,i(r.specularIntensityMap,e.specularIntensityMapTransform)))):r.isMeshMatcapMaterial?(n(e,r),r.matcap&&(e.matcap.value=r.matcap)):r.isMeshDepthMaterial?n(e,r):r.isMeshDistanceMaterial?(n(e,r),function(e,i){let n=t.get(i).light;e.referencePosition.value.setFromMatrixPosition(n.matrixWorld),e.nearDistance.value=n.shadow.camera.near,e.farDistance.value=n.shadow.camera.far}(e,r)):r.isMeshNormalMaterial?n(e,r):r.isLineBasicMaterial?(e.diffuse.value.copy(r.color),e.opacity.value=r.opacity,r.map&&(e.map.value=r.map,i(r.map,e.mapTransform)),r.isLineDashedMaterial&&(e.dashSize.value=r.dashSize,e.totalSize.value=r.dashSize+r.gapSize,e.scale.value=r.scale)):r.isPointsMaterial?(e.diffuse.value.copy(r.color),e.opacity.value=r.opacity,e.size.value=r.size*a,e.scale.value=.5*s,r.map&&(e.map.value=r.map,i(r.map,e.uvTransform)),r.alphaMap&&(e.alphaMap.value=r.alphaMap,i(r.alphaMap,e.alphaMapTransform)),r.alphaTest>0&&(e.alphaTest.value=r.alphaTest)):r.isSpriteMaterial?(e.diffuse.value.copy(r.color),e.opacity.value=r.opacity,e.rotation.value=r.rotation,r.map&&(e.map.value=r.map,i(r.map,e.mapTransform)),r.alphaMap&&(e.alphaMap.value=r.alphaMap,i(r.alphaMap,e.alphaMapTransform)),r.alphaTest>0&&(e.alphaTest.value=r.alphaTest)):r.isShadowMaterial?(e.color.value.copy(r.color),e.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1);// #15581
}}}function ru(e,t,i,n){let r={},a={},s=[],o=i.isWebGL2?e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(e){let t={boundary:0,storage:0// bytes
};return"number"==typeof e?(// float/int
t.boundary=4,t.storage=4):e.isVector2?(// vec2
t.boundary=8,t.storage=8):e.isVector3||e.isColor?(// vec3
t.boundary=16,t.storage=12):e.isVector4?(// vec4
t.boundary=16,t.storage=16):e.isMatrix3?(// mat3 (in STD140 a 3x3 matrix is represented as 3x4)
t.boundary=48,t.storage=48):e.isMatrix4?(// mat4
t.boundary=64,t.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),t}function h(t){let i=t.target;i.removeEventListener("dispose",h);let n=s.indexOf(i.__bindingPointIndex);s.splice(n,1),e.deleteBuffer(r[i.id]),delete r[i.id],delete a[i.id]}return{bind:function(e,t){let i=t.program;n.uniformBlockBinding(e,i)},update:function(i,c){let u=r[i.id];void 0===u&&(function(e){// determine total buffer size according to the STD140 layout
// Hint: STD140 is the only supported layout in WebGL 2
let t=e.uniforms,i=0,n=0;for(let e=0,r=t.length;e<r;e++){let r=t[e],a={boundary:0,storage:0// bytes
},s=Array.isArray(r.value)?r.value:[r.value];for(let e=0,t=s.length;e<t;e++){let t=s[e],i=l(t);a.boundary+=i.boundary,a.storage+=i.storage}//
if(// the following two properties will be used for partial buffer updates
r.__data=new Float32Array(a.storage/Float32Array.BYTES_PER_ELEMENT),r.__offset=i,e>0){n=i%16;let e=16-n;// check for chunk overflow
0!==n&&e-a.boundary<0&&(// add padding and adjust offset
i+=16-n,r.__offset=i)}i+=a.storage}// ensure correct final padding
(n=i%16)>0&&(i+=16-n),//
e.__size=i,e.__cache={}}(i),u=function(t){// the setup of an UBO is independent of a particular shader program but global
let i=function(){for(let e=0;e<o;e++)if(-1===s.indexOf(e))return s.push(e),e;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();t.__bindingPointIndex=i;let n=e.createBuffer(),r=t.__size,a=t.usage;return e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,r,a),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferBase(e.UNIFORM_BUFFER,i,n),n}(i),r[i.id]=u,i.addEventListener("dispose",h));// ensure to update the binding points/block indices mapping for this program
let d=c.program;n.updateUBOMapping(i,d);// update UBO once per frame
let p=t.render.frame;a[i.id]!==p&&(function(t){let i=r[t.id],n=t.uniforms,a=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,i);for(let t=0,i=n.length;t<i;t++){let i=n[t];// partly update the buffer if necessary
if(!0===function(e,t,i){let n=e.value;if(void 0===i[t]){// cache entry does not exist so far
if("number"==typeof n)i[t]=n;else{let e=Array.isArray(n)?n:[n],r=[];for(let t=0;t<e.length;t++)r.push(e[t].clone());i[t]=r}return!0}// compare current value with cached entry
if("number"==typeof n){if(i[t]!==n)return i[t]=n,!0}else{let e=Array.isArray(i[t])?i[t]:[i[t]],r=Array.isArray(n)?n:[n];for(let t=0;t<e.length;t++){let i=e[t];if(!1===i.equals(r[t]))return i.copy(r[t]),!0}}return!1}(i,t,a)){let t=i.__offset,n=Array.isArray(i.value)?i.value:[i.value],r=0;for(let a=0;a<n.length;a++){let s=n[a],o=l(s);"number"==typeof s?(i.__data[0]=s,e.bufferSubData(e.UNIFORM_BUFFER,t+r,i.__data)):s.isMatrix3?(// manually converting 3x3 to 3x4
i.__data[0]=s.elements[0],i.__data[1]=s.elements[1],i.__data[2]=s.elements[2],i.__data[3]=s.elements[0],i.__data[4]=s.elements[3],i.__data[5]=s.elements[4],i.__data[6]=s.elements[5],i.__data[7]=s.elements[0],i.__data[8]=s.elements[6],i.__data[9]=s.elements[7],i.__data[10]=s.elements[8],i.__data[11]=s.elements[0]):(s.toArray(i.__data,r),r+=o.storage/Float32Array.BYTES_PER_ELEMENT)}e.bufferSubData(e.UNIFORM_BUFFER,t,i.__data)}}e.bindBuffer(e.UNIFORM_BUFFER,null)}(i),a[i.id]=p)},dispose:function(){for(let t in r)e.deleteBuffer(r[t]);s=[],r={},a={}}}}class rd{constructor(e={}){let t,i,n,r,a,s,o,l,h,c,u,d,f,g,_,v,y,x,M,b,S,E,T,w,A;let{canvas:L=function(){let e=N("canvas");return e.style.display="block",e}(),context:C=null,depth:I=!0,stencil:O=!0,alpha:U=!1,antialias:D=!1,premultipliedAlpha:F=!0,preserveDrawingBuffer:B=!1,powerPreference:z="default",failIfMajorPerformanceCaveat:k=!1}=e;this.isWebGLRenderer=!0,t=null!==C?C.getContextAttributes().alpha:U;let V=new Uint32Array(4),H=new Int32Array(4),G=null,q=null,W=[],X=[];// public properties
this.domElement=L,// Debug configuration container
this.debug={/**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */checkShaderErrors:!0,/**
			 * Callback for custom error reporting.
			 * @type {?Function}
			 */onShaderError:null},// clearing
this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,// scene graph
this.sortObjects=!0,// user-defined clipping
this.clippingPlanes=[],this.localClippingEnabled=!1,// physically based shading
this._outputColorSpace=p,// physical lights
this._useLegacyLights=!1,// tone mapping
this.toneMapping=0,this.toneMappingExposure=1;// internal properties
let j=this,Y=!1,Z=0,Q=0,K=null,ee=-1,et=null,en=new J,er=new J,ea=null,es=new td(0),eo=0,el=L.width,eh=L.height,ec=1,eu=null,ed=null,ep=new J(0,0,el,eh),em=new J(0,0,el,eh),ef=!1,eg=new it,e_=!1,ev=!1,ey=null,ex=new eI,eM=new P,eb=new ei,eS={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function eE(){return null===K?ec:1}// initialize
let eT=C;function ew(e,t){for(let i=0;i<e.length;i++){let n=e[i],r=L.getContext(n,t);if(null!==r)return r}return null}try{if("setAttribute"in L&&L.setAttribute("data-engine","three.js r157"),// event listeners must be registered before WebGL context is created, see #12753
L.addEventListener("webglcontextlost",eL,!1),L.addEventListener("webglcontextrestored",eC,!1),L.addEventListener("webglcontextcreationerror",eP,!1),null===eT){let e=["webgl2","webgl","experimental-webgl"];if(!0===j.isWebGL1Renderer&&e.shift(),eT=ew(e,{alpha:!0,depth:I,stencil:O,antialias:D,premultipliedAlpha:F,preserveDrawingBuffer:B,powerPreference:z,failIfMajorPerformanceCaveat:k}),null===eT){if(ew(e))throw Error("Error creating WebGL context with your selected attributes.");throw Error("Error creating WebGL context.")}}"undefined"!=typeof WebGLRenderingContext&&eT instanceof WebGLRenderingContext&&console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."),void 0===eT.getShaderPrecisionFormat&&(eT.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function eA(){i=new iP(eT),n=new ip(eT,i,e),i.init(n),T=new rn(eT,i,n),r=new rt(eT,i,n),a=new iU(eT),s=new nJ,o=new ri(eT,i,r,s,n,T,a),l=new ig(j),h=new iC(j),c=new ir(eT,n),w=new iu(eT,i,c,n),u=new iI(eT,c,a,w),d=new iB(eT,u,c,a),b=new iF(eT,n,o),y=new im(s),f=new nQ(j,l,h,i,n,w,y),g=new rc(j,s),_=new n1,v=new n7(i,n),M=new ic(j,l,h,r,d,t,F),x=new re(j,d,n),A=new ru(eT,a,n,r),S=new id(eT,i,a,n),E=new iO(eT,i,a,n),a.programs=f.programs,j.capabilities=n,j.extensions=i,j.properties=s,j.renderLists=_,j.shadowMap=x,j.state=r,j.info=a}eA();// xr
let eR=new rh(j,eT);// Events
function eL(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),Y=!0}function eC(){console.log("THREE.WebGLRenderer: Context Restored."),Y=!1;let e=a.autoReset,t=x.enabled,i=x.autoUpdate,n=x.needsUpdate,r=x.type;eA(),a.autoReset=e,x.enabled=t,x.autoUpdate=i,x.needsUpdate=n,x.type=r}function eP(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function eO(e){let t=e.target;t.removeEventListener("dispose",eO),function(e){let t=s.get(e).programs;void 0!==t&&(t.forEach(function(e){f.releaseProgram(e)}),e.isShaderMaterial&&f.releaseShaderCache(e))}(t),s.remove(t)}this.xr=eR,// API
this.getContext=function(){return eT},this.getContextAttributes=function(){return eT.getContextAttributes()},this.forceContextLoss=function(){let e=i.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){let e=i.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return ec},this.setPixelRatio=function(e){void 0!==e&&(ec=e,this.setSize(el,eh,!1))},this.getSize=function(e){return e.set(el,eh)},this.setSize=function(e,t,i=!0){if(eR.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}el=e,eh=t,L.width=Math.floor(e*ec),L.height=Math.floor(t*ec),!0===i&&(L.style.width=e+"px",L.style.height=t+"px"),this.setViewport(0,0,e,t)},this.getDrawingBufferSize=function(e){return e.set(el*ec,eh*ec).floor()},this.setDrawingBufferSize=function(e,t,i){el=e,eh=t,ec=i,L.width=Math.floor(e*i),L.height=Math.floor(t*i),this.setViewport(0,0,e,t)},this.getCurrentViewport=function(e){return e.copy(en)},this.getViewport=function(e){return e.copy(ep)},this.setViewport=function(e,t,i,n){e.isVector4?ep.set(e.x,e.y,e.z,e.w):ep.set(e,t,i,n),r.viewport(en.copy(ep).multiplyScalar(ec).floor())},this.getScissor=function(e){return e.copy(em)},this.setScissor=function(e,t,i,n){e.isVector4?em.set(e.x,e.y,e.z,e.w):em.set(e,t,i,n),r.scissor(er.copy(em).multiplyScalar(ec).floor())},this.getScissorTest=function(){return ef},this.setScissorTest=function(e){r.setScissorTest(ef=e)},this.setOpaqueSort=function(e){eu=e},this.setTransparentSort=function(e){ed=e},// Clearing
this.getClearColor=function(e){return e.copy(M.getClearColor())},this.setClearColor=function(){M.setClearColor.apply(M,arguments)},this.getClearAlpha=function(){return M.getClearAlpha()},this.setClearAlpha=function(){M.setClearAlpha.apply(M,arguments)},this.clear=function(e=!0,t=!0,i=!0){let n=0;if(e){// check if we're trying to clear an integer target
let e=!1;if(null!==K){let t=K.texture.format;e=1033===t||1031===t||1029===t}// use the appropriate clear functions to clear the target if it's a signed
// or unsigned integer target
if(e){let e=K.texture.type,t=M.getClearColor(),i=M.getClearAlpha(),n=t.r,r=t.g,a=t.b;1009===e||1014===e||1012===e||1020===e||1017===e||1018===e?(V[0]=n,V[1]=r,V[2]=a,V[3]=i,eT.clearBufferuiv(eT.COLOR,0,V)):(H[0]=n,H[1]=r,H[2]=a,H[3]=i,eT.clearBufferiv(eT.COLOR,0,H))}else n|=eT.COLOR_BUFFER_BIT}t&&(n|=eT.DEPTH_BUFFER_BIT),i&&(n|=eT.STENCIL_BUFFER_BIT),eT.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},//
this.dispose=function(){L.removeEventListener("webglcontextlost",eL,!1),L.removeEventListener("webglcontextrestored",eC,!1),L.removeEventListener("webglcontextcreationerror",eP,!1),_.dispose(),v.dispose(),s.dispose(),l.dispose(),h.dispose(),d.dispose(),w.dispose(),A.dispose(),f.dispose(),eR.dispose(),eR.removeEventListener("sessionstart",eN),eR.removeEventListener("sessionend",eD),ey&&(ey.dispose(),ey=null),eF.stop()},// Buffer rendering
this.renderBufferDirect=function(e,t,i,a,d,p){let f;null===t&&(t=eS);let _=d.isMesh&&0>d.matrixWorld.determinant(),v=function(e,t,i,a,c){var u;!0!==t.isScene&&(t=eS),o.resetTextureUnits();let d=t.fog,p=a.isMeshStandardMaterial?t.environment:null,f=null===K?j.outputColorSpace:!0===K.isXRRenderTarget?K.texture.colorSpace:m,_=(a.isMeshStandardMaterial?h:l).get(a.envMap||p),v=!0===a.vertexColors&&!!i.attributes.color&&4===i.attributes.color.itemSize,x=!!i.attributes.tangent&&(!!a.normalMap||a.anisotropy>0),M=!!i.morphAttributes.position,S=!!i.morphAttributes.normal,E=!!i.morphAttributes.color,T=0;a.toneMapped&&(null===K||!0===K.isXRRenderTarget)&&(T=j.toneMapping);let w=i.morphAttributes.position||i.morphAttributes.normal||i.morphAttributes.color,R=void 0!==w?w.length:0,L=s.get(a),C=q.state.lights;if(!0===e_&&(!0===ev||e!==et)){let t=e===et&&a.id===ee;// we might want to call this function with some ClippingGroup
// object instead of the material, once it becomes feasible
// (#8465, #8379)
y.setState(a,e,t)}//
let P=!1;a.version===L.__version?L.needsLights&&L.lightsStateVersion!==C.state.version?P=!0:L.outputColorSpace!==f?P=!0:c.isInstancedMesh&&!1===L.instancing?P=!0:c.isInstancedMesh||!0!==L.instancing?c.isSkinnedMesh&&!1===L.skinning?P=!0:c.isSkinnedMesh||!0!==L.skinning?c.isInstancedMesh&&!0===L.instancingColor&&null===c.instanceColor?P=!0:c.isInstancedMesh&&!1===L.instancingColor&&null!==c.instanceColor?P=!0:L.envMap!==_?P=!0:!0===a.fog&&L.fog!==d?P=!0:void 0!==L.numClippingPlanes&&(L.numClippingPlanes!==y.numPlanes||L.numIntersection!==y.numIntersection)?P=!0:L.vertexAlphas!==v?P=!0:L.vertexTangents!==x?P=!0:L.morphTargets!==M?P=!0:L.morphNormals!==S?P=!0:L.morphColors!==E?P=!0:L.toneMapping!==T?P=!0:!0===n.isWebGL2&&L.morphTargetsCount!==R&&(P=!0):P=!0:P=!0:(P=!0,L.__version=a.version);//
let I=L.currentProgram;!0===P&&(I=eV(a,t,c));let O=!1,U=!1,N=!1,D=I.getUniforms(),F=L.uniforms;if(r.useProgram(I.program)&&(O=!0,U=!0,N=!0),a.id!==ee&&(ee=a.id,U=!0),O||et!==e){// common camera uniforms
D.setValue(eT,"projectionMatrix",e.projectionMatrix),D.setValue(eT,"viewMatrix",e.matrixWorldInverse);let t=D.map.cameraPosition;void 0!==t&&t.setValue(eT,eb.setFromMatrixPosition(e.matrixWorld)),n.logarithmicDepthBuffer&&D.setValue(eT,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),(a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshLambertMaterial||a.isMeshBasicMaterial||a.isMeshStandardMaterial||a.isShaderMaterial)&&D.setValue(eT,"isOrthographic",!0===e.isOrthographicCamera),et!==e&&(et=e,// lighting uniforms depend on the camera so enforce an update
// now, in case this material supports lights - or later, when
// the next material that does gets activated:
U=!0,N=!0)}// skinning and morph target uniforms must be set even if material didn't change
// auto-setting of texture unit for bone and morph texture must go before other textures
// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
if(c.isSkinnedMesh){D.setOptional(eT,c,"bindMatrix"),D.setOptional(eT,c,"bindMatrixInverse");let e=c.skeleton;e&&(n.floatVertexTextures?(null===e.boneTexture&&e.computeBoneTexture(),D.setValue(eT,"boneTexture",e.boneTexture,o),D.setValue(eT,"boneTextureSize",e.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}let B=i.morphAttributes;// UBOs
if((void 0!==B.position||void 0!==B.normal||void 0!==B.color&&!0===n.isWebGL2)&&b.update(c,i,I),(U||L.receiveShadow!==c.receiveShadow)&&(L.receiveShadow=c.receiveShadow,D.setValue(eT,"receiveShadow",c.receiveShadow)),a.isMeshGouraudMaterial&&null!==a.envMap&&(F.envMap.value=_,F.flipEnvMap.value=_.isCubeTexture&&!1===_.isRenderTargetTexture?-1:1),U&&(D.setValue(eT,"toneMappingExposure",j.toneMappingExposure),L.needsLights&&(u=N,F.ambientLightColor.needsUpdate=u,F.lightProbe.needsUpdate=u,F.directionalLights.needsUpdate=u,F.directionalLightShadows.needsUpdate=u,F.pointLights.needsUpdate=u,F.pointLightShadows.needsUpdate=u,F.spotLights.needsUpdate=u,F.spotLightShadows.needsUpdate=u,F.rectAreaLights.needsUpdate=u,F.hemisphereLights.needsUpdate=u),d&&!0===a.fog&&g.refreshFogUniforms(F,d),g.refreshMaterialUniforms(F,a,ec,eh,ey),nP.upload(eT,L.uniformsList,F,o)),a.isShaderMaterial&&!0===a.uniformsNeedUpdate&&(nP.upload(eT,L.uniformsList,F,o),a.uniformsNeedUpdate=!1),a.isSpriteMaterial&&D.setValue(eT,"center",c.center),// common matrices
D.setValue(eT,"modelViewMatrix",c.modelViewMatrix),D.setValue(eT,"normalMatrix",c.normalMatrix),D.setValue(eT,"modelMatrix",c.matrixWorld),a.isShaderMaterial||a.isRawShaderMaterial){let e=a.uniformsGroups;for(let t=0,i=e.length;t<i;t++)if(n.isWebGL2){let i=e[t];A.update(i,I),A.bind(i,I)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return I}(e,t,i,a,d);r.setMaterial(a,_);//
let x=i.index,M=1;if(!0===a.wireframe){if(void 0===(x=u.getWireframeAttribute(i)))return;M=2}//
let T=i.drawRange,R=i.attributes.position,L=T.start*M,C=(T.start+T.count)*M;null!==p&&(L=Math.max(L,p.start*M),C=Math.min(C,(p.start+p.count)*M)),null!==x?(L=Math.max(L,0),C=Math.min(C,x.count)):null!=R&&(L=Math.max(L,0),C=Math.min(C,R.count));let P=C-L;if(P<0||P===1/0)return;//
w.setup(d,a,v,i,x);let I=S;//
if(null!==x&&(f=c.get(x),(I=E).setIndex(f)),d.isMesh)!0===a.wireframe?(r.setLineWidth(a.wireframeLinewidth*eE()),I.setMode(eT.LINES)):I.setMode(eT.TRIANGLES);else if(d.isLine){let e=a.linewidth;void 0===e&&(e=1),r.setLineWidth(e*eE()),d.isLineSegments?I.setMode(eT.LINES):d.isLineLoop?I.setMode(eT.LINE_LOOP):I.setMode(eT.LINE_STRIP)}else d.isPoints?I.setMode(eT.POINTS):d.isSprite&&I.setMode(eT.TRIANGLES);if(d.isInstancedMesh)I.renderInstances(L,P,d.count);else if(i.isInstancedBufferGeometry){let e=void 0!==i._maxInstanceCount?i._maxInstanceCount:1/0,t=Math.min(i.instanceCount,e);I.renderInstances(L,P,t)}else I.render(L,P)},// Compile
this.compile=function(e,t){function i(e,t,i){!0===e.transparent&&2===e.side&&!1===e.forceSinglePass?(e.side=1,e.needsUpdate=!0,eV(e,t,i),e.side=0,e.needsUpdate=!0,eV(e,t,i),e.side=2):eV(e,t,i)}(q=v.get(e)).init(),X.push(q),e.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&(q.pushLight(e),e.castShadow&&q.pushShadow(e))}),q.setupLights(j._useLegacyLights),e.traverse(function(t){let n=t.material;if(n){if(Array.isArray(n))for(let r=0;r<n.length;r++){let a=n[r];i(a,e,t)}else i(n,e,t)}}),X.pop(),q=null};// Animation Loop
let eU=null;function eN(){eF.stop()}function eD(){eF.start()}let eF=new ii;function eB(e,t,a,s){let l=e.opaque,h=e.transmissive,c=e.transparent;q.setupLightsView(a),!0===e_&&y.setGlobalState(j.clippingPlanes,a),h.length>0&&function(e,t,r,a){let s=n.isWebGL2;null===ey&&(ey=new $(1,1,{generateMipmaps:!0,type:i.has("EXT_color_buffer_half_float")?1016:1009,minFilter:1008,samples:s?4:0})),j.getDrawingBufferSize(eM),s?ey.setSize(eM.x,eM.y):ey.setSize(R(eM.x),R(eM.y));//
let l=j.getRenderTarget();j.setRenderTarget(ey),j.getClearColor(es),(eo=j.getClearAlpha())<1&&j.setClearColor(16777215,.5),j.clear();// Turn off the features which can affect the frag color for opaque objects pass.
// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
let h=j.toneMapping;j.toneMapping=0,ez(e,r,a),o.updateMultisampleRenderTarget(ey),o.updateRenderTargetMipmap(ey);let c=!1;for(let e=0,i=t.length;e<i;e++){let i=t[e],n=i.object,s=i.geometry,o=i.material,l=i.group;if(2===o.side&&n.layers.test(a.layers)){let e=o.side;o.side=1,o.needsUpdate=!0,ek(n,r,a,s,o,l),o.side=e,o.needsUpdate=!0,c=!0}}!0===c&&(o.updateMultisampleRenderTarget(ey),o.updateRenderTargetMipmap(ey)),j.setRenderTarget(l),j.setClearColor(es,eo),j.toneMapping=h}(l,h,t,a),s&&r.viewport(en.copy(s)),l.length>0&&ez(l,t,a),h.length>0&&ez(h,t,a),c.length>0&&ez(c,t,a),// Ensure depth buffer writing is enabled so it can be cleared on next render
r.buffers.depth.setTest(!0),r.buffers.depth.setMask(!0),r.buffers.color.setMask(!0),r.setPolygonOffset(!1)}function ez(e,t,i){let n=!0===t.isScene?t.overrideMaterial:null;for(let r=0,a=e.length;r<a;r++){let a=e[r],s=a.object,o=a.geometry,l=null===n?a.material:n,h=a.group;s.layers.test(i.layers)&&ek(s,t,i,o,l,h)}}function ek(e,t,i,n,r,a){e.onBeforeRender(j,t,i,n,r,a),e.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),r.onBeforeRender(j,t,i,n,e,a),!0===r.transparent&&2===r.side&&!1===r.forceSinglePass?(r.side=1,r.needsUpdate=!0,j.renderBufferDirect(i,t,n,r,e,a),r.side=0,r.needsUpdate=!0,j.renderBufferDirect(i,t,n,r,e,a),r.side=2):j.renderBufferDirect(i,t,n,r,e,a),e.onAfterRender(j,t,i,n,r,a)}function eV(e,t,i){!0!==t.isScene&&(t=eS);let n=s.get(e),r=q.state.lights,a=q.state.shadowsArray,o=r.state.version,c=f.getParameters(e,r.state,a,t,i),u=f.getProgramCacheKey(c),d=n.programs;// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
n.environment=e.isMeshStandardMaterial?t.environment:null,n.fog=t.fog,n.envMap=(e.isMeshStandardMaterial?h:l).get(e.envMap||n.environment),void 0===d&&(// new material
e.addEventListener("dispose",eO),d=new Map,n.programs=d);let p=d.get(u);if(void 0!==p){if(n.currentProgram===p&&n.lightsStateVersion===o)return eH(e,c),p}else c.uniforms=f.getUniforms(e),e.onBuild(i,c,j),e.onBeforeCompile(c,j),p=f.acquireProgram(c,u),d.set(u,p),n.uniforms=c.uniforms;let m=n.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(m.clippingPlanes=y.uniform),eH(e,c),// store the light setup it was created for
n.needsLights=e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights,n.lightsStateVersion=o,n.needsLights&&(// wire up the material to this renderer's lighting state
m.ambientLightColor.value=r.state.ambient,m.lightProbe.value=r.state.probe,m.directionalLights.value=r.state.directional,m.directionalLightShadows.value=r.state.directionalShadow,m.spotLights.value=r.state.spot,m.spotLightShadows.value=r.state.spotShadow,m.rectAreaLights.value=r.state.rectArea,m.ltc_1.value=r.state.rectAreaLTC1,m.ltc_2.value=r.state.rectAreaLTC2,m.pointLights.value=r.state.point,m.pointLightShadows.value=r.state.pointShadow,m.hemisphereLights.value=r.state.hemi,m.directionalShadowMap.value=r.state.directionalShadowMap,m.directionalShadowMatrix.value=r.state.directionalShadowMatrix,m.spotShadowMap.value=r.state.spotShadowMap,m.spotLightMatrix.value=r.state.spotLightMatrix,m.spotLightMap.value=r.state.spotLightMap,m.pointShadowMap.value=r.state.pointShadowMap,m.pointShadowMatrix.value=r.state.pointShadowMatrix);let g=p.getUniforms(),_=nP.seqWithValue(g.seq,m);return n.currentProgram=p,n.uniformsList=_,p}function eH(e,t){let i=s.get(e);i.outputColorSpace=t.outputColorSpace,i.instancing=t.instancing,i.instancingColor=t.instancingColor,i.skinning=t.skinning,i.morphTargets=t.morphTargets,i.morphNormals=t.morphNormals,i.morphColors=t.morphColors,i.morphTargetsCount=t.morphTargetsCount,i.numClippingPlanes=t.numClippingPlanes,i.numIntersection=t.numClipIntersection,i.vertexAlphas=t.vertexAlphas,i.vertexTangents=t.vertexTangents,i.toneMapping=t.toneMapping}eF.setAnimationLoop(function(e){eU&&eU(e)}),"undefined"!=typeof self&&eF.setContext(self),this.setAnimationLoop=function(e){eU=e,eR.setAnimationLoop(e),null===e?eF.stop():eF.start()},eR.addEventListener("sessionstart",eN),eR.addEventListener("sessionend",eD),// Rendering
this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(!0===Y)return;!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===eR.enabled&&!0===eR.isPresenting&&(!0===eR.cameraAutoUpdate&&eR.updateCamera(t),t=eR.getCamera()),!0===e.isScene&&e.onBeforeRender(j,e,t,K),(q=v.get(e,X.length)).init(),X.push(q),ex.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),eg.setFromProjectionMatrix(ex),ev=this.localClippingEnabled,e_=y.init(this.clippingPlanes,ev),(G=_.get(e,W.length)).init(),W.push(G),function e(t,i,n,r){if(!1===t.visible)return;let a=t.layers.test(i.layers);if(a){if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(i);else if(t.isLight)q.pushLight(t),t.castShadow&&q.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||eg.intersectsSprite(t)){r&&eb.setFromMatrixPosition(t.matrixWorld).applyMatrix4(ex);let e=d.update(t),i=t.material;i.visible&&G.push(t,e,i,n,eb.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(!t.frustumCulled||eg.intersectsObject(t))){let e=d.update(t),i=t.material;if(r&&(void 0!==t.boundingSphere?(null===t.boundingSphere&&t.computeBoundingSphere(),eb.copy(t.boundingSphere.center)):(null===e.boundingSphere&&e.computeBoundingSphere(),eb.copy(e.boundingSphere.center)),eb.applyMatrix4(t.matrixWorld).applyMatrix4(ex)),Array.isArray(i)){let r=e.groups;for(let a=0,s=r.length;a<s;a++){let s=r[a],o=i[s.materialIndex];o&&o.visible&&G.push(t,e,o,n,eb.z,s)}}else i.visible&&G.push(t,e,i,n,eb.z,null)}}let s=t.children;for(let t=0,a=s.length;t<a;t++)e(s[t],i,n,r)}(e,t,0,j.sortObjects),G.finish(),!0===j.sortObjects&&G.sort(eu,ed),//
this.info.render.frame++,!0===e_&&y.beginShadows();let i=q.state.shadowsArray;if(x.render(i,e,t),!0===e_&&y.endShadows(),!0===this.info.autoReset&&this.info.reset(),//
M.render(G,e),// render scene
q.setupLights(j._useLegacyLights),t.isArrayCamera){let i=t.cameras;for(let t=0,n=i.length;t<n;t++){let n=i[t];eB(G,e,n,n.viewport)}}else eB(G,e,t);null!==K&&(// resolve multisample renderbuffers to a single-sample texture if necessary
o.updateMultisampleRenderTarget(K),// Generate mipmap if we're using any kind of mipmap filtering
o.updateRenderTargetMipmap(K)),!0===e.isScene&&e.onAfterRender(j,e,t),// _gl.finish();
w.resetDefaultState(),ee=-1,et=null,X.pop(),q=X.length>0?X[X.length-1]:null,W.pop(),G=W.length>0?W[W.length-1]:null},this.getActiveCubeFace=function(){return Z},this.getActiveMipmapLevel=function(){return Q},this.getRenderTarget=function(){return K},this.setRenderTargetTextures=function(e,t,n){s.get(e.texture).__webglTexture=t,s.get(e.depthTexture).__webglTexture=n;let r=s.get(e);r.__hasExternalTextures=!0,r.__hasExternalTextures&&(r.__autoAllocateDepthBuffer=void 0===n,r.__autoAllocateDepthBuffer||!0!==i.has("WEBGL_multisampled_render_to_texture")||(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),r.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(e,t){let i=s.get(e);i.__webglFramebuffer=t,i.__useDefaultFramebuffer=void 0===t},this.setRenderTarget=function(e,t=0,i=0){K=e,Z=t,Q=i;let a=!0,l=null,h=!1,c=!1;if(e){let u=s.get(e);void 0!==u.__useDefaultFramebuffer?(// We need to make sure to rebind the framebuffer.
r.bindFramebuffer(eT.FRAMEBUFFER,null),a=!1):void 0===u.__webglFramebuffer?o.setupRenderTarget(e):u.__hasExternalTextures&&o.rebindTextures(e,s.get(e.texture).__webglTexture,s.get(e.depthTexture).__webglTexture);let d=e.texture;(d.isData3DTexture||d.isDataArrayTexture||d.isCompressedArrayTexture)&&(c=!0);let p=s.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(l=Array.isArray(p[t])?p[t][i]:p[t],h=!0):l=n.isWebGL2&&e.samples>0&&!1===o.useMultisampledRTT(e)?s.get(e).__webglMultisampledFramebuffer:Array.isArray(p)?p[i]:p,en.copy(e.viewport),er.copy(e.scissor),ea=e.scissorTest}else en.copy(ep).multiplyScalar(ec).floor(),er.copy(em).multiplyScalar(ec).floor(),ea=ef;let u=r.bindFramebuffer(eT.FRAMEBUFFER,l);if(u&&n.drawBuffers&&a&&r.drawBuffers(e,l),r.viewport(en),r.scissor(er),r.setScissorTest(ea),h){let n=s.get(e.texture);eT.framebufferTexture2D(eT.FRAMEBUFFER,eT.COLOR_ATTACHMENT0,eT.TEXTURE_CUBE_MAP_POSITIVE_X+t,n.__webglTexture,i)}else if(c){let n=s.get(e.texture),r=t||0;eT.framebufferTextureLayer(eT.FRAMEBUFFER,eT.COLOR_ATTACHMENT0,n.__webglTexture,i||0,r)}ee=-1},this.readRenderTargetPixels=function(e,t,a,o,l,h,c){if(!(e&&e.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let u=s.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==c&&(u=u[c]),u){r.bindFramebuffer(eT.FRAMEBUFFER,u);try{let r=e.texture,s=r.format,c=r.type;if(1023!==s&&T.convert(s)!==eT.getParameter(eT.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}let u=1016===c&&(i.has("EXT_color_buffer_half_float")||n.isWebGL2&&i.has("EXT_color_buffer_float"));if(1009!==c&&T.convert(c)!==eT.getParameter(eT.IMPLEMENTATION_COLOR_READ_TYPE)&&// Edge and Chrome Mac < 52 (#9513)
!(1015===c&&(n.isWebGL2||i.has("OES_texture_float")||i.has("WEBGL_color_buffer_float")))&&// Chrome Mac >= 52 and Firefox
!u){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
t>=0&&t<=e.width-o&&a>=0&&a<=e.height-l&&eT.readPixels(t,a,o,l,T.convert(s),T.convert(c),h)}finally{// restore framebuffer of current render target if necessary
let e=null!==K?s.get(K).__webglFramebuffer:null;r.bindFramebuffer(eT.FRAMEBUFFER,e)}}},this.copyFramebufferToTexture=function(e,t,i=0){let n=Math.pow(2,-i),a=Math.floor(t.image.width*n),s=Math.floor(t.image.height*n);o.setTexture2D(t,0),eT.copyTexSubImage2D(eT.TEXTURE_2D,i,0,0,e.x,e.y,a,s),r.unbindTexture()},this.copyTextureToTexture=function(e,t,i,n=0){let a=t.image.width,s=t.image.height,l=T.convert(i.format),h=T.convert(i.type);o.setTexture2D(i,0),// As another texture upload may have changed pixelStorei
// parameters, make sure they are correct for the dstTexture
eT.pixelStorei(eT.UNPACK_FLIP_Y_WEBGL,i.flipY),eT.pixelStorei(eT.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),eT.pixelStorei(eT.UNPACK_ALIGNMENT,i.unpackAlignment),t.isDataTexture?eT.texSubImage2D(eT.TEXTURE_2D,n,e.x,e.y,a,s,l,h,t.image.data):t.isCompressedTexture?eT.compressedTexSubImage2D(eT.TEXTURE_2D,n,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,l,t.mipmaps[0].data):eT.texSubImage2D(eT.TEXTURE_2D,n,e.x,e.y,l,h,t.image),0===n&&i.generateMipmaps&&eT.generateMipmap(eT.TEXTURE_2D),r.unbindTexture()},this.copyTextureToTexture3D=function(e,t,i,n,a=0){let s;if(j.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}let l=e.max.x-e.min.x+1,h=e.max.y-e.min.y+1,c=e.max.z-e.min.z+1,u=T.convert(n.format),d=T.convert(n.type);if(n.isData3DTexture)o.setTexture3D(n,0),s=eT.TEXTURE_3D;else if(n.isDataArrayTexture)o.setTexture2DArray(n,0),s=eT.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}eT.pixelStorei(eT.UNPACK_FLIP_Y_WEBGL,n.flipY),eT.pixelStorei(eT.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),eT.pixelStorei(eT.UNPACK_ALIGNMENT,n.unpackAlignment);let p=eT.getParameter(eT.UNPACK_ROW_LENGTH),m=eT.getParameter(eT.UNPACK_IMAGE_HEIGHT),f=eT.getParameter(eT.UNPACK_SKIP_PIXELS),g=eT.getParameter(eT.UNPACK_SKIP_ROWS),_=eT.getParameter(eT.UNPACK_SKIP_IMAGES),v=i.isCompressedTexture?i.mipmaps[0]:i.image;eT.pixelStorei(eT.UNPACK_ROW_LENGTH,v.width),eT.pixelStorei(eT.UNPACK_IMAGE_HEIGHT,v.height),eT.pixelStorei(eT.UNPACK_SKIP_PIXELS,e.min.x),eT.pixelStorei(eT.UNPACK_SKIP_ROWS,e.min.y),eT.pixelStorei(eT.UNPACK_SKIP_IMAGES,e.min.z),i.isDataTexture||i.isData3DTexture?eT.texSubImage3D(s,a,t.x,t.y,t.z,l,h,c,u,d,v.data):i.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),eT.compressedTexSubImage3D(s,a,t.x,t.y,t.z,l,h,c,u,v.data)):eT.texSubImage3D(s,a,t.x,t.y,t.z,l,h,c,u,d,v),eT.pixelStorei(eT.UNPACK_ROW_LENGTH,p),eT.pixelStorei(eT.UNPACK_IMAGE_HEIGHT,m),eT.pixelStorei(eT.UNPACK_SKIP_PIXELS,f),eT.pixelStorei(eT.UNPACK_SKIP_ROWS,g),eT.pixelStorei(eT.UNPACK_SKIP_IMAGES,_),0===a&&n.generateMipmaps&&eT.generateMipmap(s),r.unbindTexture()},this.initTexture=function(e){e.isCubeTexture?o.setTextureCube(e,0):e.isData3DTexture?o.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?o.setTexture2DArray(e,0):o.setTexture2D(e,0),r.unbindTexture()},this.resetState=function(){Z=0,Q=0,K=null,r.reset(),w.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return 2e3}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;let t=this.getContext();t.drawingBufferColorSpace=e===f?"display-p3":"srgb",t.unpackColorSpace=H.workingColorSpace===g?"display-p3":"srgb"}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(e){console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!e}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===p?3001:3e3}set outputEncoding(e){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=3001===e?p:m}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=e}}(class extends rd{}).prototype.isWebGL1Renderer=!0;class rp extends e3{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.environment&&(this.environment=e.environment.clone()),null!==e.fog&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){let t=super.toJSON(e);return null!==this.fog&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(t.object.backgroundIntensity=this.backgroundIntensity),t}}class rm extends to{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new td(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const rf=/*@__PURE__*/new ei,rg=/*@__PURE__*/new ei,r_=/*@__PURE__*/new eI,rv=/*@__PURE__*/new eP,ry=/*@__PURE__*/new eS;class rx extends e3{constructor(e=new tR,t=new rm){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){let e=this.geometry;// we assume non-indexed geometry
if(null===e.index){let t=e.attributes.position,i=[0];for(let e=1,n=t.count;e<n;e++)rf.fromBufferAttribute(t,e-1),rg.fromBufferAttribute(t,e),i[e]=i[e-1],i[e]+=rf.distanceTo(rg);e.setAttribute("lineDistance",new tx(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){let i=this.geometry,n=this.matrixWorld,r=e.params.Line.threshold,a=i.drawRange;if(null===i.boundingSphere&&i.computeBoundingSphere(),ry.copy(i.boundingSphere),ry.applyMatrix4(n),ry.radius+=r,!1===e.ray.intersectsSphere(ry))return;//
r_.copy(n).invert(),rv.copy(e.ray).applyMatrix4(r_);let s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s,l=new ei,h=new ei,c=new ei,u=new ei,d=this.isLineSegments?2:1,p=i.index,m=i.attributes,f=m.position;if(null!==p){let i=Math.max(0,a.start),n=Math.min(p.count,a.start+a.count);for(let r=i,a=n-1;r<a;r+=d){let i=p.getX(r),n=p.getX(r+1);l.fromBufferAttribute(f,i),h.fromBufferAttribute(f,n);let a=rv.distanceSqToSegment(l,h,u,c);if(a>o)continue;u.applyMatrix4(this.matrixWorld);let s=e.ray.origin.distanceTo(u);s<e.near||s>e.far||t.push({distance:s,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:c.clone().applyMatrix4(this.matrixWorld),index:r,face:null,faceIndex:null,object:this})}}else{let i=Math.max(0,a.start),n=Math.min(f.count,a.start+a.count);for(let r=i,a=n-1;r<a;r+=d){l.fromBufferAttribute(f,r),h.fromBufferAttribute(f,r+1);let i=rv.distanceSqToSegment(l,h,u,c);if(i>o)continue;u.applyMatrix4(this.matrixWorld);let n=e.ray.origin.distanceTo(u);n<e.near||n>e.far||t.push({distance:n,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:c.clone().applyMatrix4(this.matrixWorld),index:r,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){let e=this.geometry,t=e.morphAttributes,i=Object.keys(t);if(i.length>0){let e=t[i[0]];if(void 0!==e){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,i=e.length;t<i;t++){let i=e[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=t}}}}}/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/class rM{constructor(){this.type="Curve",this.arcLengthDivisions=200}// Virtual base class method to overwrite and implement in subclasses
//	- t [0 .. 1]
getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}// Get point at relative position in curve according to arc length
// - u [0 .. 1]
getPointAt(e,t){let i=this.getUtoTmapping(e);return this.getPoint(i,t)}// Get sequence of points using getPoint( t )
getPoints(e=5){let t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return t}// Get sequence of points using getPointAt( u )
getSpacedPoints(e=5){let t=[];for(let i=0;i<=e;i++)t.push(this.getPointAt(i/e));return t}// Get total curve arc length
getLength(){let e=this.getLengths();return e[e.length-1]}// Get list of cumulative segment lengths
getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;let t=[],i,n=this.getPoint(0),r=0;t.push(0);for(let a=1;a<=e;a++)t.push(r+=(i=this.getPoint(a/e)).distanceTo(n)),n=i;return this.cacheArcLengths=t,t;// { sums: cache, sum: sum }; Sum is in the last element.
}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
getUtoTmapping(e,t){let i;let n=this.getLengths(),r=0,a=n.length;i=t||e*n[a-1];// binary search for the index with largest value smaller than target u distance
let s=0,o=a-1,l;for(;s<=o;)if((l=n[r=Math.floor(s+(o-s)/2)]-i)<0)s=r+1;else if(l>0)o=r-1;else{o=r;break;// DONE
}if(n[r=o]===i)return r/(a-1);// we could get finer grain at lengths, or use simple interpolation between two points
let h=n[r],c=n[r+1],u=(r+(i-h)/(c-h))/(a-1);return u}// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation
getTangent(e,t){let i=e-1e-4,n=e+1e-4;i<0&&(i=0),n>1&&(n=1);let r=this.getPoint(i),a=this.getPoint(n),s=t||(r.isVector2?new P:new ei);return s.copy(a).sub(r).normalize(),s}getTangentAt(e,t){let i=this.getUtoTmapping(e);return this.getTangent(i,t)}computeFrenetFrames(e,t){// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
let i=new ei,n=[],r=[],a=[],s=new ei,o=new eI;// compute the tangent vectors for each segment on the curve
for(let t=0;t<=e;t++){let i=t/e;n[t]=this.getTangentAt(i,new ei)}// select an initial normal vector perpendicular to the first tangent vector,
// and in the direction of the minimum tangent xyz component
r[0]=new ei,a[0]=new ei;let l=Number.MAX_VALUE,h=Math.abs(n[0].x),c=Math.abs(n[0].y),u=Math.abs(n[0].z);h<=l&&(l=h,i.set(1,0,0)),c<=l&&(l=c,i.set(0,1,0)),u<=l&&i.set(0,0,1),s.crossVectors(n[0],i).normalize(),r[0].crossVectors(n[0],s),a[0].crossVectors(n[0],r[0]);// compute the slowly-varying normal and binormal vectors for each segment on the curve
for(let t=1;t<=e;t++){if(r[t]=r[t-1].clone(),a[t]=a[t-1].clone(),s.crossVectors(n[t-1],n[t]),s.length()>Number.EPSILON){s.normalize();let e=Math.acos(w(n[t-1].dot(n[t]),-1,1));// clamp for floating pt errors
r[t].applyMatrix4(o.makeRotationAxis(s,e))}a[t].crossVectors(n[t],r[t])}// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
if(!0===t){let t=Math.acos(w(r[0].dot(r[e]),-1,1));t/=e,n[0].dot(s.crossVectors(r[0],r[e]))>0&&(t=-t);for(let i=1;i<=e;i++)// twist a little...
r[i].applyMatrix4(o.makeRotationAxis(n[i],t*i)),a[i].crossVectors(n[i],r[i])}return{tangents:n,normals:r,binormals:a}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){let e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class rb extends rM{constructor(e=0,t=0,i=1,n=1,r=0,a=2*Math.PI,s=!1,o=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=i,this.yRadius=n,this.aStartAngle=r,this.aEndAngle=a,this.aClockwise=s,this.aRotation=o}getPoint(e,t){let i=t||new P,n=2*Math.PI,r=this.aEndAngle-this.aStartAngle,a=Math.abs(r)<Number.EPSILON;// ensures that deltaAngle is 0 .. 2 PI
for(;r<0;)r+=n;for(;r>n;)r-=n;r<Number.EPSILON&&(r=a?0:n),!0!==this.aClockwise||a||(r===n?r=-n:r-=n);let s=this.aStartAngle+e*r,o=this.aX+this.xRadius*Math.cos(s),l=this.aY+this.yRadius*Math.sin(s);if(0!==this.aRotation){let e=Math.cos(this.aRotation),t=Math.sin(this.aRotation),i=o-this.aX,n=l-this.aY;// Rotate the point about the center of the ellipse.
o=i*e-n*t+this.aX,l=i*t+n*e+this.aY}return i.set(o,l)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){let e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 *//*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/function rS(){let e=0,t=0,i=0,n=0;/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */function r(r,a,s,o){e=r,t=s,i=-3*r+3*a-2*s-o,n=2*r-2*a+s+o}return{initCatmullRom:function(e,t,i,n,a){r(t,i,a*(i-e),a*(n-t))},initNonuniformCatmullRom:function(e,t,i,n,a,s,o){// compute tangents when parameterized in [t1,t2]
let l=(t-e)/a-(i-e)/(a+s)+(i-t)/s,h=(i-t)/s-(n-t)/(s+o)+(n-i)/o;r(t,i,// rescale tangents for parametrization in [0,1]
l*=s,h*=s)},calc:function(r){let a=r*r;return e+t*r+i*a+n*(a*r)}}}//
const rE=/*@__PURE__*/new ei,rT=/*@__PURE__*/new rS,rw=/*@__PURE__*/new rS,rA=/*@__PURE__*/new rS;/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */function rR(e,t,i,n,r){let a=(n-t)*.5,s=(r-i)*.5,o=e*e;return(2*i-2*n+a+s)*(e*o)+(-3*i+3*n-2*a-s)*o+a*e+i}function rL(e,t,i,n){return(//
function(e,t){let i=1-e;return i*i*t}(e,t)+2*(1-e)*e*i+e*e*n)}function rC(e,t,i,n,r){return(//
function(e,t){let i=1-e;return i*i*i*t}(e,t)+function(e,t){let i=1-e;return 3*i*i*e*t}(e,i)+3*(1-e)*e*e*n+e*e*e*r)}class rP extends rM{constructor(e=new P,t=new P,i=new P,n=new P){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=i,this.v3=n}getPoint(e,t=new P){let i=this.v0,n=this.v1,r=this.v2,a=this.v3;return t.set(rC(e,i.x,n.x,r.x,a.x),rC(e,i.y,n.y,r.y,a.y)),t}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){let e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class rI extends rM{constructor(e=new P,t=new P){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new P){return 1===e?t.copy(this.v2):(t.copy(this.v2).sub(this.v1),t.multiplyScalar(e).add(this.v1)),t}// Line curve is linear, so we can overwrite default getPointAt
getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new P){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){let e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class rO extends rM{constructor(e=new ei,t=new ei){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new ei){return 1===e?t.copy(this.v2):(t.copy(this.v2).sub(this.v1),t.multiplyScalar(e).add(this.v1)),t}// Line curve is linear, so we can overwrite default getPointAt
getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new ei){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){let e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class rU extends rM{constructor(e=new P,t=new P,i=new P){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new P){let i=this.v0,n=this.v1,r=this.v2;return t.set(rL(e,i.x,n.x,r.x),rL(e,i.y,n.y,r.y)),t}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){let e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class rN extends rM{constructor(e=new ei,t=new ei,i=new ei){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new ei){let i=this.v0,n=this.v1,r=this.v2;return t.set(rL(e,i.x,n.x,r.x),rL(e,i.y,n.y,r.y),rL(e,i.z,n.z,r.z)),t}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){let e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class rD extends rM{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new P){let i=this.points,n=(i.length-1)*e,r=Math.floor(n),a=n-r,s=i[0===r?r:r-1],o=i[r],l=i[r>i.length-2?i.length-1:r+1],h=i[r>i.length-3?i.length-1:r+2];return t.set(rR(a,s.x,o.x,l.x,h.x),rR(a,s.y,o.y,l.y,h.y)),t}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){let i=e.points[t];this.points.push(i.clone())}return this}toJSON(){let e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){let i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){let i=e.points[t];this.points.push(new P().fromArray(i))}return this}}var rF=/*#__PURE__*/Object.freeze({__proto__:null,ArcCurve:class extends rb{constructor(e,t,i,n,r,a){super(e,t,i,i,n,r,a),this.isArcCurve=!0,this.type="ArcCurve"}},CatmullRomCurve3:class extends rM{constructor(e=[],t=!1,i="centripetal",n=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=i,this.tension=n}getPoint(e,t=new ei){let i,n;let r=this.points,a=r.length,s=(a-(this.closed?0:1))*e,o=Math.floor(s),l=s-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/a)+1)*a:0===l&&o===a-1&&(o=a-2,l=1),this.closed||o>0?i=r[(o-1)%a]:(// extrapolate first point
rE.subVectors(r[0],r[1]).add(r[0]),i=rE);let h=r[o%a],c=r[(o+1)%a];if(this.closed||o+2<a?n=r[(o+2)%a]:(// extrapolate last point
rE.subVectors(r[a-1],r[a-2]).add(r[a-1]),n=rE),"centripetal"===this.curveType||"chordal"===this.curveType){// init Centripetal / Chordal Catmull-Rom
let e="chordal"===this.curveType?.5:.25,t=Math.pow(i.distanceToSquared(h),e),r=Math.pow(h.distanceToSquared(c),e),a=Math.pow(c.distanceToSquared(n),e);r<1e-4&&(r=1),t<1e-4&&(t=r),a<1e-4&&(a=r),rT.initNonuniformCatmullRom(i.x,h.x,c.x,n.x,t,r,a),rw.initNonuniformCatmullRom(i.y,h.y,c.y,n.y,t,r,a),rA.initNonuniformCatmullRom(i.z,h.z,c.z,n.z,t,r,a)}else"catmullrom"===this.curveType&&(rT.initCatmullRom(i.x,h.x,c.x,n.x,this.tension),rw.initCatmullRom(i.y,h.y,c.y,n.y,this.tension),rA.initCatmullRom(i.z,h.z,c.z,n.z,this.tension));return t.set(rT.calc(l),rw.calc(l),rA.calc(l)),t}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){let i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){let e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){let i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){let i=e.points[t];this.points.push(new ei().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}},CubicBezierCurve:rP,CubicBezierCurve3:class extends rM{constructor(e=new ei,t=new ei,i=new ei,n=new ei){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=i,this.v3=n}getPoint(e,t=new ei){let i=this.v0,n=this.v1,r=this.v2,a=this.v3;return t.set(rC(e,i.x,n.x,r.x,a.x),rC(e,i.y,n.y,r.y,a.y),rC(e,i.z,n.z,r.z,a.z)),t}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){let e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}},EllipseCurve:rb,LineCurve:rI,LineCurve3:rO,QuadraticBezierCurve:rU,QuadraticBezierCurve3:rN,SplineCurve:rD});/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/class rB extends rM{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){// Add a line curve if start and end of lines are not connected
let e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){let i=!0===e.isVector2?"LineCurve":"LineCurve3";this.curves.push(new rF[i](t,e))}return this}// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:
// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')
getPoint(e,t){let i=e*this.getLength(),n=this.getCurveLengths(),r=0;// To think about boundaries points.
for(;r<n.length;){if(n[r]>=i){let e=n[r]-i,a=this.curves[r],s=a.getLength(),o=0===s?0:1-e/s;return a.getPointAt(o,t)}r++}return null;// loop where sum != 0, sum > d , sum+1 <d
}// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength
getLength(){let e=this.getCurveLengths();return e[e.length-1]}// cacheLengths must be recalculated.
updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.
getCurveLengths(){// We use cache values if curves and cache array are same length
if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;// Get length of sub-curve
// Push sums into cached array
let e=[],t=0;for(let i=0,n=this.curves.length;i<n;i++)e.push(t+=this.curves[i].getLength());return this.cacheLengths=e,e}getSpacedPoints(e=40){let t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){let t;let i=[];for(let n=0,r=this.curves;n<r.length;n++){let a=r[n],s=a.isEllipseCurve?2*e:a.isLineCurve||a.isLineCurve3?1:a.isSplineCurve?e*a.points.length:e,o=a.getPoints(s);for(let e=0;e<o.length;e++){let n=o[e];t&&t.equals(n)||(i.push(n),t=n);// ensures no consecutive points are duplicates
}}return this.autoClose&&i.length>1&&!i[i.length-1].equals(i[0])&&i.push(i[0]),i}copy(e){super.copy(e),this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){let i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){let e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,i=this.curves.length;t<i;t++){let i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){let i=e.curves[t];this.curves.push(new rF[i.type]().fromJSON(i))}return this}}class rz extends rB{constructor(e){super(),this.type="Path",this.currentPoint=new P,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,i=e.length;t<i;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){let i=new rI(this.currentPoint.clone(),new P(e,t));return this.curves.push(i),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,i,n){let r=new rU(this.currentPoint.clone(),new P(e,t),new P(i,n));return this.curves.push(r),this.currentPoint.set(i,n),this}bezierCurveTo(e,t,i,n,r,a){let s=new rP(this.currentPoint.clone(),new P(e,t),new P(i,n),new P(r,a));return this.curves.push(s),this.currentPoint.set(r,a),this}splineThru(e/*Array of Vector*/){let t=[this.currentPoint.clone()].concat(e),i=new rD(t);return this.curves.push(i),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,i,n,r,a){let s=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(e+s,t+o,i,n,r,a),this}absarc(e,t,i,n,r,a){return this.absellipse(e,t,i,i,n,r,a),this}ellipse(e,t,i,n,r,a,s,o){let l=this.currentPoint.x,h=this.currentPoint.y;return this.absellipse(e+l,t+h,i,n,r,a,s,o),this}absellipse(e,t,i,n,r,a,s,o){let l=new rb(e,t,i,n,r,a,s,o);if(this.curves.length>0){// if a previous curve is present, attempt to join
let e=l.getPoint(0);e.equals(this.currentPoint)||this.lineTo(e.x,e.y)}this.curves.push(l);let h=l.getPoint(1);return this.currentPoint.copy(h),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){let e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class rk extends tR{constructor(e=[new P(0,-.5),new P(.5,0),new P(0,.5)],t=12,i=0,n=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:i,phiLength:n},t=Math.floor(t),// clamp phiLength so it's in range of [ 0, 2PI ]
n=w(n,0,2*Math.PI);// buffers
let r=[],a=[],s=[],o=[],l=[],h=1/t,c=new ei,u=new P,d=new ei,p=new ei,m=new ei,f=0,g=0;// pre-compute normals for initial "meridian"
for(let t=0;t<=e.length-1;t++)switch(t){case 0:f=e[t+1].x-e[t].x,g=e[t+1].y-e[t].y,d.x=1*g,d.y=-f,d.z=0*g,m.copy(d),d.normalize(),o.push(d.x,d.y,d.z);break;case e.length-1:o.push(m.x,m.y,m.z);break;default:f=e[t+1].x-e[t].x,g=e[t+1].y-e[t].y,d.x=1*g,d.y=-f,d.z=0*g,p.copy(d),d.x+=m.x,d.y+=m.y,d.z+=m.z,d.normalize(),o.push(d.x,d.y,d.z),m.copy(p)}// generate vertices, uvs and normals
for(let r=0;r<=t;r++){let d=i+r*h*n,p=Math.sin(d),m=Math.cos(d);for(let i=0;i<=e.length-1;i++){// vertex
c.x=e[i].x*p,c.y=e[i].y,c.z=e[i].x*m,a.push(c.x,c.y,c.z),// uv
u.x=r/t,u.y=i/(e.length-1),s.push(u.x,u.y);// normal
let n=o[3*i+0]*p,h=o[3*i+1],d=o[3*i+0]*m;l.push(n,h,d)}}// indices
for(let i=0;i<t;i++)for(let t=0;t<e.length-1;t++){let n=t+i*e.length,a=n+e.length,s=n+e.length+1,o=n+1;// faces
r.push(n,a,o),r.push(s,o,a)}// build geometry
this.setIndex(r),this.setAttribute("position",new tx(a,3)),this.setAttribute("uv",new tx(s,2)),this.setAttribute("normal",new tx(l,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new rk(e.points,e.segments,e.phiStart,e.phiLength)}}class rV extends rk{constructor(e=1,t=1,i=4,n=8){let r=new rz;r.absarc(0,-t/2,e,1.5*Math.PI,0),r.absarc(0,t/2,e,0,.5*Math.PI),super(r.getPoints(i),n),this.type="CapsuleGeometry",this.parameters={radius:e,length:t,capSegments:i,radialSegments:n}}static fromJSON(e){return new rV(e.radius,e.length,e.capSegments,e.radialSegments)}}class rH extends tR{constructor(e=1,t=32,i=0,n=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:i,thetaLength:n},t=Math.max(3,t);// buffers
let r=[],a=[],s=[],o=[],l=new ei,h=new P;// center point
a.push(0,0,0),s.push(0,0,1),o.push(.5,.5);for(let r=0,c=3;r<=t;r++,c+=3){let u=i+r/t*n;// vertex
l.x=e*Math.cos(u),l.y=e*Math.sin(u),a.push(l.x,l.y,l.z),// normal
s.push(0,0,1),// uvs
h.x=(a[c]/e+1)/2,h.y=(a[c+1]/e+1)/2,o.push(h.x,h.y)}// indices
for(let e=1;e<=t;e++)r.push(e,e+1,0);// build geometry
this.setIndex(r),this.setAttribute("position",new tx(a,3)),this.setAttribute("normal",new tx(s,3)),this.setAttribute("uv",new tx(o,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new rH(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class rG extends tR{constructor(e=1,t=1,i=1,n=32,r=1,a=!1,s=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:i,radialSegments:n,heightSegments:r,openEnded:a,thetaStart:s,thetaLength:o};let l=this;n=Math.floor(n),r=Math.floor(r);// buffers
let h=[],c=[],u=[],d=[],p=0,m=[],f=i/2,g=0;function _(i){// save the index of the first center vertex
let r=p,a=new P,m=new ei,_=0,v=!0===i?e:t,y=!0===i?1:-1;// first we generate the center vertex data of the cap.
// because the geometry needs one set of uvs per face,
// we must generate a center vertex per face/segment
for(let e=1;e<=n;e++)// vertex
c.push(0,f*y,0),// normal
u.push(0,y,0),// uv
d.push(.5,.5),// increase index
p++;// save the index of the last center vertex
let x=p;// now we generate the surrounding vertices, normals and uvs
for(let e=0;e<=n;e++){let t=e/n,i=t*o+s,r=Math.cos(i),l=Math.sin(i);// vertex
m.x=v*l,m.y=f*y,m.z=v*r,c.push(m.x,m.y,m.z),// normal
u.push(0,y,0),// uv
a.x=.5*r+.5,a.y=.5*l*y+.5,d.push(a.x,a.y),// increase index
p++}// generate indices
for(let e=0;e<n;e++){let t=r+e,n=x+e;!0===i?h.push(n,n+1,t):h.push(n+1,n,t),_+=3}// add a group to the geometry. this will ensure multi material support
l.addGroup(g,_,!0===i?1:2),// calculate new start value for groups
g+=_}// generate geometry
(function(){let a=new ei,_=new ei,v=0,y=(t-e)/i;// generate vertices, normals and uvs
for(let l=0;l<=r;l++){let h=[],g=l/r,v=g*(t-e)+e;for(let e=0;e<=n;e++){let t=e/n,r=t*o+s,l=Math.sin(r),m=Math.cos(r);// vertex
_.x=v*l,_.y=-g*i+f,_.z=v*m,c.push(_.x,_.y,_.z),// normal
a.set(l,y,m).normalize(),u.push(a.x,a.y,a.z),// uv
d.push(t,1-g),// save index of vertex in respective row
h.push(p++)}// now save vertices of the row in our index array
m.push(h)}// generate indices
for(let e=0;e<n;e++)for(let t=0;t<r;t++){// we use the index array to access the correct indices
let i=m[t][e],n=m[t+1][e],r=m[t+1][e+1],a=m[t][e+1];// faces
h.push(i,n,a),h.push(n,r,a),// update group counter
v+=6}// add a group to the geometry. this will ensure multi material support
l.addGroup(g,v,0),// calculate new start value for groups
g+=v})(),!1===a&&(e>0&&_(!0),t>0&&_(!1)),// build geometry
this.setIndex(h),this.setAttribute("position",new tx(c,3)),this.setAttribute("normal",new tx(u,3)),this.setAttribute("uv",new tx(d,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new rG(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class rq extends rG{constructor(e=1,t=1,i=32,n=1,r=!1,a=0,s=2*Math.PI){super(0,e,t,i,n,r,a,s),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:i,heightSegments:n,openEnded:r,thetaStart:a,thetaLength:s}}static fromJSON(e){return new rq(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class rW extends tR{constructor(e=[],t=[],i=1,n=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:i,detail:n};// default buffer data
let r=[],a=[];function s(e){r.push(e.x,e.y,e.z)}function o(t,i){let n=3*t;i.x=e[n+0],i.y=e[n+1],i.z=e[n+2]}function l(e,t,i,n){n<0&&1===e.x&&(a[t]=e.x-1),0===i.x&&0===i.z&&(a[t]=n/2/Math.PI+.5)}// Angle around the Y axis, counter-clockwise when looking from above.
function h(e){return Math.atan2(e.z,-e.x)}// the subdivision creates the vertex buffer data
// helper functions
(function(e){let i=new ei,n=new ei,r=new ei;// iterate over all faces and apply a subdivision with the given detail value
for(let a=0;a<t.length;a+=3)// get the vertices of the face
o(t[a+0],i),o(t[a+1],n),o(t[a+2],r),// perform subdivision
function(e,t,i,n){let r=n+1,a=[];// construct all of the vertices for this subdivision
for(let n=0;n<=r;n++){a[n]=[];let s=e.clone().lerp(i,n/r),o=t.clone().lerp(i,n/r),l=r-n;for(let e=0;e<=l;e++)0===e&&n===r?a[n][e]=s:a[n][e]=s.clone().lerp(o,e/l)}// construct all of the faces
for(let e=0;e<r;e++)for(let t=0;t<2*(r-e)-1;t++){let i=Math.floor(t/2);t%2==0?(s(a[e][i+1]),s(a[e+1][i]),s(a[e][i])):(s(a[e][i+1]),s(a[e+1][i+1]),s(a[e+1][i]))}}(i,n,r,e)})(n),// all vertices should lie on a conceptual sphere with a given radius
function(e){let t=new ei;// iterate over the entire buffer and apply the radius to each vertex
for(let i=0;i<r.length;i+=3)t.x=r[i+0],t.y=r[i+1],t.z=r[i+2],t.normalize().multiplyScalar(e),r[i+0]=t.x,r[i+1]=t.y,r[i+2]=t.z}(i),// finally, create the uv data
function(){let e=new ei;for(let t=0;t<r.length;t+=3){e.x=r[t+0],e.y=r[t+1],e.z=r[t+2];let i=h(e)/2/Math.PI+.5,n=Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5;a.push(i,1-n)}(function(){let e=new ei,t=new ei,i=new ei,n=new ei,s=new P,o=new P,c=new P;for(let u=0,d=0;u<r.length;u+=9,d+=6){e.set(r[u+0],r[u+1],r[u+2]),t.set(r[u+3],r[u+4],r[u+5]),i.set(r[u+6],r[u+7],r[u+8]),s.set(a[d+0],a[d+1]),o.set(a[d+2],a[d+3]),c.set(a[d+4],a[d+5]),n.copy(e).add(t).add(i).divideScalar(3);let p=h(n);l(s,d+0,e,p),l(o,d+2,t,p),l(c,d+4,i,p)}})(),function(){// handle case when face straddles the seam, see #3269
for(let e=0;e<a.length;e+=6){// uv data of a single face
let t=a[e+0],i=a[e+2],n=a[e+4],r=Math.max(t,i,n),s=Math.min(t,i,n);// 0.9 is somewhat arbitrary
r>.9&&s<.1&&(t<.2&&(a[e+0]+=1),i<.2&&(a[e+2]+=1),n<.2&&(a[e+4]+=1))}}()}(),// build non-indexed geometry
this.setAttribute("position",new tx(r,3)),this.setAttribute("normal",new tx(r.slice(),3)),this.setAttribute("uv",new tx(a,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new rW(e.vertices,e.indices,e.radius,e.details)}}class rX extends rW{constructor(e=1,t=0){let i=(1+Math.sqrt(5))/2,n=1/i,r=[// (±1, ±1, ±1)
-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,// (0, ±1/φ, ±φ)
0,-n,-i,0,-n,i,0,n,-i,0,n,i,// (±1/φ, ±φ, 0)
-n,-i,0,-n,i,0,n,-i,0,n,i,0,// (±φ, 0, ±1/φ)
-i,0,-n,i,0,-n,-i,0,n,i,0,n];super(r,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new rX(e.radius,e.detail)}}class rj extends rz{constructor(e){super(e),this.uuid=T(),this.type="Shape",this.holes=[]}getPointsHoles(e){let t=[];for(let i=0,n=this.holes.length;i<n;i++)t[i]=this.holes[i].getPoints(e);return t}// get points of shape and holes (keypoints based on segments parameter)
extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){let i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){let e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,i=this.holes.length;t<i;t++){let i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){let i=e.holes[t];this.holes.push(new rz().fromJSON(i))}return this}}/**
 * Port from https://github.com/mapbox/earcut (v2.2.4)
 */const rY={triangulate:function(e,t,i=2){let n,r,a,s,o,l,h;let c=t&&t.length,u=c?t[0]*i:e.length,d=rZ(e,0,u,i,!0),p=[];if(!d||d.next===d.prev)return p;// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
if(c&&(d=// link every hole into the outer loop, producing a single-ring polygon without holes
function(e,t,i,n){let r,a,s,o,l;let h=[];for(r=0,a=t.length;r<a;r++)s=t[r]*n,o=r<a-1?t[r+1]*n:e.length,(l=rZ(e,s,o,n,!1))===l.next&&(l.steiner=!0),h.push(// find the leftmost node of a polygon ring
function(e){let t=e,i=e;do(t.x<i.x||t.x===i.x&&t.y<i.y)&&(i=t),t=t.next;while(t!==e)return i}(l));// process holes from left to right
for(h.sort(rJ),r=0;r<h.length;r++)i=// find a bridge between vertices that connects hole with an outer ring and link it
function(e,t){let i=// David Eberly's algorithm for finding a bridge between hole and outer polygon
function(e,t){let i=t,n=-1/0,r,a=e.x,s=e.y;// find a segment intersected by a ray from the hole's leftmost point to the left;
// segment's endpoint with lesser x will be potential connection point
do{if(s<=i.y&&s>=i.next.y&&i.next.y!==i.y){let e=i.x+(s-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(e<=a&&e>n&&(n=e,r=i.x<i.next.x?i:i.next,e===a))return r;// hole touches outer segment; pick leftmost endpoint
}i=i.next}while(i!==t)if(!r)return null;// look for points inside the triangle of hole point, segment intersection and endpoint;
// if there are no points found, we have a valid connection;
// otherwise choose the point of the minimum angle with the ray as connection point
let o=r,l=r.x,h=r.y,c=1/0,u;i=r;do{var d,p;a>=i.x&&i.x>=l&&a!==i.x&&r$(s<h?a:n,s,l,h,s<h?n:a,s,i.x,i.y)&&(u=Math.abs(s-i.y)/(a-i.x),r4(i,e)&&(u<c||u===c&&(i.x>r.x||i.x===r.x&&(d=r,p=i,0>r0(d.prev,d,p.prev)&&0>r0(p.next,d,d.next))))&&(r=i,c=u)),i=i.next}while(i!==o)return r}(e,t);if(!i)return t;let n=r6(i,e);return(// filter collinear points around the cuts
rQ(n,n.next),rQ(i,i.next))}(h[r],i);return i}(e,t,d,i)),e.length>80*i){n=a=e[0],r=s=e[1];for(let t=i;t<u;t+=i)o=e[t],l=e[t+1],o<n&&(n=o),l<r&&(r=l),o>a&&(a=o),l>s&&(s=l);h=0!==// minX, minY and invSize are later used to transform coords into integers for z-order calculation
(h=Math.max(a-n,s-r))?32767/h:0}return(// main ear slicing loop which triangulates a polygon (given as a linked list)
function e(t,i,n,r,a,s,o){if(!t)return;// interlink polygon nodes in z-order
!o&&s&&// interlink polygon nodes in z-order
function(e,t,i,n){let r=e;do 0===r.z&&(r.z=rK(r.x,r.y,t,i,n)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next;while(r!==e)r.prevZ.nextZ=null,r.prevZ=null,// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function(e){let t,i,n,r,a,s,o,l,h=1;do{for(i=e,e=null,a=null,s=0;i;){for(s++,n=i,o=0,t=0;t<h&&(o++,n=n.nextZ);t++);for(l=h;o>0||l>0&&n;)0!==o&&(0===l||!n||i.z<=n.z)?(r=i,i=i.nextZ,o--):(r=n,n=n.nextZ,l--),a?a.nextZ=r:e=r,r.prevZ=a,a=r;i=n}a.nextZ=null,h*=2}while(s>1)}(r)}(t,r,a,s);let l=t,h,c;// iterate through ears, slicing them one by one
for(;t.prev!==t.next;){if(h=t.prev,c=t.next,s?function(e,t,i,n){let r=e.prev,a=e.next;if(r0(r,e,a)>=0)return!1;// reflex, can't be an ear
let s=r.x,o=e.x,l=a.x,h=r.y,c=e.y,u=a.y,d=s<o?s<l?s:l:o<l?o:l,p=h<c?h<u?h:u:c<u?c:u,m=s>o?s>l?s:l:o>l?o:l,f=h>c?h>u?h:u:c>u?c:u,g=rK(d,p,t,i,n),_=rK(m,f,t,i,n),v=e.prevZ,y=e.nextZ;// look for points inside the triangle in both directions
for(;v&&v.z>=g&&y&&y.z<=_;){if(v.x>=d&&v.x<=m&&v.y>=p&&v.y<=f&&v!==r&&v!==a&&r$(s,h,o,c,l,u,v.x,v.y)&&r0(v.prev,v,v.next)>=0||(v=v.prevZ,y.x>=d&&y.x<=m&&y.y>=p&&y.y<=f&&y!==r&&y!==a&&r$(s,h,o,c,l,u,y.x,y.y)&&r0(y.prev,y,y.next)>=0))return!1;y=y.nextZ}// look for remaining points in decreasing z-order
for(;v&&v.z>=g;){if(v.x>=d&&v.x<=m&&v.y>=p&&v.y<=f&&v!==r&&v!==a&&r$(s,h,o,c,l,u,v.x,v.y)&&r0(v.prev,v,v.next)>=0)return!1;v=v.prevZ}// look for remaining points in increasing z-order
for(;y&&y.z<=_;){if(y.x>=d&&y.x<=m&&y.y>=p&&y.y<=f&&y!==r&&y!==a&&r$(s,h,o,c,l,u,y.x,y.y)&&r0(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}(t,r,a,s):// check whether a polygon node forms a valid ear with adjacent nodes
function(e){let t=e.prev,i=e.next;if(r0(t,e,i)>=0)return!1;// reflex, can't be an ear
// now make sure we don't have other points inside the potential ear
let n=t.x,r=e.x,a=i.x,s=t.y,o=e.y,l=i.y,h=n<r?n<a?n:a:r<a?r:a,c=s<o?s<l?s:l:o<l?o:l,u=n>r?n>a?n:a:r>a?r:a,d=s>o?s>l?s:l:o>l?o:l,p=i.next;for(;p!==t;){if(p.x>=h&&p.x<=u&&p.y>=c&&p.y<=d&&r$(n,s,r,o,a,l,p.x,p.y)&&r0(p.prev,p,p.next)>=0)return!1;p=p.next}return!0}(t)){// cut off the triangle
i.push(h.i/n|0),i.push(t.i/n|0),i.push(c.i/n|0),r8(t),// skipping the next vertex leads to less sliver triangles
t=c.next,l=c.next;continue}// if we looped through the whole remaining polygon and can't find any more ears
if((t=c)===l){// try filtering points and slicing again
o?1===o?e(t=// go through all polygon nodes and cure small local self-intersections
function(e,t,i){let n=e;do{let r=n.prev,a=n.next.next;!r1(r,a)&&r2(r,n,n.next,a)&&r4(r,a)&&r4(a,r)&&(t.push(r.i/i|0),t.push(n.i/i|0),t.push(a.i/i|0),// remove two nodes involved
r8(n),r8(n.next),n=e=a),n=n.next}while(n!==e)return rQ(n)}(rQ(t),i,n),i,n,r,a,s,2):2===o&&// try splitting polygon into two and triangulate them independently
function(t,i,n,r,a,s){// look for a valid diagonal that divides the polygon into two
let o=t;do{let t=o.next.next;for(;t!==o.prev;){var l,h;if(o.i!==t.i&&(l=o,h=t,l.next.i!==h.i&&l.prev.i!==h.i&&!// check if a polygon diagonal intersects any polygon segments
function(e,t){let i=e;do{if(i.i!==e.i&&i.next.i!==e.i&&i.i!==t.i&&i.next.i!==t.i&&r2(i,i.next,e,t))return!0;i=i.next}while(i!==e)return!1}(l,h)&&// dones't intersect other edges
(r4(l,h)&&r4(h,l)&&// check if the middle point of a polygon diagonal is inside the polygon
function(e,t){let i=e,n=!1,r=(e.x+t.x)/2,a=(e.y+t.y)/2;do i.y>a!=i.next.y>a&&i.next.y!==i.y&&r<(i.next.x-i.x)*(a-i.y)/(i.next.y-i.y)+i.x&&(n=!n),i=i.next;while(i!==e)return n}(l,h)&&// locally visible
(r0(l.prev,l,h.prev)||r0(l,h.prev,h))||// does not create opposite-facing sectors
r1(l,h)&&r0(l.prev,l,l.next)>0&&r0(h.prev,h,h.next)>0))){// split the polygon in two by the diagonal
let l=r6(o,t);// filter colinear points around the cuts
o=rQ(o,o.next),l=rQ(l,l.next),// run earcut on each half
e(o,i,n,r,a,s,0),e(l,i,n,r,a,s,0);return}t=t.next}o=o.next}while(o!==t)}(t,i,n,r,a,s):e(rQ(t),i,n,r,a,s,1);break}}}(d,p,i,n,r,h,0),p)}};// create a circular doubly linked list from polygon points in the specified winding order
function rZ(e,t,i,n,r){let a,s;if(r===function(e,t,i,n){let r=0;for(let a=t,s=i-n;a<i;a+=n)r+=(e[s]-e[a])*(e[a+1]+e[s+1]),s=a;return r}(e,t,i,n)>0)for(a=t;a<i;a+=n)s=r7(a,e[a],e[a+1],s);else for(a=i-n;a>=t;a-=n)s=r7(a,e[a],e[a+1],s);return s&&r1(s,s.next)&&(r8(s),s=s.next),s}// eliminate colinear or duplicate points
function rQ(e,t){if(!e)return e;t||(t=e);let i=e,n;do if(n=!1,!i.steiner&&(r1(i,i.next)||0===r0(i.prev,i,i.next))){if(r8(i),(i=t=i.prev)===i.next)break;n=!0}else i=i.next;while(n||i!==t)return t}function rJ(e,t){return e.x-t.x}// z-order of a point given coords and inverse of the longer side of data bbox
function rK(e,t,i,n,r){return(e=((e=((e=((e=(// coords are transformed into non-negative 15-bit integer range
(e=(e-i)*r|0)|e<<8)&16711935)|e<<4)&252645135)|e<<2)&858993459)|e<<1)&1431655765)|(t=((t=((t=((t=((t=(t-n)*r|0)|t<<8)&16711935)|t<<4)&252645135)|t<<2)&858993459)|t<<1)&1431655765)<<1}// check if a point lies within a convex triangle
function r$(e,t,i,n,r,a,s,o){return(r-s)*(t-o)>=(e-s)*(a-o)&&(e-s)*(n-o)>=(i-s)*(t-o)&&(i-s)*(a-o)>=(r-s)*(n-o)}// signed area of a triangle
function r0(e,t,i){return(t.y-e.y)*(i.x-t.x)-(t.x-e.x)*(i.y-t.y)}// check if two points are equal
function r1(e,t){return e.x===t.x&&e.y===t.y}// check if two segments intersect
function r2(e,t,i,n){let r=r5(r0(e,t,i)),a=r5(r0(e,t,n)),s=r5(r0(i,n,e)),o=r5(r0(i,n,t));return!!(r!==a&&s!==o||0===r&&r3(e,i,t)||0===a&&r3(e,n,t)||0===s&&r3(i,e,n)||0===o&&r3(i,t,n))}// for collinear points p, q, r, check if point q lies on segment pr
function r3(e,t,i){return t.x<=Math.max(e.x,i.x)&&t.x>=Math.min(e.x,i.x)&&t.y<=Math.max(e.y,i.y)&&t.y>=Math.min(e.y,i.y)}function r5(e){return e>0?1:e<0?-1:0}// check if a polygon diagonal is locally inside the polygon
function r4(e,t){return 0>r0(e.prev,e,e.next)?r0(e,t,e.next)>=0&&r0(e,e.prev,t)>=0:0>r0(e,t,e.prev)||0>r0(e,e.next,t)}// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function r6(e,t){let i=new r9(e.i,e.x,e.y),n=new r9(t.i,t.x,t.y),r=e.next,a=t.prev;return e.next=t,t.prev=e,i.next=r,r.prev=i,n.next=i,i.prev=n,a.next=n,n.prev=a,n}// create a node and optionally link it with previous one (in a circular doubly linked list)
function r7(e,t,i,n){let r=new r9(e,t,i);return n?(r.next=n.next,r.prev=n,n.next.prev=r,n.next=r):(r.prev=r,r.next=r),r}function r8(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function r9(e,t,i){// vertex index in coordinates array
this.i=e,// vertex coordinates
this.x=t,this.y=i,// previous and next vertex nodes in a polygon ring
this.prev=null,this.next=null,// z-order curve value
this.z=0,// previous and next nodes in z-order
this.prevZ=null,this.nextZ=null,// indicates whether this is a steiner point
this.steiner=!1}class ae{// calculate area of the contour polygon
static area(e){let t=e.length,i=0;for(let n=t-1,r=0;r<t;n=r++)i+=e[n].x*e[r].y-e[r].x*e[n].y;return .5*i}static isClockWise(e){return 0>ae.area(e)}static triangulateShape(e,t){let i=[],n=[],r=[];// flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
at(e),ai(i,e);//
let a=e.length;t.forEach(at);for(let e=0;e<t.length;e++)n.push(a),a+=t[e].length,ai(i,t[e]);//
let s=rY.triangulate(i,n);//
for(let e=0;e<s.length;e+=3)r.push(s.slice(e,e+3));return r}}function at(e){let t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function ai(e,t){for(let i=0;i<t.length;i++)e.push(t[i].x),e.push(t[i].y)}/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */class an extends tR{constructor(e=new rj([new P(.5,.5),new P(-.5,.5),new P(-.5,-.5),new P(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];let i=this,n=[],r=[];for(let a=0,s=e.length;a<s;a++){let s=e[a];!// functions
function(e){let a,s,o,l;let h=[],c=void 0!==t.curveSegments?t.curveSegments:12,u=void 0!==t.steps?t.steps:1,d=void 0!==t.depth?t.depth:1,p=void 0===t.bevelEnabled||t.bevelEnabled,m=void 0!==t.bevelThickness?t.bevelThickness:.2,f=void 0!==t.bevelSize?t.bevelSize:m-.1,g=void 0!==t.bevelOffset?t.bevelOffset:0,_=void 0!==t.bevelSegments?t.bevelSegments:3,v=t.extrudePath,y=void 0!==t.UVGenerator?t.UVGenerator:ar,x,M=!1;v&&(x=v.getSpacedPoints(u),M=!0,p=!1,// SETUP TNB variables
// TODO1 - have a .isClosed in spline?
a=v.computeFrenetFrames(u,!1),// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
s=new ei,o=new ei,l=new ei),p||(_=0,m=0,f=0,g=0);// Variables initialization
let b=e.extractPoints(c),S=b.shape,E=b.holes,T=!ae.isClockWise(S);if(T){S=S.reverse();// Maybe we should also check if holes are in the opposite direction, just to be safe ...
for(let e=0,t=E.length;e<t;e++){let t=E[e];ae.isClockWise(t)&&(E[e]=t.reverse())}}let w=ae.triangulateShape(S,E),A=S;for(let e=0,t=E.length;e<t;e++){let t=E[e];S=S.concat(t)}function R(e,t,i){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().addScaledVector(t,i)}let L=S.length,C=w.length;// Find directions for point movement
function I(e,t,i){let n,r,a;// good reading for geometry algorithms (here: line-line intersection)
// http://geomalgorithms.com/a05-_intersect-1.html
let s=e.x-t.x,o=e.y-t.y,l=i.x-e.x,h=i.y-e.y,c=s*s+o*o,u=s*h-o*l;if(Math.abs(u)>Number.EPSILON){// not collinear
// length of vectors for normalizing
let u=Math.sqrt(c),d=Math.sqrt(l*l+h*h),p=t.x-o/u,m=t.y+s/u,f=i.x-h/d,g=i.y+l/d,_=((f-p)*h-(g-m)*l)/(s*h-o*l);// vector from inPt to intersection point
n=p+s*_-e.x,r=m+o*_-e.y;// Don't normalize!, otherwise sharp corners become ugly
//  but prevent crazy spikes
let v=n*n+r*r;if(v<=2)return new P(n,r);a=Math.sqrt(v/2)}else{// handle special case of collinear edges
let e=!1;// assumes: opposite
s>Number.EPSILON?l>Number.EPSILON&&(e=!0):s<-Number.EPSILON?l<-Number.EPSILON&&(e=!0):Math.sign(o)===Math.sign(h)&&(e=!0),e?(// console.log("Warning: lines are a straight sequence");
n=-o,r=s,a=Math.sqrt(c)):(// console.log("Warning: lines are a straight spike");
n=s,r=o,a=Math.sqrt(c/2))}return new P(n/a,r/a)}let O=[];for(let e=0,t=A.length,i=t-1,n=e+1;e<t;e++,i++,n++)i===t&&(i=0),n===t&&(n=0),//  (j)---(i)---(k)
// console.log('i,j,k', i, j , k)
O[e]=I(A[e],A[i],A[n]);let U=[],N,D=O.concat();for(let e=0,t=E.length;e<t;e++){let t=E[e];N=[];for(let e=0,i=t.length,n=i-1,r=e+1;e<i;e++,n++,r++)n===i&&(n=0),r===i&&(r=0),//  (j)---(i)---(k)
N[e]=I(t[e],t[n],t[r]);U.push(N),D=D.concat(N)}// Loop bevelSegments, 1 for the front, 1 for the back
for(let e=0;e<_;e++){//for ( b = bevelSegments; b > 0; b -- ) {
let t=e/_,i=m*Math.cos(t*Math.PI/2),n=f*Math.sin(t*Math.PI/2)+g;// contract shape
for(let e=0,t=A.length;e<t;e++){let t=R(A[e],O[e],n);z(t.x,t.y,-i)}// expand holes
for(let e=0,t=E.length;e<t;e++){let t=E[e];N=U[e];for(let e=0,r=t.length;e<r;e++){let r=R(t[e],N[e],n);z(r.x,r.y,-i)}}}let F=f+g;// Back facing vertices
for(let e=0;e<L;e++){let t=p?R(S[e],D[e],F):S[e];M?(// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
o.copy(a.normals[0]).multiplyScalar(t.x),s.copy(a.binormals[0]).multiplyScalar(t.y),l.copy(x[0]).add(o).add(s),z(l.x,l.y,l.z)):z(t.x,t.y,0)}// Add stepped vertices...
// Including front facing vertices
for(let e=1;e<=u;e++)for(let t=0;t<L;t++){let i=p?R(S[t],D[t],F):S[t];M?(// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
o.copy(a.normals[e]).multiplyScalar(i.x),s.copy(a.binormals[e]).multiplyScalar(i.y),l.copy(x[e]).add(o).add(s),z(l.x,l.y,l.z)):z(i.x,i.y,d/u*e)}// Add bevel segments planes
//for ( b = 1; b <= bevelSegments; b ++ ) {
for(let e=_-1;e>=0;e--){let t=e/_,i=m*Math.cos(t*Math.PI/2),n=f*Math.sin(t*Math.PI/2)+g;// contract shape
for(let e=0,t=A.length;e<t;e++){let t=R(A[e],O[e],n);z(t.x,t.y,d+i)}// expand holes
for(let e=0,t=E.length;e<t;e++){let t=E[e];N=U[e];for(let e=0,r=t.length;e<r;e++){let r=R(t[e],N[e],n);M?z(r.x,r.y+x[u-1].y,x[u-1].x+i):z(r.x,r.y,d+i)}}}function B(e,t){let r=e.length;for(;--r>=0;){let a=r,s=r-1;s<0&&(s=e.length-1);//console.log('b', i,j, i-1, k,vertices.length);
for(let e=0,r=u+2*_;e<r;e++){let r=L*e,o=L*(e+1),l=t+a+r,h=t+s+r,c=t+s+o,u=t+a+o;!function(e,t,r,a){V(e),V(t),V(a),V(t),V(r),V(a);let s=n.length/3,o=y.generateSideWallUV(i,n,s-6,s-3,s-2,s-1);H(o[0]),H(o[1]),H(o[3]),H(o[1]),H(o[2]),H(o[3])}(l,h,c,u)}}}function z(e,t,i){h.push(e),h.push(t),h.push(i)}function k(e,t,r){V(e),V(t),V(r);let a=n.length/3,s=y.generateTopUV(i,n,a-3,a-2,a-1);H(s[0]),H(s[1]),H(s[2])}function V(e){n.push(h[3*e+0]),n.push(h[3*e+1]),n.push(h[3*e+2])}function H(e){r.push(e.x),r.push(e.y)}/* Faces */// Top and bottom faces
/////  Internal functions
(function(){let e=n.length/3;if(p){let e=0*L;// steps + 1
// Bottom faces
for(let t=0;t<C;t++){let i=w[t];k(i[2]+e,i[1]+e,i[0]+e)}e=L*(u+2*_);// Top faces
for(let t=0;t<C;t++){let i=w[t];k(i[0]+e,i[1]+e,i[2]+e)}}else{// Bottom faces
for(let e=0;e<C;e++){let t=w[e];k(t[2],t[1],t[0])}// Top faces
for(let e=0;e<C;e++){let t=w[e];k(t[0]+L*u,t[1]+L*u,t[2]+L*u)}}i.addGroup(e,n.length/3-e,0)})(),// Sides faces
// Create faces for the z-sides of the shape
function(){let e=n.length/3,t=0;B(A,0),t+=A.length;for(let e=0,i=E.length;e<i;e++){let i=E[e];B(i,t),//, true
t+=i.length}i.addGroup(e,n.length/3-e,1)}()}(s)}// build geometry
this.setAttribute("position",new tx(n,3)),this.setAttribute("uv",new tx(r,2)),this.computeVertexNormals()}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){let e=super.toJSON(),t=this.parameters.shapes,i=this.parameters.options;return function(e,t,i){if(i.shapes=[],Array.isArray(e))for(let t=0,n=e.length;t<n;t++){let n=e[t];i.shapes.push(n.uuid)}else i.shapes.push(e.uuid);return i.options=Object.assign({},t),void 0!==t.extrudePath&&(i.options.extrudePath=t.extrudePath.toJSON()),i}(t,i,e)}static fromJSON(e,t){let i=[];for(let n=0,r=e.shapes.length;n<r;n++){let r=t[e.shapes[n]];i.push(r)}let n=e.options.extrudePath;return void 0!==n&&(e.options.extrudePath=new rF[n.type]().fromJSON(n)),new an(i,e.options)}}const ar={generateTopUV:function(e,t,i,n,r){let a=t[3*i],s=t[3*i+1],o=t[3*n],l=t[3*n+1],h=t[3*r],c=t[3*r+1];return[new P(a,s),new P(o,l),new P(h,c)]},generateSideWallUV:function(e,t,i,n,r,a){let s=t[3*i],o=t[3*i+1],l=t[3*i+2],h=t[3*n],c=t[3*n+1],u=t[3*n+2],d=t[3*r],p=t[3*r+1],m=t[3*r+2],f=t[3*a],g=t[3*a+1],_=t[3*a+2];return Math.abs(o-c)<Math.abs(s-h)?[new P(s,1-l),new P(h,1-u),new P(d,1-m),new P(f,1-_)]:[new P(o,1-l),new P(c,1-u),new P(p,1-m),new P(g,1-_)]}};class aa extends rW{constructor(e=1,t=0){let i=(1+Math.sqrt(5))/2,n=[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1];super(n,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new aa(e.radius,e.detail)}}class as extends rW{constructor(e=1,t=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new as(e.radius,e.detail)}}class ao extends tR{constructor(e=.5,t=1,i=32,n=1,r=0,a=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:i,phiSegments:n,thetaStart:r,thetaLength:a},i=Math.max(3,i),n=Math.max(1,n);// buffers
let s=[],o=[],l=[],h=[],c=e,u=(t-e)/n,d=new ei,p=new P;// generate vertices, normals and uvs
for(let e=0;e<=n;e++){for(let e=0;e<=i;e++){// values are generate from the inside of the ring to the outside
let n=r+e/i*a;// vertex
d.x=c*Math.cos(n),d.y=c*Math.sin(n),o.push(d.x,d.y,d.z),// normal
l.push(0,0,1),// uv
p.x=(d.x/t+1)/2,p.y=(d.y/t+1)/2,h.push(p.x,p.y)}// increase the radius for next row of vertices
c+=u}// indices
for(let e=0;e<n;e++){let t=e*(i+1);for(let e=0;e<i;e++){let n=e+t,r=n+i+1,a=n+i+2,o=n+1;// faces
s.push(n,r,o),s.push(r,a,o)}}// build geometry
this.setIndex(s),this.setAttribute("position",new tx(o,3)),this.setAttribute("normal",new tx(l,3)),this.setAttribute("uv",new tx(h,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ao(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class al extends tR{constructor(e=new rj([new P(0,.5),new P(-.5,-.5),new P(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};// buffers
let i=[],n=[],r=[],a=[],s=0,o=0;// allow single and array values for "shapes" parameter
if(!1===Array.isArray(e))l(e);else for(let t=0;t<e.length;t++)l(e[t]),this.addGroup(s,o,t),s+=o,o=0;// helper functions
function l(e){let s=n.length/3,l=e.extractPoints(t),h=l.shape,c=l.holes;// check direction of vertices
!1===ae.isClockWise(h)&&(h=h.reverse());for(let e=0,t=c.length;e<t;e++){let t=c[e];!0===ae.isClockWise(t)&&(c[e]=t.reverse())}let u=ae.triangulateShape(h,c);// join vertices of inner and outer paths to a single array
for(let e=0,t=c.length;e<t;e++){let t=c[e];h=h.concat(t)}// vertices, normals, uvs
for(let e=0,t=h.length;e<t;e++){let t=h[e];n.push(t.x,t.y,0),r.push(0,0,1),a.push(t.x,t.y)}// indices
for(let e=0,t=u.length;e<t;e++){let t=u[e],n=t[0]+s,r=t[1]+s,a=t[2]+s;i.push(n,r,a),o+=3}}// build geometry
this.setIndex(i),this.setAttribute("position",new tx(n,3)),this.setAttribute("normal",new tx(r,3)),this.setAttribute("uv",new tx(a,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){let e=super.toJSON(),t=this.parameters.shapes;return function(e,t){if(t.shapes=[],Array.isArray(e))for(let i=0,n=e.length;i<n;i++){let n=e[i];t.shapes.push(n.uuid)}else t.shapes.push(e.uuid);return t}(t,e)}static fromJSON(e,t){let i=[];for(let n=0,r=e.shapes.length;n<r;n++){let r=t[e.shapes[n]];i.push(r)}return new al(i,e.curveSegments)}}class ah extends tR{constructor(e=1,t=32,i=16,n=0,r=2*Math.PI,a=0,s=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:i,phiStart:n,phiLength:r,thetaStart:a,thetaLength:s},t=Math.max(3,Math.floor(t)),i=Math.max(2,Math.floor(i));let o=Math.min(a+s,Math.PI),l=0,h=[],c=new ei,u=new ei,d=[],p=[],m=[],f=[];// generate vertices, normals and uvs
for(let d=0;d<=i;d++){let g=[],_=d/i,v=0;0===d&&0===a?v=.5/t:d===i&&o===Math.PI&&(v=-.5/t);for(let i=0;i<=t;i++){let o=i/t;// vertex
c.x=-e*Math.cos(n+o*r)*Math.sin(a+_*s),c.y=e*Math.cos(a+_*s),c.z=e*Math.sin(n+o*r)*Math.sin(a+_*s),p.push(c.x,c.y,c.z),// normal
u.copy(c).normalize(),m.push(u.x,u.y,u.z),// uv
f.push(o+v,1-_),g.push(l++)}h.push(g)}// indices
for(let e=0;e<i;e++)for(let n=0;n<t;n++){let t=h[e][n+1],r=h[e][n],s=h[e+1][n],l=h[e+1][n+1];(0!==e||a>0)&&d.push(t,r,l),(e!==i-1||o<Math.PI)&&d.push(r,s,l)}// build geometry
this.setIndex(d),this.setAttribute("position",new tx(p,3)),this.setAttribute("normal",new tx(m,3)),this.setAttribute("uv",new tx(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ah(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class ac extends rW{constructor(e=1,t=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new ac(e.radius,e.detail)}}class au extends tR{constructor(e=1,t=.4,i=12,n=48,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:i,tubularSegments:n,arc:r},i=Math.floor(i),n=Math.floor(n);// buffers
let a=[],s=[],o=[],l=[],h=new ei,c=new ei,u=new ei;// generate vertices, normals and uvs
for(let a=0;a<=i;a++)for(let d=0;d<=n;d++){let p=d/n*r,m=a/i*Math.PI*2;// vertex
c.x=(e+t*Math.cos(m))*Math.cos(p),c.y=(e+t*Math.cos(m))*Math.sin(p),c.z=t*Math.sin(m),s.push(c.x,c.y,c.z),// normal
h.x=e*Math.cos(p),h.y=e*Math.sin(p),u.subVectors(c,h).normalize(),o.push(u.x,u.y,u.z),// uv
l.push(d/n),l.push(a/i)}// generate indices
for(let e=1;e<=i;e++)for(let t=1;t<=n;t++){// indices
let i=(n+1)*e+t-1,r=(n+1)*(e-1)+t-1,s=(n+1)*(e-1)+t,o=(n+1)*e+t;// faces
a.push(i,r,o),a.push(r,s,o)}// build geometry
this.setIndex(a),this.setAttribute("position",new tx(s,3)),this.setAttribute("normal",new tx(o,3)),this.setAttribute("uv",new tx(l,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new au(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class ad extends tR{constructor(e=1,t=.4,i=64,n=8,r=2,a=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:i,radialSegments:n,p:r,q:a},i=Math.floor(i),n=Math.floor(n);// buffers
let s=[],o=[],l=[],h=[],c=new ei,u=new ei,d=new ei,p=new ei,m=new ei,f=new ei,g=new ei;// generate vertices, normals and uvs
for(let s=0;s<=i;++s){// the radian "u" is used to calculate the position on the torus curve of the current tubular segment
let v=s/i*r*Math.PI*2;// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
_(v,r,a,e,d),_(v+.01,r,a,e,p),// calculate orthonormal basis
f.subVectors(p,d),g.addVectors(p,d),m.crossVectors(f,g),g.crossVectors(m,f),// normalize B, N. T can be ignored, we don't use it
m.normalize(),g.normalize();for(let e=0;e<=n;++e){// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
let r=e/n*Math.PI*2,a=-t*Math.cos(r),p=t*Math.sin(r);// now calculate the final vertex position.
// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
c.x=d.x+(a*g.x+p*m.x),c.y=d.y+(a*g.y+p*m.y),c.z=d.z+(a*g.z+p*m.z),o.push(c.x,c.y,c.z),// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
u.subVectors(c,d).normalize(),l.push(u.x,u.y,u.z),// uv
h.push(s/i),h.push(e/n)}}// generate indices
for(let e=1;e<=i;e++)for(let t=1;t<=n;t++){// indices
let i=(n+1)*(e-1)+(t-1),r=(n+1)*e+(t-1),a=(n+1)*e+t,o=(n+1)*(e-1)+t;// faces
s.push(i,r,o),s.push(r,a,o)}// this function calculates the current position on the torus curve
function _(e,t,i,n,r){let a=i/t*e,s=Math.cos(a);r.x=n*(2+s)*.5*Math.cos(e),r.y=n*(2+s)*Math.sin(e)*.5,r.z=n*Math.sin(a)*.5}// build geometry
this.setIndex(s),this.setAttribute("position",new tx(o,3)),this.setAttribute("normal",new tx(l,3)),this.setAttribute("uv",new tx(h,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ad(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class ap extends tR{constructor(e=new rN(new ei(-1,-1,0),new ei(-1,1,0),new ei(1,1,0)),t=64,i=1,n=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:i,radialSegments:n,closed:r};let a=e.computeFrenetFrames(t,r);// expose internals
this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;// helper variables
let s=new ei,o=new ei,l=new P,h=new ei,c=[],u=[],d=[],p=[];function m(r){// we use getPointAt to sample evenly distributed points from the given path
h=e.getPointAt(r/t,h);// retrieve corresponding normal and binormal
let l=a.normals[r],d=a.binormals[r];// generate normals and vertices for the current segment
for(let e=0;e<=n;e++){let t=e/n*Math.PI*2,r=Math.sin(t),a=-Math.cos(t);// normal
o.x=a*l.x+r*d.x,o.y=a*l.y+r*d.y,o.z=a*l.z+r*d.z,o.normalize(),u.push(o.x,o.y,o.z),// vertex
s.x=h.x+i*o.x,s.y=h.y+i*o.y,s.z=h.z+i*o.z,c.push(s.x,s.y,s.z)}}// create buffer data
// functions
(function(){for(let e=0;e<t;e++)m(e);// if the geometry is not closed, generate the last row of vertices and normals
// at the regular position on the given path
//
// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
m(!1===r?t:0),// uvs are generated in a separate function.
// this makes it easy compute correct values for closed geometries
function(){for(let e=0;e<=t;e++)for(let i=0;i<=n;i++)l.x=e/t,l.y=i/n,d.push(l.x,l.y)}(),// finally create faces
function(){for(let e=1;e<=t;e++)for(let t=1;t<=n;t++){let i=(n+1)*(e-1)+(t-1),r=(n+1)*e+(t-1),a=(n+1)*e+t,s=(n+1)*(e-1)+t;// faces
p.push(i,r,s),p.push(r,a,s)}}()})(),// build geometry
this.setIndex(p),this.setAttribute("position",new tx(c,3)),this.setAttribute("normal",new tx(u,3)),this.setAttribute("uv",new tx(d,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){let e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){// This only works for built-in curves (e.g. CatmullRomCurve3).
// User defined curves or instances of CurvePath will not be deserialized.
return new ap(new rF[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class am extends to{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new td(16777215),this.specular=new td(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new td(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new P(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class af extends to{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new td(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new td(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new P(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}// converts an array to a specific type
function ag(e,t,i){return e&&// let 'undefined' and 'null' pass
(i||e.constructor!==t)?"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e):e}/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */class a_{constructor(e,t,i,n){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new t.constructor(i),this.sampleValues=t,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(e){let t=this.parameterPositions,i=this._cachedIndex,n=t[i],r=t[i-1];e:{t:{let a;i:{//- See http://jsperf.com/comparison-to-undefined/3
//- slower code:
//-
//- 				if ( t >= t1 || t1 === undefined ) {
n:if(!(e<n)){for(let a=i+2;;){if(void 0===n){if(e<r)break n;return(// after end
i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1))}if(i===a)break;// this loop
if(r=n,e<(n=t[++i]))break t}// prepare binary search on the right side of the index
a=t.length;break i}//- slower code:
//-					if ( t < t0 || t0 === undefined ) {
if(!(e>=r)){// looping?
let s=t[1];e<s&&(i=2,r=s);// linear reverse scan
for(let a=i-2;;){if(void 0===r)return(// before start
this._cachedIndex=0,this.copySampleValue_(0));if(i===a)break;// this loop
if(n=r,e>=(r=t[--i-1]))break t}// prepare binary search on the left side of the index
a=i,i=0;break i}break e}// linear scan
// binary search
for(;i<a;){let n=i+a>>>1;e<t[n]?a=n:i=n+1}// check boundary cases, again
if(n=t[i],void 0===(r=t[i-1]))return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===n)return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}// seek
this._cachedIndex=i,this.intervalChanged_(i,r,n)}// validate_interval
return this.interpolate_(i,r,e,n)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){// copies a sample value to the result buffer
let t=this.resultBuffer,i=this.sampleValues,n=this.valueSize,r=e*n;for(let e=0;e!==n;++e)t[e]=i[r+e];return t}// Template methods for derived classes:
interpolate_(){throw Error("call to abstract method");// implementations shall return this.resultBuffer
}intervalChanged_(){// empty
}}/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */class av extends a_{constructor(e,t,i,n){super(e,t,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(e,t,i){let n=this.parameterPositions,r=e-2,a=e+1,s=n[r],o=n[a];if(void 0===s)switch(this.getSettings_().endingStart){case 2401:// f'(t0) = 0
r=e,s=2*t-i;break;case 2402:// use the other end of the curve
r=n.length-2,s=t+n[r]-n[r+1];break;default:// f''(t0) = 0 a.k.a. Natural Spline
r=e,s=i}if(void 0===o)switch(this.getSettings_().endingEnd){case 2401:// f'(tN) = 0
a=e,o=2*i-t;break;case 2402:// use the other end of the curve
a=1,o=i+n[1]-n[0];break;default:// f''(tN) = 0, a.k.a. Natural Spline
a=e-1,o=t}let l=(i-t)*.5,h=this.valueSize;this._weightPrev=l/(t-s),this._weightNext=l/(o-i),this._offsetPrev=r*h,this._offsetNext=a*h}interpolate_(e,t,i,n){let r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=e*s,l=o-s,h=this._offsetPrev,c=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(i-t)/(n-t),m=p*p,f=m*p,g=-u*f+2*u*m-u*p,_=(1+u)*f+(-1.5-2*u)*m+(-.5+u)*p+1,v=(-1-d)*f+(1.5+d)*m+.5*p,y=d*f-d*m;// combine data linearly
for(let e=0;e!==s;++e)r[e]=g*a[h+e]+_*a[l+e]+v*a[o+e]+y*a[c+e];return r}}class ay extends a_{constructor(e,t,i,n){super(e,t,i,n)}interpolate_(e,t,i,n){let r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=e*s,l=o-s,h=(i-t)/(n-t),c=1-h;for(let e=0;e!==s;++e)r[e]=a[l+e]*c+a[o+e]*h;return r}}/**
 *
 * Interpolant that evaluates to the sample value at the position preceding
 * the parameter.
 */class ax extends a_{constructor(e,t,i,n){super(e,t,i,n)}interpolate_(e/*, t0, t, t1 */){return this.copySampleValue_(e-1)}}class aM{constructor(e,t,i,n){if(void 0===e)throw Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=ag(t,this.TimeBufferType),this.values=ag(i,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}// Serialization (in static context, because of constructor invocation
// and automatic invocation of .toJSON):
static toJSON(e){let t;let i=e.constructor;// derived classes can define a static toJSON method
if(i.toJSON!==this.toJSON)t=i.toJSON(e);else{// by default, we assume the data can be serialized as-is
t={name:e.name,times:ag(e.times,Array),values:ag(e.values,Array)};let i=e.getInterpolation();i!==e.DefaultInterpolation&&(t.interpolation=i)}return t.type=e.ValueTypeName,t}InterpolantFactoryMethodDiscrete(e){return new ax(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new ay(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new av(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case 2300:t=this.InterpolantFactoryMethodDiscrete;break;case 2301:t=this.InterpolantFactoryMethodLinear;break;case 2302:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){let t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){// fall back to default, unless the default itself is messed up
if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw Error(t);// fatal, in this case
}return console.warn("THREE.KeyframeTrack:",t),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}}getValueSize(){return this.values.length/this.times.length}// move all keyframes either forwards or backwards in time
shift(e){if(0!==e){let t=this.times;for(let i=0,n=t.length;i!==n;++i)t[i]+=e}return this}// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
scale(e){if(1!==e){let t=this.times;for(let i=0,n=t.length;i!==n;++i)t[i]*=e}return this}// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
trim(e,t){let i=this.times,n=i.length,r=0,a=n-1;for(;r!==n&&i[r]<e;)++r;for(;-1!==a&&i[a]>t;)--a;if(++a,0!==r||a!==n){r>=a&&(r=(a=Math.max(a,1))-1);let e=this.getValueSize();this.times=i.slice(r,a),this.values=this.values.slice(r*e,a*e)}return this}// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
validate(){let e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);let i=this.times,n=this.values,r=i.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let a=null;for(let t=0;t!==r;t++){let n=i[t];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,t,n),e=!1;break}if(null!==a&&a>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,t,n,a),e=!1;break}a=n}if(void 0!==n&&ArrayBuffer.isView(n)&&!(n instanceof DataView))for(let t=0,i=n.length;t!==i;++t){let i=n[t];if(isNaN(i)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,t,i),e=!1;break}}return e}// removes equivalent sequential keys as common in morph target sequences
// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
optimize(){// times or values may be shared with other tracks, so overwriting is unsafe
let e=this.times.slice(),t=this.values.slice(),i=this.getValueSize(),n=2302===this.getInterpolation(),r=e.length-1,a=1;for(let s=1;s<r;++s){let r=!1,o=e[s],l=e[s+1];// remove adjacent keyframes scheduled at the same time
if(o!==l&&(1!==s||o!==e[0])){if(n)r=!0;else{// remove unnecessary keyframes same as their neighbors
let e=s*i,n=e-i,a=e+i;for(let s=0;s!==i;++s){let i=t[e+s];if(i!==t[n+s]||i!==t[a+s]){r=!0;break}}}}// in-place compaction
if(r){if(s!==a){e[a]=e[s];let n=s*i,r=a*i;for(let e=0;e!==i;++e)t[r+e]=t[n+e]}++a}}// flush last keyframe (compaction looks ahead)
if(r>0){e[a]=e[r];for(let e=r*i,n=a*i,s=0;s!==i;++s)t[n+s]=t[e+s];++a}return a!==e.length?(this.times=e.slice(0,a),this.values=t.slice(0,a*i)):(this.times=e,this.values=t),this}clone(){let e=this.times.slice(),t=this.values.slice(),i=this.constructor,n=new i(this.name,e,t);return(// Interpolant argument to constructor is not saved, so copy the factory method directly.
n.createInterpolant=this.createInterpolant,n)}}aM.prototype.TimeBufferType=Float32Array,aM.prototype.ValueBufferType=Float32Array,aM.prototype.DefaultInterpolation=2301;/**
 * A Track of Boolean keyframe values.
 */class ab extends aM{}ab.prototype.ValueTypeName="bool",ab.prototype.ValueBufferType=Array,ab.prototype.DefaultInterpolation=2300,ab.prototype.InterpolantFactoryMethodLinear=void 0,ab.prototype.InterpolantFactoryMethodSmooth=void 0,/**
 * A Track of keyframe values that represent color.
 */(class extends aM{}).prototype.ValueTypeName="color",/**
 * A Track of numeric keyframe values.
 */(class extends aM{}).prototype.ValueTypeName="number";/**
 * Spherical linear unit quaternion interpolant.
 */class aS extends a_{constructor(e,t,i,n){super(e,t,i,n)}interpolate_(e,t,i,n){let r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=(i-t)/(n-t),l=e*s;for(let e=l+s;l!==e;l+=4)et.slerpFlat(r,0,a,l-s,a,l,o);return r}}/**
 * A Track of quaternion keyframe values.
 */class aE extends aM{InterpolantFactoryMethodLinear(e){return new aS(this.times,this.values,this.getValueSize(),e)}}aE.prototype.ValueTypeName="quaternion",// ValueBufferType is inherited
aE.prototype.DefaultInterpolation=2301,aE.prototype.InterpolantFactoryMethodSmooth=void 0;/**
 * A Track that interpolates Strings
 */class aT extends aM{}aT.prototype.ValueTypeName="string",aT.prototype.ValueBufferType=Array,aT.prototype.DefaultInterpolation=2300,aT.prototype.InterpolantFactoryMethodLinear=void 0,aT.prototype.InterpolantFactoryMethodSmooth=void 0,/**
 * A Track of vectored keyframe values.
 */(class extends aM{}).prototype.ValueTypeName="vector";const aw={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&// console.log( 'THREE.Cache', 'Adding key:', key );
(this.files[e]=t)},get:function(e){if(!1!==this.enabled)// console.log( 'THREE.Cache', 'Checking key:', key );
return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}},aA=/*@__PURE__*/new class{constructor(e,t,i){let n;let r=this,a=!1,s=0,o=0,l=[];// Refer to #5689 for the reason why we don't set .onStart
// in the constructor
this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=i,this.itemStart=function(e){o++,!1===a&&void 0!==r.onStart&&r.onStart(e,s,o),a=!0},this.itemEnd=function(e){s++,void 0!==r.onProgress&&r.onProgress(e,s,o),s===o&&(a=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(e){void 0!==r.onError&&r.onError(e)},this.resolveURL=function(e){return n?n(e):e},this.setURLModifier=function(e){return n=e,this},this.addHandler=function(e,t){return l.push(e,t),this},this.removeHandler=function(e){let t=l.indexOf(e);return -1!==t&&l.splice(t,2),this},this.getHandler=function(e){for(let t=0,i=l.length;t<i;t+=2){let i=l[t],n=l[t+1];if(i.global&&(i.lastIndex=0),i.test(e))return n}return null}}};class aR{constructor(e){this.manager=void 0!==e?e:aA,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){let i=this;return new Promise(function(n,r){i.load(e,n,t,r)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}aR.DEFAULT_MATERIAL_NAME="__DEFAULT";const aL={};class aC extends Error{constructor(e,t){super(e),this.response=t}}class aP extends aR{constructor(e){super(e)}load(e,t,i,n){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);let r=aw.get(e);if(void 0!==r)return this.manager.itemStart(e),setTimeout(()=>{t&&t(r),this.manager.itemEnd(e)},0),r;// Check if request is duplicate
if(void 0!==aL[e]){aL[e].push({onLoad:t,onProgress:i,onError:n});return}// Initialise array for duplicate requests
aL[e]=[],aL[e].push({onLoad:t,onProgress:i,onError:n});// create request
let a=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),s=this.mimeType,o=this.responseType;// start the fetch
fetch(a).then(t=>{if(200===t.status||0===t.status){// Workaround: Checking if response.body === undefined for Alipay browser #23548
if(0===t.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===t.body||void 0===t.body.getReader)return t;let i=aL[e],n=t.body.getReader(),r=t.headers.get("Content-Length")||t.headers.get("X-File-Size"),a=r?parseInt(r):0,s=0!==a,o=0,l=new ReadableStream({start(e){(function t(){n.read().then(({done:n,value:r})=>{if(n)e.close();else{o+=r.byteLength;let n=new ProgressEvent("progress",{lengthComputable:s,loaded:o,total:a});for(let e=0,t=i.length;e<t;e++){let t=i[e];t.onProgress&&t.onProgress(n)}e.enqueue(r),t()}})})()}});return new Response(l)}throw new aC(`fetch for "${t.url}" responded with ${t.status}: ${t.statusText}`,t)}).then(e=>{switch(o){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"document":return e.text().then(e=>{let t=new DOMParser;return t.parseFromString(e,s)});case"json":return e.json();default:if(void 0===s)return e.text();{let t=/charset="?([^;"\s]*)"?/i.exec(s),i=t&&t[1]?t[1].toLowerCase():void 0,n=new TextDecoder(i);return e.arrayBuffer().then(e=>n.decode(e))}}}).then(t=>{// Add to cache only on HTTP success, so that we do not cache
// error response bodies as proper responses to requests.
aw.add(e,t);let i=aL[e];delete aL[e];for(let e=0,n=i.length;e<n;e++){let n=i[e];n.onLoad&&n.onLoad(t)}}).catch(t=>{// Abort errors and other errors are handled the same
let i=aL[e];if(void 0===i)throw(// When onLoad was called and url was deleted in `loading`
this.manager.itemError(e),t);delete aL[e];for(let e=0,n=i.length;e<n;e++){let n=i[e];n.onError&&n.onError(t)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class aI extends aR{constructor(e){super(e)}load(e,t,i,n){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);let r=this,a=aw.get(e);if(void 0!==a)return r.manager.itemStart(e),setTimeout(function(){t&&t(a),r.manager.itemEnd(e)},0),a;let s=N("img");function o(){h(),aw.add(e,this),t&&t(this),r.manager.itemEnd(e)}function l(t){h(),n&&n(t),r.manager.itemError(e),r.manager.itemEnd(e)}function h(){s.removeEventListener("load",o,!1),s.removeEventListener("error",l,!1)}return s.addEventListener("load",o,!1),s.addEventListener("error",l,!1),"data:"!==e.slice(0,5)&&void 0!==this.crossOrigin&&(s.crossOrigin=this.crossOrigin),r.manager.itemStart(e),s.src=e,s}}class aO extends aR{constructor(e){super(e)}load(e,t,i,n){let r=new t3;r.colorSpace=p;let a=new aI(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);let s=0;for(let i=0;i<e.length;++i)!function(i){a.load(e[i],function(e){r.images[i]=e,6==++s&&(r.needsUpdate=!0,t&&t(r))},void 0,n)}(i);return r}}class aU extends aR{constructor(e){super(e)}load(e,t,i,n){let r=new Q,a=new aI(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(e){r.image=e,r.needsUpdate=!0,void 0!==t&&t(r)},i,n),r}}class aN extends e3{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new td(e),this.intensity=t}dispose(){// Empty here in base class; some subclasses override.
}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){let t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}const aD=/*@__PURE__*/new eI,aF=/*@__PURE__*/new ei,aB=/*@__PURE__*/new ei;class az{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new P(512,512),this.map=null,this.mapPass=null,this.matrix=new eI,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new it,this._frameExtents=new P(1,1),this._viewportCount=1,this._viewports=[new J(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){let t=this.camera,i=this.matrix;aF.setFromMatrixPosition(e.matrixWorld),t.position.copy(aF),aB.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(aB),t.updateMatrixWorld(),aD.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(aD),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(aD)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){let e={};return 0!==this.bias&&(e.bias=this.bias),0!==this.normalBias&&(e.normalBias=this.normalBias),1!==this.radius&&(e.radius=this.radius),(512!==this.mapSize.x||512!==this.mapSize.y)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class ak extends az{constructor(){super(new t1(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){let t=this.camera,i=2*E*e.angle*this.focus,n=this.mapSize.width/this.mapSize.height,r=e.distance||t.far;(i!==t.fov||n!==t.aspect||r!==t.far)&&(t.fov=i,t.aspect=n,t.far=r,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class aV extends aN{constructor(e,t,i=0,n=Math.PI/3,r=0,a=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(e3.DEFAULT_UP),this.updateMatrix(),this.target=new e3,this.distance=i,this.angle=n,this.penumbra=r,this.decay=a,this.map=null,this.shadow=new ak}get power(){// compute the light's luminous power (in lumens) from its intensity (in candela)
// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
return this.intensity*Math.PI}set power(e){// set the light's intensity (in candela) from the desired luminous power (in lumens)
this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class aH extends aN{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class aG{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=aq(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){let t=aq();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function aq(){return("undefined"==typeof performance?Date:performance).now();// see #10732
}// Characters [].:/ are reserved for track binding syntax.
const aW="\\[\\]\\.:\\/",aX=RegExp("["+aW+"]","g"),aj="[^"+aW+"]",aY="[^"+aW.replace("\\.","")+"]",aZ=/*@__PURE__*//((?:WC+[\/:])*)/.source.replace("WC",aj),aQ=/*@__PURE__*//(WCOD+)?/.source.replace("WCOD",aY),aJ=/*@__PURE__*//(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",aj),aK=/*@__PURE__*//\.(WC+)(?:\[(.+)\])?/.source.replace("WC",aj),a$=RegExp("^"+aZ+aQ+aJ+aK+"$"),a0=["material","materials","bones","map"];// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
class a1{constructor(e,t,i){this.path=t,this.parsedPath=i||a1.parseTrackName(t),this.node=a1.findNode(e,this.parsedPath.nodeName),this.rootNode=e,// initial state of these methods that calls 'bind'
this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,i){return e&&e.isAnimationObjectGroup?new a1.Composite(e,t,i):new a1(e,t,i)}/**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(aX,"")}static parseTrackName(e){let t=a$.exec(e);if(null===t)throw Error("PropertyBinding: Cannot parse trackName: "+e);let i={// directoryName: matches[ 1 ], // (tschw) currently unused
nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},n=i.nodeName&&i.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){let e=i.nodeName.substring(n+1);// Object names must be checked against an allowlist. Otherwise, there
// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
// 'bar' could be the objectName, or part of a nodeName (which can
// include '.' characters).
-1!==a0.indexOf(e)&&(i.nodeName=i.nodeName.substring(0,n),i.objectName=e)}if(null===i.propertyName||0===i.propertyName.length)throw Error("PropertyBinding: can not parse propertyName from trackName: "+e);return i}static findNode(e,t){if(void 0===t||""===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;// search into skeleton bones.
if(e.skeleton){let i=e.skeleton.getBoneByName(t);if(void 0!==i)return i}// search into node subtree.
if(e.children){let i=function(e){for(let n=0;n<e.length;n++){let r=e[n];if(r.name===t||r.uuid===t)return r;let a=i(r.children);if(a)return a}return null},n=i(e.children);if(n)return n}return null}// these are used to "bind" a nonexistent property
_getValue_unavailable(){}_setValue_unavailable(){}// Getters
_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){let i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)e[t++]=i[n]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}// Direct
_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}// EntireArray
_setValue_array(e,t){let i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=e[t++]}_setValue_array_setNeedsUpdate(e,t){let i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){let i=this.resolvedProperty;for(let n=0,r=i.length;n!==r;++n)i[n]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}// ArrayElement
_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}// HasToFromArray
_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}// create getter / setter pair for a property in the scene graph
bind(){let e=this.node,t=this.parsedPath,i=t.objectName,n=t.propertyName,r=t.propertyIndex;// ensure there is a value node
if(e||(e=a1.findNode(this.rootNode,t.nodeName),this.node=e),// set fail state so we can just 'return' on error
this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(i){let n=t.objectIndex;// special cases were we need to reach deeper into the hierarchy to get the face materials....
switch(i){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}// potential future optimization: skip this if propertyIndex is already an integer
// and convert the integer string to a true integer.
e=e.skeleton.bones;// support resolving morphTarget names into indices.
for(let t=0;t<e.length;t++)if(e[t].name===n){n=t;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(void 0===e[i]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[i]}if(void 0!==n){if(void 0===e[n]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[n]}}// resolve property
let a=e[n];if(void 0===a){let i=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+i+"."+n+" but it wasn't found.",e);return}// determine versioning scheme
let s=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?s=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(s=this.Versioning.MatrixWorldNeedsUpdate);// determine how the property gets bound
let o=this.BindingType.Direct;if(void 0!==r){// access a sub element of the property array (only primitives are supported right now)
if("morphTargetInfluences"===n){// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
// support resolving morphTarget names into indices.
if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}void 0!==e.morphTargetDictionary[r]&&(r=e.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else void 0!==a.fromArray&&void 0!==a.toArray?(// must use copy for Object3D.Euler/Quaternion
o=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(o=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=n;// select getter / setter
this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][s]}unbind(){this.node=null,// back to the prototype version of getValue / setValue
// note: avoiding to mutate the shape of 'this' via 'delete'
this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}a1.Composite=class{constructor(e,t,i){let n=i||a1.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,n)}getValue(e,t){this.bind();// bind all binding
let i=this._targetGroup.nCachedObjects_,n=this._bindings[i];// and only call .getValue on the first
void 0!==n&&n.getValue(e,t)}setValue(e,t){let i=this._bindings;for(let n=this._targetGroup.nCachedObjects_,r=i.length;n!==r;++n)i[n].setValue(e,t)}bind(){let e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].bind()}unbind(){let e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].unbind()}},a1.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},a1.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},a1.prototype.GetterByBindingType=[a1.prototype._getValue_direct,a1.prototype._getValue_array,a1.prototype._getValue_arrayElement,a1.prototype._getValue_toArray],a1.prototype.SetterByBindingTypeAndVersioning=[[// Direct
a1.prototype._setValue_direct,a1.prototype._setValue_direct_setNeedsUpdate,a1.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[// EntireArray
a1.prototype._setValue_array,a1.prototype._setValue_array_setNeedsUpdate,a1.prototype._setValue_array_setMatrixWorldNeedsUpdate],[// ArrayElement
a1.prototype._setValue_arrayElement,a1.prototype._setValue_arrayElement_setNeedsUpdate,a1.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[// HasToFromArray
a1.prototype._setValue_fromArray,a1.prototype._setValue_fromArray_setNeedsUpdate,a1.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]],new Float32Array(1);/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */class a2{constructor(e=1,t=0,i=0){return this.radius=e,this.phi=t,this.theta=i,this}set(e,t,i){return this.radius=e,this.phi=t,this.theta=i,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}// restrict phi to be between EPS and PI-EPS
makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,i){return this.radius=Math.sqrt(e*e+t*t+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,i),this.phi=Math.acos(w(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class a3{constructor(){this.type="ShapePath",this.color=new td,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new rz,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,i,n){return this.currentPath.quadraticCurveTo(e,t,i,n),this}bezierCurveTo(e,t,i,n,r,a){return this.currentPath.bezierCurveTo(e,t,i,n,r,a),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){let t,i,n,r,a;let s=ae.isClockWise,o=this.subPaths;if(0===o.length)return[];let l=[];if(1===o.length)return i=o[0],(n=new rj).curves=i.curves,l.push(n),l;let h=!s(o[0].getPoints());h=e?!h:h;// console.log("Holes first", holesFirst);
let c=[],u=[],d=[],p=0;u[0]=void 0,d[p]=[];for(let n=0,a=o.length;n<a;n++)t=s(r=(i=o[n]).getPoints()),(t=e?!t:t)?(!h&&u[p]&&p++,u[p]={s:new rj,p:r},u[p].s.curves=i.curves,h&&p++,d[p]=[]):d[p].push({h:i,p:r[0]});// only Holes? -> probably all Shapes with wrong orientation
if(!u[0])return function(e){let t=[];for(let i=0,n=e.length;i<n;i++){let n=e[i],r=new rj;r.curves=n.curves,t.push(r)}return t}(o);if(u.length>1){let e=!1,t=0;for(let e=0,t=u.length;e<t;e++)c[e]=[];for(let i=0,n=u.length;i<n;i++){let n=d[i];for(let r=0;r<n.length;r++){let a=n[r],s=!0;for(let n=0;n<u.length;n++)(function(e,t){let i=t.length,n=!1;for(let r=i-1,a=0;a<i;r=a++){let i=t[r],s=t[a],o=s.x-i.x,l=s.y-i.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(i=t[a],o=-o,s=t[r],l=-l),e.y<i.y||e.y>s.y)continue;if(e.y===i.y){if(e.x===i.x)return!0;// inPt is on contour ?
}else{let t=l*(e.x-i.x)-o*(e.y-i.y);if(0===t)return!0;// inPt is on contour ?
if(t<0)continue;n=!n;// true intersection left of inPt
}}else{// parallel or collinear
if(e.y!==i.y)continue;// parallel
// edge lies on the same horizontal line as inPt
if(s.x<=e.x&&e.x<=i.x||i.x<=e.x&&e.x<=s.x)return!0;// inPt: Point on contour !
// continue;
}}return n})(a.p,u[n].p)&&(i!==n&&t++,s?(s=!1,c[n].push(a)):e=!0);s&&c[i].push(a)}}t>0&&!1===e&&(d=c)}for(let e=0,t=u.length;e<t;e++){n=u[e].s,l.push(n),a=d[e];for(let e=0,t=a.length;e<t;e++)n.holes.push(a[e].h)}//console.log("shape", shapes);
return l}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"157"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="157");var a5=class{constructor(){this._torqueOption=1,// torque options
// 1 = no torque
// 2 = space frame torque
// 3 = body frame torque
// 4 = acs stabilization
// 5 = gravity gradient torque
// 6 = torque on a top
this._torque=new ei(0,0,0),// space frame and body frame torque variables
this._constantTorque=new ei(0,0,0),//_constantTorque is set by the user either through the setConstantTorque or
//the setTorque function.
// ACS torque variables
this._acsDeadzoneOmega=0,this._acsTorque=0,// gravity gradient torque variables
this._inertiaMatrix=new I,this._dcm=new eI,// the reason that _dcm (direction cosine matrix) is a Matrix4 and
// not a Matrix3 is because the THREE function makeRotationFromQuaternion
// exists only for Matrix4. Convert it to a 3x3 matrix using the THREE 
// function setFromMatrix4.
this._T=0,this._3muOverR3=1,this._ggE0=0,// spinning top torque variables
this._topRDistance=1,this._mass=1,this._topGravity=1,// ACS and gravity gradient torque variables
this._omega=new ei(0,0,0),// space frame, gravity gradient, and spinning top torque variables
this._quat=new et,// gravity gradient and spinning top torque variables
this._axesOrientation="Z Down",// miscellaneous utility variables
this._nullVector=new ei(0,0,0),this._xUnitVector=new ei(1,0,0),this._yUnitVector=new ei(0,1,0),this._zUnitVector=new ei(0,0,1),this._q0=new et,this._v0=new ei,this._v1=new ei,this._v2=new ei,this._mat0=new I,this._mat1=new I}sendTorqueData(){return[this._torque.x,this._torque.y,this._torque.z,this._omega.x,this._omega.y,this._omega.z]}receiveTorqueData(e,t,i,n,r,a,s,o,l,h,c,u,d,p,m,f,g,_,v,y,x){this._torque.x=e,this._torque.y=t,this._torque.z=i,this._torqueOption=n,this._omega.x=r,this._omega.y=a,this._omega.z=s,this._quat._w=o,this._quat._x=l,this._quat._y=h,this._quat._z=c,this._dcm.elements[0]=u,this._dcm.elements[1]=d,this._dcm.elements[2]=p,this._dcm.elements[4]=m,this._dcm.elements[5]=f,this._dcm.elements[6]=g,this._dcm.elements[8]=_,this._dcm.elements[9]=v,this._dcm.elements[10]=y,this._T=x}setAxesOrientation(e){this._axesOrientation=e}doTorque(){switch(this._torqueOption){case 1:// 1 = no torque
this._torque.copy(this._nullVector);break;case 2:// 2 = space frame torque
// _constantTorque is expressed in the space frame here
// so we need to rotate it into the body frame
this._torque.copy(this._constantTorque),this._q0.copy(this._quat),this._q0.invert(),this._torque.applyQuaternion(this._q0);break;case 3:// 3 = body frame torque
this._torque.copy(this._constantTorque);break;case 4:// 4 = acs stabilization
// an ACS (attitude control system) is imagined to exist on
// the object.  The ACS consists of thrusters that impart
// a force couple about each of the body axes.  If the
// magnitude of a component of omega (P, Q, or R) in one direction 
// is larger than the "dead zone" value, then a torque is
// applied to reduce the magnitude of that component.  The final
// orientation is not considered.  A real controller would probably have
// to compute omega based on Euler angle rates or quaternion rates,
// or it might not compute omega at all.
let e=this._acsDeadzoneOmega,t=this._acsTorque;this._torque.x=0,this._torque.y=0,this._torque.z=0,this._omega.x>e?this._torque.x=-t:this._omega.x<-e&&(this._torque.x=t),this._omega.y>e?this._torque.y=-t:this._omega.y<-e&&(this._torque.y=t),this._omega.z>e?this._torque.z=-t:this._omega.z<-e&&(this._torque.z=t);break;case 5:let i,n,r;switch(this._axesOrientation){case"X Up":case"X Down":i=this._dcm.elements[0],n=this._dcm.elements[4],r=this._dcm.elements[8];break;case"Y Up":case"Y Down":i=this._dcm.elements[1],n=this._dcm.elements[5],r=this._dcm.elements[9];break;case"Z Up":case"Z Down":i=this._dcm.elements[2],n=this._dcm.elements[6],r=this._dcm.elements[10]}let a=this._inertiaMatrix.elements,s=a[0],o=a[4],l=a[8];// torque due to gravity gradient
this._torque.x=this._3muOverR3*n*r*(l-o),this._torque.y=this._3muOverR3*r*i*(s-l),this._torque.z=this._3muOverR3*i*n*(o-s);// For the gravity gradient torque, the rotational kinetic engergy 
// plus the gravitational potential energy must remain constant.  
// For torqued motion, the _omega vector drifts slightly due to 
// computational errors.  We adjust this vector here to maintain a 
// constant total energy.  _ggE0 is the total energy, and is set in
// the refreshGG() function.  ke0 is what the rotational kinetic energy 
// should be based on _ggE0 and the computed current potential energy.
let h=this.computeGravityGradientPotential(),c=this._ggE0-h;if(c){// console.log('_ggE0,',this._ggE0,' ,pe,',pe,
//   ' ,T,',this._T,',Ixx,',this._inertiaMatrix.elements[0],
//   ',Iyy,',this._inertiaMatrix.elements[4],',Izz,',this._inertiaMatrix.elements[8],
//   'P',this._omega.x,'Q',this._omega.y,'R',this._omega.z);
// Compute the current rotational kinetic energy, knowing that the
// _omega vector is in error.  The total kinetic energy is just the sum
// of the kinetic energy for each of the 3 body axes.  We compute this, 
// divide by what it should be, and adjust _omega based on this ratio.
let e=.5*this._inertiaMatrix.elements[0]*this._omega.x*this._omega.x,t=.5*this._inertiaMatrix.elements[4]*this._omega.y*this._omega.y,i=.5*this._inertiaMatrix.elements[8]*this._omega.z*this._omega.z;if(e+t+i!==0){let n=(e+t+i)/c;// don't try to correct it if it is too wildly off
n>.995&&n<1.005&&(this._omega.x/=n,this._omega.y/=n,this._omega.z/=n)}}break;case 6:// _torque is set here to the r in rXf.  The cross product happens later.
switch(// 6 = torque on a spinning top
// This option computes the torque that would occur if a
// force were applied along the x body vector a distance of
// "_topRDistance" from the center of mass with the force direction
// in the "up" direction for whatever it is set to be.  For a real
// spinning top, this would be where the point of the top is.
// This program does not currently display a table top nor does
// it force the 3D model to look like a top.  In fact, the object
// does not even have to spin!
// To use this option effectively, set the omega vector to point
// along or nearly along the X body direction.  Set the orientation
// however you like.  The torque vector should remain in a plane
// perpendicular to the "up" and "down" directions.  The angular momentum
// vector should chase the torque vector around the object.
this._torque.copy(this._xUnitVector),this._torque.multiplyScalar(this._topRDistance),this._axesOrientation){case"X Up":this._v1.copy(this._xUnitVector);break;case"X Down":this._v1.copy(this._xUnitVector),this._v1.multiplyScalar(-1);break;case"Y Up":this._v1.copy(this._yUnitVector);break;case"Y Down":this._v1.copy(this._yUnitVector),this._v1.multiplyScalar(-1);break;case"Z Up":this._v1.copy(this._zUnitVector);break;case"Z Down":this._v1.copy(this._zUnitVector),this._v1.multiplyScalar(-1)}this._v1.multiplyScalar(this._topGravity),this._v1.multiplyScalar(this._mass),this._q0.copy(this._quat),this._q0.invert(),this._v1.applyQuaternion(this._q0),// _v1 is now the f in rXf
this._torque.cross(this._v1)}}/**
   space frame and body frame torque functions
  **/setTorque(e,t,i,n,r){if(2===e||3===e){let e=new ei(i,n,r);e.normalize(),e.multiplyScalar(t),this._torque.copy(e),this._constantTorque.copy(this._torque)}this._torqueOption=e,this.doTorque()}setConstantTorque(e,t,i){this._constantTorque.set(e,t,i)}nullTorque(){this._torque.copy(this._nullVector)}/**
   ACS torque functions
  **/setACSDeadzoneOmega(e){this._acsDeadzoneOmega=Number(e)}setACSTorque(e){this._acsTorque=Number(e)}/**
  gravity gradient torque functions
  **/setInertiaMatrix(e,t,i,n=0){this._inertiaMatrix.set(e,0,-n,0,t,0,-n,0,i),this.refreshGG()}set3MuOverR3(e){this._3muOverR3=Number(e),this.refreshGG()}refreshGG(){this._dcm.makeRotationFromQuaternion(this._quat),this._v0.copy(this._omega),this._v0.applyMatrix3(this._inertiaMatrix),this._T=.5*this._v0.dot(this._omega);let e=this.computeGravityGradientPotential();this._ggE0=this._T+e}computeGravityGradientPotential(){let e;// See "Spacecraft Dynamics", T. Kane et al, 1983 McGraw Hill, p. 134.
// They define V as mu * m / R * (1 + sum) + C,
// where sum is (tr(I) - 3*I11) / (2mR^2) plus higher order terms and
// C is an arbitrary constant.  I11 is the moment of inertia about
// a vector from the planet to the body.  For them it was the X moment
// of inertia, but we choose X, Y or Z.  V is basically the potential
// energy stored in the body due to the fact that its attitude is not in
// the lowest energy state for the gravity gradient.
// We simplify the equation to just V = _3muOverR3 / 6 * (tr(I) - 3*I11).
// Also, we do not take the centrifugal effect into account (see above).
let t=this._inertiaMatrix.elements[0]+this._inertiaMatrix.elements[4]+this._inertiaMatrix.elements[8];switch(this._mat0.setFromMatrix4(this._dcm),this._mat1.copy(this._mat0),this._mat1.transpose(),this._mat0.multiply(this._inertiaMatrix),this._mat0.multiply(this._mat1),this._axesOrientation){case"X Up":case"X Down":e=this._mat0.elements[0];break;case"Y Up":case"Y Down":e=this._mat0.elements[4];break;case"Z Up":case"Z Down":e=this._mat0.elements[8]}return-(this._3muOverR3/6*(t-3*e))}/**
   spinning top torque functions
   **/setTopRDistance(e){this._topRDistance=Number(e)}setMass(e){this._mass=Number(e)}setTopGravity(e){this._topGravity=Number(e)}};/**
 SixDOFObject is a class that encapsulates the computation of the 
 rotational dynamics of a brick-shaped THREE.js object representing
 a rigid body.  Although the term six DOF stands for 6 degrees of
 freedom, only the 3 rotational degrees of freedom are currently 
 handled.
**/const a4=Math.PI/180,a6=[[1043.3,1285.3,1824.9,2666.9,0],//New Horizons Probe
[401,161.38,402.12,316,0]];var a7={};a7=new URL(c("27Lyk").resolve("9tAuZ"),import.meta.url).toString();var a8={};a8=new URL(c("27Lyk").resolve("fbslS"),import.meta.url).toString();var a9={};a9=new URL(c("27Lyk").resolve("4BUMV"),import.meta.url).toString();var se=class{constructor(e,t,i,n,r,a,s,o){this._h=.0025,// be set to as low as 0.0000372 for the Apple M1 chip with the number of 
// ticks within a 60 fps screen refresh equal to about 448.  _maxTicksPerFrame
// should be set to well below that.  set _h to well above its limit.
// _h times _maxTicksPerFrame should be be greater than 0.016667
this._maxTicksPerFrame=10,this.simulationTime=0,this.realTime=0,this._torquer=new a5,this._torque=new ei(0,0,0),this._omega=new ei(0,0,0),this._omegadot=new ei(0,0,0),this._quat=new et,this._quatdot=new J(0,0,0,0),this._dcm=new eI,// the reason that _dcm (direction cosine matrix) is a Matrix4 and
// not a Matrix3 is because the THREE function makeRotationFromQuaternion
// exists only for Matrix4. Convert it to a 3x3 matrix using the THREE 
// function setFromMatrix4 if desired.
this._torqueOption=1,// 1 = no torque
// 2 = space frame torque
// 3 = body frame torque
// 4 = acs stabilization
// 5 = gravity gradient torque
// 6 = torque on a top
this._H=new ei(0,0,0),this._Hinertial=new ei(0,0,0),// _H is the angular momentum vector expressed in body coordinates.
// _Hinertial is _H expressed in inertial (space) coordinates
this._euler=new eH,this._eulerOrder="ZYX",this._eulerOrderTriplet={XYZ:[0,1,2],YXZ:[1,0,2],ZXY:[2,0,1],ZYX:[2,1,0],YZX:[1,2,0],XZY:[0,2,1]},// 0 = X, 1 = Y, 2 = Z
// THREE.js uses intrinsic Tait-Bryan angles only, not proper Euler angles
// nor extrinsic angles
this._k1=new ei,this._k2=new ei,this._k3=new ei,this._k4=new ei,this._inertiaMatrix=new I,//currently kept set to zero for simplicity.  The off-diagonal elements of
//this matrix should be zero.  The tickDynamic function does not require
//this assumption but still computes omega using the products of inertia
//in order to facilitate a future possible transition to using them.
this._scale=new ei,this._unitScale=new ei(1,1,1),this._T=0,this._T0=0,// function and which should remain constant during torque-free motion
this.needsRefresh=!0,this._showObject=!0,this._blockMesh=null,this._origin=new ei(0,0,0),this._itemOrigin=new ei(0,0,0),this._offsetItemOrigin=!1,this._axesOrientation="Y Up",this._flipQuat=new et,this._flipQuat.setFromAxisAngle(new ei(1,0,0),0),this._flip180quat=new et,this._flip180quat.setFromAxisAngle(new ei(0,0,1),Math.PI),this._turn90quat=new et,this._turn90quat.setFromAxisAngle(new ei(1,0,0),Math.PI/2),this._xUnitVector=new ei(1,0,0),this._yUnitVector=new ei(0,1,0),this._zUnitVector=new ei(0,0,1),//mat0, mat1, q0, q1, q2, q3, v0, v1, and v2 are temporary objects
//that can be used as needed.  Avoid creating objects with "new"
//as much as possible. Use the .copy method for THREE.js objects
//to avoid creating new ones and causing memory issues
this._mat0=new I,this._mat1=new I,this._q0=new et,this._q1=new et,this._q2=new et,this._v0=new ei,this._v1=new ei,this._v2=new ei,this._qn=new et,//oriented toward the camera
this._zeroVector=new ei,this._isAxisymmetric=!1,this._axisOfSymmetry=0,this._itemOpacity=0,this.constructionComplete=!1,//constructionComplete is an admittedly kludgy way of ensuring that the
//code in here does not execute until asynchronous code from the Vectors 
//class has completed execution
this._camera=a,this._scene=r,"select-an-object"===o?this.setDimensionsAndInertiaProperties(e,t,i,n):this.setPresetMassProperties(o),this.constructBlock(s),this._determineIfAxisymmetric(),this.reset()}sendVectorData(){return[this._omega,this._H,this._quat,this._torque]}sendPaCEphemeralData(){return[this._quat,this.simulationTime]}sendPaCNonEphemeralData(){return[this._h,this._omega,this._H,this._inertiaMatrix,1!=this._torqueOption,this._isAxisymmetric,this._axisOfSymmetry,this._origin,this._axesOrientation]}sendTorqueData(){return[this._torque.x,this._torque.y,this._torque.z,this._torqueOption,this._omega.x,this._omega.y,this._omega.z,this._quat._w,this._quat._x,this._quat._y,this._quat._z,this._dcm.elements[0],this._dcm.elements[1],this._dcm.elements[2],this._dcm.elements[4],this._dcm.elements[5],this._dcm.elements[6],this._dcm.elements[8],this._dcm.elements[9],this._dcm.elements[10],this._T]}receiveTorqueData(e,t,i,n,r,a){this._torque.x=e,this._torque.y=t,this._torque.z=i,this._omega.x=n,this._omega.y=r,this._omega.z=a}reset(){this._dcm.makeRotationFromQuaternion(this._quat),this._H.copy(this._omega),this._H.applyMatrix3(this._inertiaMatrix),this._Hinertial.copy(this._H),this._Hinertial.applyQuaternion(this._quat),this._v0.copy(this._omega),this._v0.applyMatrix3(this._inertiaMatrix),this._T=.5*this._v0.dot(this._omega),this._torquer.receiveTorqueData(...this.sendTorqueData()),this._torquer.refreshGG()}nullTorque(){this._torquer.nullTorque()}setTorque(e,t,i,n,r){if(this._torquer.nullTorque(),2===e||3===e){let e=new ei(i,n,r);e.normalize(),e.multiplyScalar(t),this._torque.copy(e),this._torquer.setConstantTorque(this._torque.x,this._torque.y,this._torque.z)}this._torqueOption=e,this.reset(),this._torquer.doTorque(),this.receiveTorqueData(...this._torquer.sendTorqueData()),this.needsRefresh=!0}setPresetMassProperties(e){let t=0;switch(e){case"cessna-172":this._scale.set(4.5,3.5,2),t=0;break;case"new-horizons":this._scale.set(4.5,2,3),t=1}let[i,n,r,a,s]=a6[t];this._mass=i,this._inertiaMatrix.set(n,0,-s,0,r,0,-s,0,a),// the moments of inertia are required for the gravity gradient option
this._torquer.setMass(i),this._torquer.setInertiaMatrix(n,r,a,s),this._determineIfAxisymmetric(),this.needsRefresh=!0}/**
   The tick function advances the quaternion _quat through a small delta  
   time (_h) based on the rate of change of the quaternion,
   which is computed from _omega (p, q, and r).  This quaternion represents 
   the rotation of the object's body frame with respect to the inertial (space) 
   frame.  The tick function also computes _dcm, _H, and _Hinertial.  For 
   dynamic motion, tick is called by tickDynamic, whose main job is to 
   compute _omega.
   **/tick(){let e=this._h,t=this._omega.x,i=this._omega.y,n=this._omega.z,r=this._quatdot.w,a=this._quatdot.x,s=this._quatdot.y,o=this._quatdot.z,l=this._quat.w,h=this._quat.x,c=this._quat.y,u=this._quat.z;this._quatdot.w=(-t*h-i*c-n*u)/2,this._quatdot.x=(t*l+n*c-i*u)/2,this._quatdot.y=(i*l-n*h+t*u)/2,this._quatdot.z=(n*l+i*h-t*c)/2,0!==e&&(//trapezoidal integration
l+=(r+this._quatdot.w)*e/2,h+=(a+this._quatdot.x)*e/2,c+=(s+this._quatdot.y)*e/2,u+=(o+this._quatdot.z)*e/2,//set the quaternion and normalize it, make the dcm
this._quat.set(h,c,u,l),this._quat.normalize(),this._dcm.makeRotationFromQuaternion(this._quat)),//set the angular momentum using omega and the inertia matrix
this._H.copy(this._omega),this._H.applyMatrix3(this._inertiaMatrix),this._Hinertial.copy(this._H),this._Hinertial.applyQuaternion(this._quat),this.needsRefresh=!0}/**
   The tickDynamic function is called each time through the
   integration loop.  It calls the _torquer.doTorque function to 
   torque the object (or not).  It then computes _omega using 4th 
   order Runge Kutta and then calls the tick function to advance the 
   quaternion representing the orientation.  It then computes the 
   rotational kinetic energy and makes a small adjustment to _omega 
   during torque-free motion to ensure that numerical errors do not 
   propagate and cause the angular momentum vector to drift.

   Although the products of inertia are included in the computation
   of _omega, this function has not been tested with non-zero products
   of inertia.
   **/tickDynamic(){let e,t,i,n=this._h,r=this._inertiaMatrix.elements,a=r[0],s=r[4],o=r[8],l=-r[1],h=-r[2],c=-r[5],u=this._k1,d=this._k2,p=this._k3,m=this._k4;this._torquer.receiveTorqueData(...this.sendTorqueData()),this._torquer.doTorque(),this.receiveTorqueData(...this._torquer.sendTorqueData()),this._v0.copy(this._torque);//pass 1
let f=this._omega.x,g=this._omega.y,_=this._omega.z,v=this._omegadot.x,y=this._omegadot.y,x=this._omegadot.z;// The code below helps to prevent the angular momentum (H) from
// drifting during torque-free motion by multiplying _omega by the 
// ratio of the original kinetic energy to the current kinetic energy.
if(//no check is made if ixx, iyy, or izz is zero because this would
//add an unnecessary burden on this function which is called each time
//of the integration loop
e=-(l*(y-f*_)+h*(x+f*g)+(o-s)*g*_+c*(g*g-_*_)-this._v0.x)/a,t=-(c*(x-g*f)+l*(v+g*_)+(a-o)*_*f+h*(_*_-f*f)-this._v0.y)/s,i=-(h*(v-_*g)+c*(y+_*f)+(s-a)*f*g+l*(f*f-g*g)-this._v0.z)/o,u.x=e*n,u.y=t*n,u.z=i*n,//pass 2
f+=u.x/2,g+=u.y/2,_+=u.z/2,v=e,e=-(l*((y=t)-f*_)+h*((x=i)+f*g)+(o-s)*g*_+c*(g*g-_*_)-this._v0.x)/a,t=-(c*(x-g*f)+l*(v+g*_)+(a-o)*_*f+h*(_*_-f*f)-this._v0.y)/s,i=-(h*(v-_*g)+c*(y+_*f)+(s-a)*f*g+l*(f*f-g*g)-this._v0.z)/o,d.x=e*n,d.y=t*n,d.z=i*n,//pass 3
f+=d.x/2,g+=d.y/2,_+=d.z/2,v=e,e=-(l*((y=t)-f*_)+h*((x=i)+f*g)+(o-s)*g*_+c*(g*g-_*_)-this._v0.x)/a,t=-(c*(x-g*f)+l*(v+g*_)+(a-o)*_*f+h*(_*_-f*f)-this._v0.y)/s,i=-(h*(v-_*g)+c*(y+_*f)+(s-a)*f*g+l*(f*f-g*g)-this._v0.z)/o,p.x=e*n,p.y=t*n,p.z=i*n,//pass 4
f+=p.x,g+=p.y,_+=p.z,v=e,e=-(l*((y=t)-f*_)+h*((x=i)+f*g)+(o-s)*g*_+c*(g*g-_*_)-this._v0.x)/a,t=-(c*(x-g*f)+l*(v+g*_)+(a-o)*_*f+h*(_*_-f*f)-this._v0.y)/s,i=-(h*(v-_*g)+c*(y+_*f)+(s-a)*f*g+l*(f*f-g*g)-this._v0.z)/o,m.x=e*n,m.y=t*n,m.z=i*n,//save omegadot for the next integration step
this._omegadot.x=e,this._omegadot.y=t,this._omegadot.z=i,//total
this._omega.x+=(u.x+2*d.x+2*p.x+m.x)/6,this._omega.y+=(u.y+2*d.y+2*p.y+m.y)/6,this._omega.z+=(u.z+2*d.z+2*p.z+m.z)/6,this.tick(),// compute the rotational kinetic energy (_T)
this._v0.copy(this._omega),this._v0.applyMatrix3(this._inertiaMatrix),this._T=.5*this._v0.dot(this._omega),1===this._torqueOption){if(0===this._T0)return;let e=this._T/this._T0;1===this._axisOfSymmetry?(this._omega.y/=e,this._omega.z/=e):2===this._axisOfSymmetry?(this._omega.x/=e,this._omega.z/=e):3===this._axisOfSymmetry?(this._omega.x/=e,this._omega.y/=e):(this._omega.x/=e,this._omega.y/=e,this._omega.z/=e)}}/**
   The simulate function is called each time through the rendering loop.
   The dt variable is the real amount of time that has passed between 
   screen refreshes for the 3D animation.  The simulation delta time _h
   is capable of being much smaller than dt.  A "safety counter" and 
   maxTicks are added to ensure that it does not enter into an infinite 
   loop for whatever reason.  The interesting stuff happens in the
   tickDynamic function.
  **/simulate(e){let t=0,i=this._maxTicksPerFrame;for(this.realTime+=e;this.simulationTime<this.realTime&&t<i;)this.tickDynamic(),this.simulationTime+=this._h,t++}/**
   The refresh function should be called whenever the orientation of the 
   block changes relative to the inertial frame or when the camera changes 
   its position or lookat point.  This function does not generate the block 
   object (see constructBlock).
  **/refresh(){this.constructionComplete&&!1!==this.needsRefresh&&(this.needsRefresh=!1,this._qn.setFromRotationMatrix(this._camera.matrixWorld),this._q0.multiplyQuaternions(this._flipQuat,this._quat),this._blockMesh.matrix.compose(this._itemOrigin,this._q0,this._scale))}setDimensionsAndInertiaProperties(e,t,i,n){this.needsRefresh=!0;// allow one dimension to be zero but not two or more
let r=0===t,a=0===i,s=0===n;if(r&&a||r&&s||a&&s)return;this._mass=e;let o=(i*i+n*n)*e/12,l=(t*t+n*n)*e/12,h=(t*t+i*i)*e/12;this._inertiaMatrix.set(o,0,0,0,l,0,0,0,h),this._torquer.setMass(e),this._torquer.setInertiaMatrix(o,l,h),this._determineIfAxisymmetric();// if a dimension is zero, display it as thin but not precisely zero
let c=0===t?.02:t,u=0===i?.02:i,d=0===n?.02:n;this._scale.set(.5*c,.5*u,.5*d)}/**
   The setOmega function sets _omega using the provided magnitude
   and components of a vector in the desired direction.  The
   components do not have to be normalized to 1.  Alternatively,
   this function can be used to set the angular momentum (H).
  **/setOmega(e,t,i,n,r){this.needsRefresh=!0;let a=new ei(i,n,r);if(a.normalize(),"H"===e){// the inverse of inertia matrix is computed here.  It is assumed that
// the products of inertia are zero
let e=new I;e.elements[0]=1/this._inertiaMatrix.elements[0],e.elements[4]=1/this._inertiaMatrix.elements[4],e.elements[8]=1/this._inertiaMatrix.elements[8],a.applyMatrix3(e),a.normalize()}a.multiplyScalar(t),this._omega=a,this._H.copy(a),this._H.applyMatrix3(this._inertiaMatrix),this._v1.copy(this._omega),this._v1.applyMatrix3(this._inertiaMatrix),this._T0=.5*this._v1.dot(this._omega),this._T1=this._T0,this._determineIfAxisymmetric(),this._dcm.makeRotationFromQuaternion(this._quat),this._Hinertial.copy(this._H),this._Hinertial.applyQuaternion(this._quat),this._torquer.receiveTorqueData(...this.sendTorqueData()),this._torquer.refreshGG()}_determineIfAxisymmetric(){let e=this._inertiaMatrix.elements[0],t=this._inertiaMatrix.elements[4],i=this._inertiaMatrix.elements[8],n=e===t,r=t===i,a=e===i;if(n&&r&&a||!(n||r||a)){this._isAxisymmetric=!1,this._axisOfSymmetry=0;return}this._isAxisymmetric=!0,r?this._axisOfSymmetry=1:a?this._axisOfSymmetry=2:this._axisOfSymmetry=3}setOpacity(e,t){"object"===e&&(this.needsRefresh=!0,this._itemOpacity=t,this._blockMesh.material.opacity=t)}constructBlock(e){let t;null!=this._blockMesh&&(this._scene.remove(this._blockMesh),this._blockMesh=null);let i=[// Front 1 +Z
{pos:[-1,-1,1],norm:[0,0,1],uv:[0,0]},{pos:[1,-1,1],norm:[0,0,1],uv:[.5,0]},{pos:[-1,1,1],norm:[0,0,1],uv:[0,.3333333]},{pos:[1,1,1],norm:[0,0,1],uv:[.5,.3333333]},// Back 6 -Z
{pos:[1,-1,-1],norm:[0,0,-1],uv:[.5,.6666666]},{pos:[-1,-1,-1],norm:[0,0,-1],uv:[0,.6666666]},{pos:[1,1,-1],norm:[0,0,-1],uv:[.5,.3333333]},{pos:[-1,1,-1],norm:[0,0,-1],uv:[0,.3333333]},// Left 5 -X
{pos:[-1,-1,-1],norm:[-1,0,0],uv:[.5,1]},{pos:[-1,-1,1],norm:[-1,0,0],uv:[.5,.6666666]},{pos:[-1,1,-1],norm:[-1,0,0],uv:[0,1]},{pos:[-1,1,1],norm:[-1,0,0],uv:[0,.6666666]},// Right 2 +X
{pos:[1,-1,1],norm:[1,0,0],uv:[.5,0]},{pos:[1,-1,-1],norm:[1,0,0],uv:[.5,.3333333]},{pos:[1,1,1],norm:[1,0,0],uv:[1,0]},{pos:[1,1,-1],norm:[1,0,0],uv:[1,.3333333]},// Top 3 +Y
{pos:[1,1,-1],norm:[0,1,0],uv:[.5,.3333333]},{pos:[-1,1,-1],norm:[0,1,0],uv:[1,.3333333]},{pos:[1,1,1],norm:[0,1,0],uv:[.5,.6666666]},{pos:[-1,1,1],norm:[0,1,0],uv:[1,.6666666]},// Bottom 4 -Y
{pos:[1,-1,1],norm:[0,-1,0],uv:[1,.6666666]},{pos:[-1,-1,1],norm:[0,-1,0],uv:[.5,.6666666]},{pos:[1,-1,-1],norm:[0,-1,0],uv:[1,1]},{pos:[-1,-1,-1],norm:[0,-1,0],uv:[.5,1]}],n=i.length,r=new Float32Array(3*n),a=new Float32Array(3*n),s=new Float32Array(2*n),o=0,l=0,h=0;for(let e of i)r.set(e.pos,o),a.set(e.norm,l),s.set(e.uv,h),o+=3,l+=3,h+=2;let c=new tR;c.setAttribute("position",new t_(r,3)),c.setAttribute("normal",new t_(a,3)),c.setAttribute("uv",new t_(s,2)),c.setIndex([0,1,2,2,1,3,4,5,6,6,5,7,8,9,10,10,9,11,12,13,14,14,13,15,16,17,18,18,17,19,20,21,22,22,21,23]);let u=new aU;switch(e){case"axis-labels":let d=new URL(a7);// texture = tl.load('./img/blockFaces.jpg');
t=u.load(d.pathname);break;case"cessna-172":// cessna 172 images purchased from hum2d.com and the
// bottom view was not offered
let p=new URL(a8);// texture = tl.load('./img/cessna172.jpg');
t=u.load(p.pathname);break;case"new-horizons":// free images for the New Horizons spacecraft were obtained from
// https://www.planetary.org/space-images/simulated-new-horizons-spacecraft
let m=new URL(a9);// texture = tl.load('./img/newHorizons.jpg');
t=u.load(m.pathname)}let f=new am({map:t,specular:16777215,shininess:250,side:0,transparent:!0,opacity:this._itemOpacity});this._blockMesh=new tX(c,f),this._blockMesh.castShadow=!1,this._blockMesh.matrixAutoUpdate=!1,this._showObject&&this._scene.add(this._blockMesh),this.needsRefresh=!0}setPos(e,t,i){this._itemOrigin.set(e,t,i),this._blockMesh.position.set(e,t,i)}_setQuaternionFromEulerAngles(){this._quat.setFromEuler(this._euler),this._torquer.receiveTorqueData(...this.sendTorqueData()),this._torquer.refreshGG()}setEulerAngles(e,t,i){// angles are entered in degrees.
// Set them to between -180 and 180 for angles 1 and 3
this.needsRefresh=!0,e=e>180?e-180:e,i=i>180?i-180:i;let n=this._eulerOrderTriplet[this._eulerOrder],r=[a4*e,a4*t,a4*i];this._euler.set(r[n[0]],r[n[1]],r[n[2]],this._eulerOrder),this._setQuaternionFromEulerAngles()}setEulerOrder(e){this._eulerOrder=e,this._setQuaternionFromEulerAngles()}setEulerAnglesFromQuaternion(e,t,i,n){this.needsRefresh=!0,this._q0.set(t,i,n,e),this._q0.normalize(),this._euler.setFromQuaternion(this._q0,this._eulerOrder),this._quat.copy(this._q0)}getAngularMomentumMagnitude(){return this._H.length()}set mass(e){this._mass=e}get omega(){return this._omega}set omega(e){this._omega=e}get blockMesh(){return this._blockMesh}setACSDeadzoneOmega(e){this._torquer.setACSDeadzoneOmega(e)}setACSTorque(e){this._torquer.setACSTorque(e)}set3MuOverR3(e){this._torquer.set3MuOverR3(e)}setTopRDistance(e){this._torquer.setTopRDistance(e)}setTopGravity(e){this._torquer.setTopGravity(e)}getEulerAngles(){this._euler.setFromQuaternion(this._quat,this._eulerOrder);let e=this._eulerOrderTriplet[this._eulerOrder],t=[this._euler.x/a4,this._euler.y/a4,this._euler.z/a4];return[t[e[0]],t[e[1]],t[e[2]]]}getQuaternionElements(){return[this._quat.w,this._quat.x,this._quat.y,this._quat.z]}syncDCMtoQuat(){this._dcm.makeRotationFromQuaternion(this._quat)}getOmegaMagnitude(){return this._omega.length()/a4}getOmega(){let e=[this._omega.x/a4,this._omega.y/a4,this._omega.z/a4];return[e[0],e[1],e[2]]}getMomentsOfInertia(){let e=this._inertiaMatrix.elements,t=e[0],i=e[4],n=e[8];return[t,i,n]}getKineticEnergy(){return this._T}showObject(e){this._showObject!==e&&(this.needsRefresh=!0,this._showObject=e,e?this._scene.add(this._blockMesh):this._scene.remove(this._blockMesh))}setOffset(e){this._offsetItemOrigin=e}setOrientation(e){switch(this._axesOrientation=e,this._torquer.setAxesOrientation(e),e){case"X Up":this._flipQuat.setFromAxisAngle(new ei(0,0,1),Math.PI/2),this._origin.set(6.5,-6.5,-6.5);break;case"Y Up":this._flipQuat.setFromAxisAngle(new ei(1,0,0),0),this._origin.set(-6.5,-6.5,-6.5);break;case"Z Up":this._flipQuat.setFromAxisAngle(new ei(1,0,0),-Math.PI/2),this._origin.set(-6.5,-6.5,6.5);break;case"X Down":this._flipQuat.setFromAxisAngle(new ei(0,0,1),-Math.PI/2),this._origin.set(-6.5,6.5,-6.5);break;case"Y Down":this._flipQuat.setFromAxisAngle(new ei(1,0,0),Math.PI),this._origin.set(-6.5,6.5,6.5);break;case"Z Down":this._flipQuat.setFromAxisAngle(new ei(1,0,0),Math.PI/2),this._origin.set(-6.5,6.5,-6.5)}this._itemOrigin.copy(this._offsetItemOrigin?this._origin:this._zeroVector)}setOrigin(e,t){this.needsRefresh=!0,"object"===e&&(this._offsetItemOrigin=t,this._itemOrigin.copy(this._offsetItemOrigin?this._origin:this._zeroVector))}};// import {
// 	FileLoader,
// 	Loader,
// 	ShapePath
// } from 'THREE';
class st extends aR{constructor(e){super(e)}// THIS THREE.js FUNCTION WAS MODIFIED TO IGNORE THE URL
// AND TO USE A SMALL SUBSET OF THE ORIGINAL FONT CONTAINING
// ONLY THE CHARACTERS THAT WE NEED.  THIS ELIMINATES PROBLEMS
// ASSOCIATED WITH HAVING AN EXTERNAL FONT FILE.  TO MODIFY THIS
// SUBSET TO ADD CHARACTERS, GO TO THE ORIGINAL FILE
// (helvetiker_regular.typeface.json) AND CONVERT IT TO AN EDITABLE
// FORMAT USING cJSON.c AND THEN CONVERT IT BACK.
load(e,t,i,n){let r;// const loader = new THREE.Loader( this.manager );
// debugger;
let a=new aP(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials);let s='{"glyphs":{"Ύ":{"x_min":0,"x_max":1144.500000,"ha":1214,"o":"m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"X":{"x_min":-0.015625,"x_max":854.156250,"ha":940,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 "},"Z":{"x_min":0,"x_max":779,"ha":849,"o":"m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 "},"Η":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"H":{"x_min":0,"x_max":803,"ha":915,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"Χ":{"x_min":0,"x_max":854.171875,"ha":935,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 "},"Ζ":{"x_min":0,"x_max":779.171875,"ha":850,"o":"m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 "},"Y":{"x_min":0,"x_max":820,"ha":886,"o":"m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 "},"ω":{"x_min":0,"x_max":922,"ha":1031,"o":"m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 "},"τ":{"x_min":0.281250,"x_max":644.500000,"ha":703,"o":"m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 "},"Υ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 "}},"cssFontWeight":"normal","ascender":1189,"underlinePosition":-100,"cssFontStyle":"normal","boundingBox":{"yMin":-334,"xMin":-111,"yMax":1189,"xMax":1672},"resolution":1000,"original_font_information":{"postscript_name":"Helvetiker-Regular","version_string":"Version 1.00 2004 initial release","vendor_url":"http://www.magenta.gr/","full_font_name":"Helvetiker","font_family_name":"Helvetiker","copyright":"Copyright (c) Μagenta ltd, 2004","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"Μagenta ltd:Helvetiker:22-10-104","license_url":"http://www.ellak.gr/fonts/MgOpen/license.html","license_description":"Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.","manufacturer_name":"Μagenta ltd","font_sub_family_name":"Regular"},"descender":-334,"familyName":"Helvetiker","lineHeight":1522,"underlineThickness":50}';try{r=JSON.parse(s)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),r=JSON.parse(s.substring(65,s.length-2))}let o=this.parse(r);t&&t(o);// }, onProgress, onError );
}parse(e){return new si(e)}}//
class si{constructor(e){this.type="Font",this.data=e}generateShapes(e,t=100){let i=[],n=function(e,t,i){let n=Array.from(e),r=t/i.resolution,a=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*r,s=[],o=0,l=0;for(let e=0;e<n.length;e++){let t=n[e];if("\n"===t)o=0,l-=a;else{let e=function(e,t,i,n,r){let a,s,o,l,h,c,u,d;let p=r.glyphs[e]||r.glyphs["?"];if(!p){console.error('THREE.Font: character "'+e+'" does not exists in font family '+r.familyName+".");return}let m=new a3;if(p.o){let e=p._cachedOutline||(p._cachedOutline=p.o.split(" "));for(let r=0,p=e.length;r<p;){let p=e[r++];switch(p){case"m":a=e[r++]*t+i,s=e[r++]*t+n,m.moveTo(a,s);break;case"l":a=e[r++]*t+i,s=e[r++]*t+n,m.lineTo(a,s);break;case"q":o=e[r++]*t+i,l=e[r++]*t+n,h=e[r++]*t+i,c=e[r++]*t+n,m.quadraticCurveTo(h,c,o,l);break;case"b":o=e[r++]*t+i,l=e[r++]*t+n,h=e[r++]*t+i,c=e[r++]*t+n,u=e[r++]*t+i,d=e[r++]*t+n,m.bezierCurveTo(h,c,u,d,o,l)}}}return{offsetX:p.ha*t,path:m}}(t,r,o,l,i);o+=e.offsetX,s.push(e.path)}}return s}(e,t,this.data);for(let e=0,t=n.length;e<t;e++)Array.prototype.push.apply(i,n[e].toShapes());return i}}si.prototype.isFont=!0;/**
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
 *  bevelOffset: <float> // how far from text outline does bevel start
 * }
 */// import {
// 	ExtrudeGeometry
// } from 'THREE';
class sn extends an{constructor(e,t={}){let i=t.font;if(void 0===i)super();// generate default extrude geometry
else{let n=i.generateShapes(e,t.size);// translate parameters to ExtrudeGeometry API
t.depth=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),super(n,t)}this.type="TextGeometry"}}/**
 Vectors is a class that encapsulates the computation and drawing of vectors
 associated with the SixDOFObject class.  These vectors are the 3 body
 frame vectors, the 3 space frame vectors, the angular velocity and momentum
 vectors, and the torque vector.  This class also handles the labels for the 
 vectors.
**/const sr=Math.sqrt(.5);var sa=class{constructor(e,t){this._quat=new et,this._camera=t,this._scene=e,this.needsRefresh=!0,this._scale=new ei,this._unitScale=new ei,this._unitScale.set(1,1,1),this._omega=new ei(0,0,0),this._H=new ei(0,0,0),this._torque=new ei(0,0,0),this._origin=new ei(0,0,0),this._bodyFrameOrigin=new ei(0,0,0),this._spaceFrameOrigin=new ei(0,0,0),this._omegaOrigin=new ei(0,0,0),this._hOrigin=new ei(0,0,0),this._torqueOrigin=new ei(0,0,0),this._offsetBodyFrameOrigin=!1,this._offsetSpaceFrameOrigin=!1,this._offsetOmegaOrigin=!1,this._offsetHOrigin=!1,this._offsetTorqueOrigin=!1,this._flipQuat=new et,this._flipQuat.setFromAxisAngle(new ei(1,0,0),0),this._flip180quat=new et,this._flip180quat.setFromAxisAngle(new ei(0,0,1),Math.PI),this._vectorSize=5,this._yUnitVector=new ei(0,1,0),this._xVectorPos=new ei(this._vectorSize/2,0,0),this._yVectorPos=new ei(0,this._vectorSize/2,0),this._zVectorPos=new ei(0,0,this._vectorSize/2),this._zeroVector=new ei,this._q0=new et,this._q1=new et,this._qn=new et,this._v0=new ei,this._v1=new ei,this._xBodyVectorShaftMesh=null,this._yBodyVectorShaftMesh=null,this._zBodyVectorShaftMesh=null,this._xSpaceVectorShaftMesh=null,this._ySpaceVectorShaftMesh=null,this._zSpaceVectorShaftMesh=null,this._omegaVectorShaftMesh=null,this._hVectorShaftMesh=null,this._torqueVectorShaftMesh=null,this._xBodyVectorArrowheadMesh=null,this._yBodyVectorArrowheadMesh=null,this._zBodyVectorArrowheadMesh=null,this._xSpaceVectorArrowheadMesh=null,this._ySpaceVectorArrowheadMesh=null,this._zSpaceVectorArrowheadMesh=null,this._omegaVectorArrowheadMesh=null,this._hVectorArrowheadMesh=null,this._torqueVectorArrowheadMesh=null,this._bodyFrameXQuat=new et,this._bodyFrameYQuat=new et,this._bodyFrameZQuat=new et,this._omegaQuat=new et,this._hQuat=new et,this._torqueQuat=new et,this._xBodyLabel=null,this._yBodyLabel=null,this._zBodyLabel=null,this._xSpaceLabel=null,this._ySpaceLabel=null,this._zSpaceLabel=null,this._omegaLabel=null,this._hLabel=null,this._torqueLabel=null,this._showBodyFrame=!1,this._showXBodyAxis=!1,this._showYBodyAxis=!1,this._showZBodyAxis=!1,this._showSpaceFrame=!1,this._showOmega=!1,this._showH=!1,this._showTorque=!1,this._bodyFrameOpacity=0,this._spaceFrameOpacity=0,this._omegaOpacity=0,this._hOpacity=0,this._torqueOpacity=0,this._bodyFrameColor=16776960,this._spaceFrameColor=255,this._omegaColor=65280,this._hColor=8388736,this._torqueColor=16711680,this._constructBodyFrame(),this._constructSpaceFrame(),this._constructLabels("helvetiker","regular"),this._constructOmegaVector(),this._constructHVector(),this._constructTorqueVector(),this._addVectorsAndLabelsToScene()}receiveVectorData(e,t,i,n){this._omega=e,this._H=t,this._quat=i,this._torque=n}drawVector(e){let t,i,n;switch(this._q0.multiplyQuaternions(this._flipQuat,this._quat),e){case 1:t=this._xBodyVectorShaftMesh,i=this._xBodyVectorArrowheadMesh,n=this._xBodyLabel,this._q1.multiplyQuaternions(this._q0,this._bodyFrameXQuat),this._v0.copy(this._xVectorPos);break;case 2:t=this._yBodyVectorShaftMesh,i=this._yBodyVectorArrowheadMesh,n=this._yBodyLabel,this._q1.multiplyQuaternions(this._q0,this._bodyFrameYQuat),this._v0.copy(this._yVectorPos);break;case 3:t=this._zBodyVectorShaftMesh,i=this._zBodyVectorArrowheadMesh,n=this._zBodyLabel,this._q1.multiplyQuaternions(this._q0,this._bodyFrameZQuat),this._v0.copy(this._zVectorPos);break;case 4:t=this._xSpaceVectorShaftMesh,i=this._xSpaceVectorArrowheadMesh,n=this._xSpaceLabel,this._q1.multiplyQuaternions(this._flipQuat,this._bodyFrameXQuat),this._v0.copy(this._xVectorPos);break;case 5:t=this._ySpaceVectorShaftMesh,i=this._ySpaceVectorArrowheadMesh,n=this._ySpaceLabel,this._q1.multiplyQuaternions(this._flipQuat,this._bodyFrameYQuat),this._v0.copy(this._yVectorPos);break;case 6:t=this._zSpaceVectorShaftMesh,i=this._zSpaceVectorArrowheadMesh,n=this._zSpaceLabel,this._q1.multiplyQuaternions(this._flipQuat,this._bodyFrameZQuat),this._v0.copy(this._zVectorPos);break;case 7:t=this._omegaVectorShaftMesh,i=this._omegaVectorArrowheadMesh,n=this._omegaLabel,this._v0.copy(this._omega),t.visible=!0,i.visible=!0,n.visible=!0,0===this._v0.lengthSq()&&(t.visible=!1,i.visible=!1,n.visible=!1),this._v0.normalize(),this._omegaQuat.setFromUnitVectors(this._yUnitVector,this._v0),this._q1.multiplyQuaternions(this._q0,this._omegaQuat),this._v0.multiplyScalar(this._vectorSize/2),this._v1.copy(this._v0),this._v0.applyQuaternion(this._q0),this._v0.add(this._omegaOrigin),this._v1.multiplyScalar(2),this._v1.applyQuaternion(this._q0),this._v1.add(this._omegaOrigin);break;case 8:t=this._hVectorShaftMesh,i=this._hVectorArrowheadMesh,n=this._hLabel,this._v0.copy(this._H),t.visible=!0,i.visible=!0,n.visible=!0,0===this._v0.lengthSq()&&(t.visible=!1,i.visible=!1,n.visible=!1),this._v0.normalize(),this._hQuat.setFromUnitVectors(this._yUnitVector,this._v0),this._q1.multiplyQuaternions(this._q0,this._hQuat),this._v0.multiplyScalar(this._vectorSize/2),this._v1.copy(this._v0),this._v0.applyQuaternion(this._q0),this._v0.add(this._hOrigin),this._v1.multiplyScalar(2),this._v1.applyQuaternion(this._q0),this._v1.add(this._hOrigin);break;case 9:if(t=this._torqueVectorShaftMesh,i=this._torqueVectorArrowheadMesh,n=this._torqueLabel,t.visible=!0,i.visible=!0,n.visible=!0,1===this._torqueOption||0===this._torque.lengthSq()){t.visible=!1,i.visible=!1,n.visible=!1;break}this._v0.copy(this._torque),t.visible=!0,i.visible=!0,n.visible=!0,this._v0.normalize(),this._torqueQuat.setFromUnitVectors(this._yUnitVector,this._v0),this._q1.multiplyQuaternions(this._q0,this._torqueQuat),this._v0.multiplyScalar(this._vectorSize/2),this._v1.copy(this._v0),this._v0.applyQuaternion(this._q0),this._v0.add(this._torqueOrigin),this._v1.multiplyScalar(2),this._v1.applyQuaternion(this._q0),this._v1.add(this._torqueOrigin)}e>=1&&e<=3&&(this._v1.copy(this._v0),this._v0.applyQuaternion(this._q0),this._v0.add(this._bodyFrameOrigin),1===e&&this._q1.multiplyQuaternions(this._q1,this._flip180quat),this._v1.multiplyScalar(2),this._v1.applyQuaternion(this._q0),this._v1.add(this._bodyFrameOrigin)),e>=4&&e<=6&&(this._v1.copy(this._v0),this._v0.applyQuaternion(this._flipQuat),this._v0.add(this._spaceFrameOrigin),4===e&&this._q1.multiply(this._flip180quat),this._v1.multiplyScalar(2),this._v1.applyQuaternion(this._flipQuat),this._v1.add(this._spaceFrameOrigin)),t.matrix.compose(this._v0,this._q1,this._unitScale),i.matrix.compose(this._v1,this._q1,this._unitScale),n.matrix.compose(this._v1,this._qn,this._unitScale)}refresh(){this.constructionComplete&&!1!==this.needsRefresh&&(this.needsRefresh=!1,this._qn.setFromRotationMatrix(this._camera.matrixWorld),this._q0.multiplyQuaternions(this._flipQuat,this._quat),this._showXBodyAxis?(this.drawVector(1),this._xBodyVectorShaftMesh.visible=!0,this._xBodyVectorArrowheadMesh.visible=!0,this._xBodyLabel.visible=!0):(this._xBodyVectorShaftMesh.visible=!1,this._xBodyVectorArrowheadMesh.visible=!1,this._xBodyLabel.visible=!1),this._showYBodyAxis?(this.drawVector(2),this._yBodyVectorShaftMesh.visible=!0,this._yBodyVectorArrowheadMesh.visible=!0,this._yBodyLabel.visible=!0):(this._yBodyVectorShaftMesh.visible=!1,this._yBodyVectorArrowheadMesh.visible=!1,this._yBodyLabel.visible=!1),this._showZBodyAxis?(this.drawVector(3),this._zBodyVectorShaftMesh.visible=!0,this._zBodyVectorArrowheadMesh.visible=!0,this._zBodyLabel.visible=!0):(this._zBodyVectorShaftMesh.visible=!1,this._zBodyVectorArrowheadMesh.visible=!1,this._zBodyLabel.visible=!1),this.drawVector(4),this.drawVector(5),this.drawVector(6),this.drawVector(7),this.drawVector(8),this.drawVector(9))}setOpacity(e,t){switch(this.needsRefresh=!0,e){case"bodyFrame":this._bodyFrameOpacity=t,this._xBodyVectorShaftMesh.material.opacity=t,this._xBodyVectorArrowheadMesh.material.opacity=t,this._yBodyVectorShaftMesh.material.opacity=t,this._yBodyVectorArrowheadMesh.material.opacity=t,this._zBodyVectorShaftMesh.material.opacity=t,this._zBodyVectorArrowheadMesh.material.opacity=t,this._xBodyLabel.material[0].opacity=t,this._xBodyLabel.material[1].opacity=t,this._yBodyLabel.material[0].opacity=t,this._yBodyLabel.material[1].opacity=t,this._zBodyLabel.material[0].opacity=t,this._zBodyLabel.material[1].opacity=t;break;case"spaceFrame":this._spaceFrameOpacity=t,this._xSpaceVectorShaftMesh.material.opacity=t,this._xSpaceVectorArrowheadMesh.material.opacity=t,this._ySpaceVectorShaftMesh.material.opacity=t,this._ySpaceVectorArrowheadMesh.material.opacity=t,this._zSpaceVectorShaftMesh.material.opacity=t,this._zSpaceVectorArrowheadMesh.material.opacity=t,this._xSpaceLabel.material[0].opacity=t,this._xSpaceLabel.material[1].opacity=t,this._ySpaceLabel.material[0].opacity=t,this._ySpaceLabel.material[1].opacity=t,this._zSpaceLabel.material[0].opacity=t,this._zSpaceLabel.material[1].opacity=t;break;case"omega":this._omegaOpacity=t,this._omegaVectorShaftMesh.material.opacity=t,this._omegaVectorArrowheadMesh.material.opacity=t,this._omegaLabel.material[0].opacity=t,this._omegaLabel.material[1].opacity=t;break;case"h":this._hOpacity=t,this._hVectorShaftMesh.material.opacity=t,this._hVectorArrowheadMesh.material.opacity=t,this._hLabel.material[0].opacity=t,this._hLabel.material[1].opacity=t;break;case"torque":this._torqueOpacity=t,this._torqueVectorShaftMesh.material.opacity=t,this._torqueVectorArrowheadMesh.material.opacity=t,this._torqueLabel.material[0].opacity=t,this._torqueLabel.material[1].opacity=t}}_colorForName(e){let t;switch(e){case"red":t=16711680;//0xff5555;//light red (pink)
break;case"green":t=65280;//0x55ff55;//light green
break;case"blue":t=255;//0x5555ff;//light blue
break;case"yellow":t=16776960;//0xffff55;//light yellow
break;case"purple":t=8388736;//0xcbc3e3;//light purple
break;case"orange":t=16753920;//0xffd580;//light orange
}return t}setColor(e,t){this.needsRefresh=!0;let i=this._colorForName(t);switch(e){case"bodyFrame":this._bodyFrameColor=i,this._xBodyVectorShaftMesh.material.color.set(i),this._yBodyVectorShaftMesh.material.color.set(i),this._zBodyVectorShaftMesh.material.color.set(i),this._xBodyVectorArrowheadMesh.material.color.set(i),this._yBodyVectorArrowheadMesh.material.color.set(i),this._zBodyVectorArrowheadMesh.material.color.set(i),this._xBodyLabel.material[0].color.set(i),this._xBodyLabel.material[1].color.set(i),this._yBodyLabel.material[0].color.set(i),this._yBodyLabel.material[1].color.set(i),this._zBodyLabel.material[0].color.set(i),this._zBodyLabel.material[1].color.set(i);break;case"spaceFrame":this._spaceFrameColor=i,this._xSpaceVectorShaftMesh.material.color.set(i),this._ySpaceVectorShaftMesh.material.color.set(i),this._zSpaceVectorShaftMesh.material.color.set(i),this._xSpaceVectorArrowheadMesh.material.color.set(i),this._ySpaceVectorArrowheadMesh.material.color.set(i),this._zSpaceVectorArrowheadMesh.material.color.set(i),this._xSpaceLabel.material[0].color.set(i),this._xSpaceLabel.material[1].color.set(i),this._ySpaceLabel.material[0].color.set(i),this._ySpaceLabel.material[1].color.set(i),this._zSpaceLabel.material[0].color.set(i),this._zSpaceLabel.material[1].color.set(i);break;case"omega":this._omegaColor=i,this._omegaVectorShaftMesh.material.color.set(i),this._omegaVectorArrowheadMesh.material.color.set(i),this._omegaLabel.material[0].color.set(i),this._omegaLabel.material[1].color.set(i);break;case"h":this._hColor=i,this._hVectorShaftMesh.material.color.set(i),this._hVectorArrowheadMesh.material.color.set(i),this._hLabel.material[0].color.set(i),this._hLabel.material[1].color.set(i);break;case"torque":this._torqueColor=i,this._torqueVectorShaftMesh.material.color.set(i),this._torqueVectorArrowheadMesh.material.color.set(i),this._torqueLabel.material[0].color.set(i),this._torqueLabel.material[1].color.set(i)}}_constructVector(){let e=this._vectorSize,t=.007*this._vectorSize,i=new rG(t,t,e,32,1,!0),n=new rq(2*t,.07*e,32,1,!0);return[i,n]}_constructBodyFrame(){let e=new tm({color:this._bodyFrameColor,transparent:!0,opacity:this._bodyFrameOpacity}),t=new tm({color:this._bodyFrameColor,transparent:!0,opacity:this._bodyFrameOpacity}),i=new tm({color:this._bodyFrameColor,transparent:!0,opacity:this._bodyFrameOpacity}),[n,r]=this._constructVector();this._xBodyVectorShaftMesh=new tX(n,e),this._xBodyVectorShaftMesh.matrixAutoUpdate=!1,this._xBodyVectorArrowheadMesh=new tX(r,e),this._xBodyVectorArrowheadMesh.matrixAutoUpdate=!1,this._yBodyVectorShaftMesh=new tX(n,t),this._yBodyVectorShaftMesh.matrixAutoUpdate=!1,this._yBodyVectorArrowheadMesh=new tX(r,t),this._yBodyVectorArrowheadMesh.matrixAutoUpdate=!1,this._zBodyVectorShaftMesh=new tX(n,i),this._zBodyVectorShaftMesh.matrixAutoUpdate=!1,this._zBodyVectorArrowheadMesh=new tX(r,i),this._zBodyVectorArrowheadMesh.matrixAutoUpdate=!1,this._bodyFrameXQuat.set(0,0,sr,sr),this._bodyFrameYQuat.set(0,0,0,1),this._bodyFrameZQuat.set(sr,0,0,sr)}_constructSpaceFrame(){let e=new tm({color:this._spaceFrameColor,transparent:!0,opacity:this._spaceFrameOpacity}),t=new tm({color:this._spaceFrameColor,transparent:!0,opacity:this._spaceFrameOpacity}),i=new tm({color:this._spaceFrameColor,transparent:!0,opacity:this._spaceFrameOpacity}),[n,r]=this._constructVector();this._xSpaceVectorShaftMesh=new tX(n,e),this._xSpaceVectorShaftMesh.matrixAutoUpdate=!1,this._xSpaceVectorArrowheadMesh=new tX(r,e),this._xSpaceVectorArrowheadMesh.matrixAutoUpdate=!1,this._ySpaceVectorShaftMesh=new tX(n,t),this._ySpaceVectorShaftMesh.matrixAutoUpdate=!1,this._ySpaceVectorArrowheadMesh=new tX(r,t),this._ySpaceVectorArrowheadMesh.matrixAutoUpdate=!1,this._zSpaceVectorShaftMesh=new tX(n,i),this._zSpaceVectorShaftMesh.matrixAutoUpdate=!1,this._zSpaceVectorArrowheadMesh=new tX(r,i),this._zSpaceVectorArrowheadMesh.matrixAutoUpdate=!1}_constructOmegaVector(){let e=new tm({color:this._omegaColor,transparent:!0,opacity:this._omegaOpacity}),[t,i]=this._constructVector();this._omegaVectorShaftMesh=new tX(t,e),this._omegaVectorShaftMesh.matrixAutoUpdate=!1,this._omegaVectorArrowheadMesh=new tX(i,e),this._omegaVectorArrowheadMesh.matrixAutoUpdate=!1}_constructHVector(){let e=new tm({color:this._hColor,transparent:!0,opacity:this._hOpacity}),[t,i]=this._constructVector();this._hVectorShaftMesh=new tX(t,e),this._hVectorShaftMesh.matrixAutoUpdate=!1,this._hVectorArrowheadMesh=new tX(i,e),this._hVectorArrowheadMesh.matrixAutoUpdate=!1}_constructTorqueVector(){let e=new tm({color:this._torqueColor,transparent:!0,opacity:this._torqueOpacity}),[t,i]=this._constructVector();this._torqueVectorShaftMesh=new tX(t,e),this._torqueVectorShaftMesh.matrixAutoUpdate=!1,this._torqueVectorArrowheadMesh=new tX(i,e),this._torqueVectorArrowheadMesh.matrixAutoUpdate=!1}_constructLabels(e,t){let i;// IMPORTANT: The FontLoader.load function generates a Javascript promise
// which results in asynchronous code execution.  The variable
// constructionComplete is initialized to false but is set to true once
// the asynchronous code is complete.  Until then, the refresh function
// should not be allowed to execute.
aw.enabled=!0;// body frame, space frame, omega, H, torque
let n=["X","Y","Z","X","Y","Z","ω","H","τ"],r=new st;// loader.load('./fonts/' + fontName + '_' + fontWeight + '.typeface.json', (response) => {
// let fontJSON = new URL('/static/fonts/helvetiker_regular_mod.typeface.json', import.meta.url);
// console.log('fontJSON = ',fontJSON);
// loader.load(fontJSON.pathname, (response) => {
r.load("USED TO BE ./fonts/helvetiker_regular.typeface.json BUT NOT REQURED ANYMORE",e=>{i=e;let t=[new af({color:this._bodyFrameColor,transparent:!0,opacity:this._bodyFrameOpacity}),new af({color:this._bodyFrameColor,transparent:!0,opacity:this._bodyFrameOpacity})// side
],r=[new af({color:this._spaceFrameColor,transparent:!0,opacity:this._spaceFrameOpacity}),new af({color:this._spaceFrameColor,transparent:!0,opacity:this._spaceFrameOpacity})// side
],a=[new af({color:this._omegaColor,transparent:!0,opacity:this._omegaOpacity}),new af({color:this._omegaColor,transparent:!0,opacity:this._omegaOpacity})// side
],s=[new af({color:this._hColor,transparent:!0,opacity:this._hOpacity}),new af({color:this._hColor,transparent:!0,opacity:this._hOpacity})// side
],o=[new af({color:this._torqueColor,transparent:!0,opacity:this._torqueOpacity}),new af({color:this._torqueColor,transparent:!0,opacity:this._torqueOpacity})// side
];for(let e=0;e<n.length;e++){let l=new sn(n[e],{font:i,size:.5,height:.1,curveSegments:4,bevelEnabled:!1,depth:.1});switch(e){case 0:this._xBodyLabel=new tX(l,t),this._xBodyLabel.matrixAutoUpdate=!1;break;case 1:this._yBodyLabel=new tX(l,t),this._yBodyLabel.matrixAutoUpdate=!1;break;case 2:this._zBodyLabel=new tX(l,t),this._zBodyLabel.matrixAutoUpdate=!1;break;case 3:this._xSpaceLabel=new tX(l,r),this._xSpaceLabel.matrixAutoUpdate=!1;break;case 4:this._ySpaceLabel=new tX(l,r),this._ySpaceLabel.matrixAutoUpdate=!1;break;case 5:this._zSpaceLabel=new tX(l,r),this._zSpaceLabel.matrixAutoUpdate=!1;break;case 6:this._omegaLabel=new tX(l,a),this._omegaLabel.matrixAutoUpdate=!1;break;case 7:this._hLabel=new tX(l,s),this._hLabel.matrixAutoUpdate=!1;break;case 8:this._torqueLabel=new tX(l,o),this._torqueLabel.matrixAutoUpdate=!1}}this.constructionComplete=!0})}_addVectorsAndLabelsToScene(){let e=this._scene;this._showBodyFrame&&(e.add(this._xBodyVectorShaftMesh),e.add(this._xBodyVectorArrowheadMesh),e.add(this._yBodyVectorShaftMesh),e.add(this._yBodyVectorArrowheadMesh),e.add(this._zBodyVectorShaftMesh),e.add(this._zBodyVectorArrowheadMesh),e.add(this._xBodyLabel),e.add(this._yBodyLabel),e.add(this._zBodyLabel)),this._showSpaceFrame&&(e.add(this._xSpaceVectorShaftMesh),e.add(this._xSpaceVectorArrowheadMesh),e.add(this._ySpaceVectorShaftMesh),e.add(this._ySpaceVectorArrowheadMesh),e.add(this._zSpaceVectorShaftMesh),e.add(this._zSpaceVectorArrowheadMesh),e.add(this._xSpaceLabel),e.add(this._ySpaceLabel),e.add(this._zSpaceLabel)),this._showOmega&&(e.add(this._omegaVectorShaftMesh),e.add(this._omegaVectorArrowheadMesh),e.add(this._omegaLabel)),this._showH&&(e.add(this._hVectorShaftMesh),e.add(this._hVectorArrowheadMesh),e.add(this._hLabel)),this._showTorque&&(e.add(this._torqueVectorShaftMesh),e.add(this._torqueVectorArrowheadMesh),e.add(this._torqueLabel))}setVectorSize(e){this._vectorSize=Number(e),this._xVectorPos=new ei(this._vectorSize/2,0,0),this._yVectorPos=new ei(0,this._vectorSize/2,0),this._zVectorPos=new ei(0,0,this._vectorSize/2);let t=this._scene;this._showBodyFrame&&(t.remove(this._xBodyVectorShaftMesh),t.remove(this._xBodyVectorArrowheadMesh),t.remove(this._yBodyVectorShaftMesh),t.remove(this._yBodyVectorArrowheadMesh),t.remove(this._zBodyVectorShaftMesh),t.remove(this._zBodyVectorArrowheadMesh)),this._showSpaceFrame&&(t.remove(this._xSpaceVectorShaftMesh),t.remove(this._xSpaceVectorArrowheadMesh),t.remove(this._ySpaceVectorShaftMesh),t.remove(this._ySpaceVectorArrowheadMesh),t.remove(this._zSpaceVectorShaftMesh),t.remove(this._zSpaceVectorArrowheadMesh)),this._showOmega&&(t.remove(this._omegaVectorShaftMesh),t.remove(this._omegaVectorArrowheadMesh)),this._showH&&(t.remove(this._hVectorShaftMesh),t.remove(this._hVectorArrowheadMesh)),this._showTorque&&(t.remove(this._torqueVectorShaftMesh),t.remove(this._torqueVectorArrowheadMesh)),this._constructBodyFrame(),this._constructSpaceFrame(),this._constructOmegaVector(),this._constructHVector(),this._constructTorqueVector(),this._showBodyFrame&&(t.add(this._xBodyVectorShaftMesh),t.add(this._xBodyVectorArrowheadMesh),t.add(this._yBodyVectorShaftMesh),t.add(this._yBodyVectorArrowheadMesh),t.add(this._zBodyVectorShaftMesh),t.add(this._zBodyVectorArrowheadMesh)),this._showSpaceFrame&&(t.add(this._xSpaceVectorShaftMesh),t.add(this._xSpaceVectorArrowheadMesh),t.add(this._ySpaceVectorShaftMesh),t.add(this._ySpaceVectorArrowheadMesh),t.add(this._zSpaceVectorShaftMesh),t.add(this._zSpaceVectorArrowheadMesh)),this._showOmega&&(t.add(this._omegaVectorShaftMesh),t.add(this._omegaVectorArrowheadMesh)),this._showH&&(t.add(this._hVectorShaftMesh),t.add(this._hVectorArrowheadMesh)),this._showTorque&&(t.add(this._torqueVectorShaftMesh),t.add(this._torqueVectorArrowheadMesh)),this.needsRefresh,this.refresh()}set omega(e){this._omega=e}showBodyFrame(e){if(this._showBodyFrame===e)return;this.needsRefresh=!0;let t=this._scene;this._showBodyFrame=e,e?(t.add(this._xBodyVectorShaftMesh),t.add(this._xBodyVectorArrowheadMesh),t.add(this._yBodyVectorShaftMesh),t.add(this._yBodyVectorArrowheadMesh),t.add(this._zBodyVectorShaftMesh),t.add(this._zBodyVectorArrowheadMesh),t.add(this._xBodyLabel),t.add(this._yBodyLabel),t.add(this._zBodyLabel)):(t.remove(this._xBodyVectorShaftMesh),t.remove(this._xBodyVectorArrowheadMesh),t.remove(this._yBodyVectorShaftMesh),t.remove(this._yBodyVectorArrowheadMesh),t.remove(this._zBodyVectorShaftMesh),t.remove(this._zBodyVectorArrowheadMesh),t.remove(this._xBodyLabel),t.remove(this._yBodyLabel),t.remove(this._zBodyLabel))}showSpaceFrame(e){if(this._showSpaceFrame===e)return;this.needsRefresh=!0;let t=this._scene;this._showSpaceFrame=e,e?(t.add(this._xSpaceVectorShaftMesh),t.add(this._xSpaceVectorArrowheadMesh),t.add(this._ySpaceVectorShaftMesh),t.add(this._ySpaceVectorArrowheadMesh),t.add(this._zSpaceVectorShaftMesh),t.add(this._zSpaceVectorArrowheadMesh),t.add(this._xSpaceLabel),t.add(this._ySpaceLabel),t.add(this._zSpaceLabel)):(t.remove(this._xSpaceVectorShaftMesh),t.remove(this._xSpaceVectorArrowheadMesh),t.remove(this._ySpaceVectorShaftMesh),t.remove(this._ySpaceVectorArrowheadMesh),t.remove(this._zSpaceVectorShaftMesh),t.remove(this._zSpaceVectorArrowheadMesh),t.remove(this._xSpaceLabel),t.remove(this._ySpaceLabel),t.remove(this._zSpaceLabel))}showOmega(e){if(this._showOmega===e)return;this.needsRefresh=!0;let t=this._scene;this._showOmega=e,e?(t.add(this._omegaVectorShaftMesh),t.add(this._omegaVectorArrowheadMesh),t.add(this._omegaLabel)):(t.remove(this._omegaVectorShaftMesh),t.remove(this._omegaVectorArrowheadMesh),t.remove(this._omegaLabel))}showAngularMomentum(e){if(this._showH===e)return;this.needsRefresh=!0;let t=this._scene;this._showH=e,e?(t.add(this._hVectorShaftMesh),t.add(this._hVectorArrowheadMesh),t.add(this._hLabel)):(t.remove(this._hVectorShaftMesh),t.remove(this._hVectorArrowheadMesh),t.remove(this._hLabel))}showTorque(e){if(this._showTorque===e)return;this.needsRefresh=!0;let t=this._scene;this._showTorque=e,e?(t.add(this._torqueVectorShaftMesh),t.add(this._torqueVectorArrowheadMesh),t.add(this._torqueLabel)):(t.remove(this._torqueVectorShaftMesh),t.remove(this._torqueVectorArrowheadMesh),t.remove(this._torqueLabel))}setOffsets(e,t,i,n,r){this._offsetBodyFrameOrigin=e,this._offsetSpaceFrameOrigin=t,this._offsetOmegaOrigin=i,this._offsetHOrigin=n,this._offsetTorqueOrigin=r}setOrientation(e){switch(e){case"X Up":this._flipQuat.setFromAxisAngle(new ei(0,0,1),Math.PI/2),this._origin.set(6.5,-6.5,-6.5);break;case"Y Up":this._flipQuat.setFromAxisAngle(new ei(1,0,0),0),this._origin.set(-6.5,-6.5,-6.5);break;case"Z Up":this._flipQuat.setFromAxisAngle(new ei(1,0,0),-Math.PI/2),this._origin.set(-6.5,-6.5,6.5);break;case"X Down":this._flipQuat.setFromAxisAngle(new ei(0,0,1),-Math.PI/2),this._origin.set(-6.5,6.5,-6.5);break;case"Y Down":this._flipQuat.setFromAxisAngle(new ei(1,0,0),Math.PI),this._origin.set(-6.5,6.5,6.5);break;case"Z Down":this._flipQuat.setFromAxisAngle(new ei(1,0,0),Math.PI/2),this._origin.set(-6.5,6.5,-6.5)}this._bodyFrameOrigin.copy(this._offsetBodyFrameOrigin?this._origin:this._zeroVector),this._spaceFrameOrigin.copy(this._offsetSpaceFrameOrigin?this._origin:this._zeroVector),this._omegaOrigin.copy(this._offsetOmegaOrigin?this._origin:this._zeroVector),this._hOrigin.copy(this._offsetHOrigin?this._origin:this._zeroVector),this._torqueOrigin.copy(this._offsetTorqueOrigin?this._origin:this._zeroVector)}setOrigin(e,t){switch(this.needsRefresh=!0,e){case"bodyFrame":this._offsetBodyFrameOrigin=t,this._bodyFrameOrigin.copy(this._offsetBodyFrameOrigin?this._origin:this._zeroVector);break;case"spaceFrame":this._offsetSpaceFrameOrigin=t,this._spaceFrameOrigin.copy(this._offsetSpaceFrameOrigin?this._origin:this._zeroVector);break;case"omega":this._offsetOmegaOrigin=t,this._omegaOrigin.copy(this._offsetOmegaOrigin?this._origin:this._zeroVector);break;case"h":this._offsetHOrigin=t,this._hOrigin.copy(this._offsetHOrigin?this._origin:this._zeroVector);break;case"torque":this._offsetTorqueOrigin=t,this._torqueOrigin.copy(this._offsetTorqueOrigin?this._origin:this._zeroVector)}}showBodyAxis(e,t,i){this._showXBodyAxis=e,this._showYBodyAxis=t,this._showZBodyAxis=i;let n=this._bodyFrameOpacity;this._xBodyVectorShaftMesh.material.opacity=0,this._xBodyVectorArrowheadMesh.material.opacity=0,this._xBodyLabel.material[0].opacity=0,this._xBodyLabel.material[1].opacity=0,this._yBodyVectorShaftMesh.material.opacity=0,this._yBodyVectorArrowheadMesh.material.opacity=0,this._yBodyLabel.material[0].opacity=0,this._yBodyLabel.material[1].opacity=0,this._zBodyVectorShaftMesh.material.opacity=0,this._zBodyVectorArrowheadMesh.material.opacity=0,this._zBodyLabel.material[0].opacity=0,this._zBodyLabel.material[1].opacity=0,e&&(this._xBodyVectorShaftMesh.material.opacity=n,this._xBodyVectorArrowheadMesh.material.opacity=n,this._xBodyLabel.material[0].opacity=n,this._xBodyLabel.material[1].opacity=n),t&&(this._yBodyVectorShaftMesh.material.opacity=n,this._yBodyVectorArrowheadMesh.material.opacity=n,this._yBodyLabel.material[0].opacity=n,this._yBodyLabel.material[1].opacity=n),i&&(this._zBodyVectorShaftMesh.material.opacity=n,this._zBodyVectorArrowheadMesh.material.opacity=n,this._zBodyLabel.material[0].opacity=n,this._zBodyLabel.material[1].opacity=n),this.refresh()}},ss=/**
 SpecialEllipsoidGeometry is a modification of the THREE.js class
 EllipsoidGeometry.  xRadius, yRadius, and zRadius were added to
 give the ellipsoid the ability to have 3 different radii rather than 2.
**/class extends tR{constructor(e=1,t=2,i=3,n=32,r=32,a=0,s=2*Math.PI,o=0,l=Math.PI){super(),this.type="SpecialEllipsoidGeometry",this.parameters={xRadius:e,yRadius:t,zRadius:i,widthSegments:n,heightSegments:r,phiStart:a,phiLength:s,thetaStart:o,thetaLength:l},n=Math.max(3,Math.floor(n)),r=Math.max(2,Math.floor(r));let h=Math.min(o+l,Math.PI),c=0,u=[],d=new ei,p=new ei,m=[],f=[],g=[],_=[];// generate vertices, normals and uvs
for(let m=0;m<=r;m++){let v=[],y=m/r,x=0;0==m&&0==o?x=.5/n:m==r&&h==Math.PI&&(x=-.5/n);for(let r=0;r<=n;r++){let h=r/n;// vertex
d.x=-e*Math.cos(a+h*s)*Math.sin(o+y*l),d.y=t*Math.cos(o+y*l),d.z=i*Math.sin(a+h*s)*Math.sin(o+y*l),f.push(d.x,d.y,d.z),// normal
p.copy(d).normalize(),g.push(p.x,p.y,p.z),// uv
_.push(h+x,1-y),v.push(c++)}u.push(v)}// indices
for(let e=0;e<r;e++)for(let t=0;t<n;t++){let i=u[e][t+1],n=u[e][t],a=u[e+1][t],s=u[e+1][t+1];(0!==e||o>0)&&m.push(i,n,s),(e!==r-1||h<Math.PI)&&m.push(n,a,s)}// build geometry
this.setIndex(m),this.setAttribute("position",new tx(f,3)),this.setAttribute("normal",new tx(g,3)),this.setAttribute("uv",new tx(_,2))}};/**
 PoinsotAndCones is a class that encapsulates the computation of 
 THREE.js objects representing the body cones, space cones, and Poinsot's 
 construction, including the inertia ellipsoid, the invariable plane, the 
 polhode, and the herpolhode for use with the SixDOFObject class.
**/const so=2*Math.PI,sl=Math.sqrt(.5);var sh=class{constructor(e){this._quat=new et,this.simulationTime=0,this._h=.0025,//_h is changed in the receiveNonEphemeralData function
this._omega=new ei(0,0,0),this._H=new ei(0,0,0),this._inertiaMatrix=new I,this._torqueIsOn=!1,this._spaceConeDisplacement=0,this._bodyConeDisplacement=0,this._origin=new ei(0,0,0),this._conesOrigin=new ei(0,0,0),this._poinsotOrigin=new ei(0,0,0),this._offsetConesOrigin=!1,this._offsetPoinsotOrigin=!1,this._flipQuat=new et,this._flipQuat.setFromAxisAngle(new ei(1,0,0),0),this._flip180quat=new et,this._flip180quat.setFromAxisAngle(new ei(0,0,1),Math.PI),this._turn90quat=new et,this._turn90quat.setFromAxisAngle(new ei(1,0,0),Math.PI/2),this._poinsotScale=new ei(10,10,10),this._unitScale=new ei(1,1,1),this._sqrt2TOverH=0,this.needsRefresh=!0,this._coneSize=5,// _coneSize can be changed with setConeSize
this._xUnitVector=new ei(1,0,0),this._yUnitVector=new ei(0,1,0),this._zUnitVector=new ei(0,0,1),this._zeroVector=new ei(0,0,0),this._q0=new et,this._q1=new et,this._q2=new et,this._v0=new ei,this._v1=new ei,this._v2=new ei,this._bodyFrameXQuat=new et,this._bodyFrameYQuat=new et,this._bodyFrameZQuat=new et,this._bodyFrameXQuat.set(0,0,sl,sl),this._bodyFrameYQuat.set(0,0,0,1),this._bodyFrameZQuat.set(sl,0,0,sl),this._hQuat=new et,this._invariablePlaneDisplacement=0,this._showCones=!1,this._showPoinsot=!1,this._spaceConeMesh=null,this._bodyConeMesh=null,this._isAxisymmetric=!1,this._axisOfSymmetry=0,this._bodyHalfConeAngle=0,this._spaceHalfConeAngle=0,this._conesOpacity=0,this._poinsotOpacity=0,this._hodeCreationElapsedTime=0,this._oldHodeTime=0,//computation periods are the amount of time given to compute the polhode and
//herpolhode curves in seconds.  Their values are arbitrary.  For 
//axisymmetric cases, their values are set to the precession period.
//The polhode is a closed curve, but it is possible for it to be rendered as
//an open curve.  Also, if the rotation rate is high, it may be over drawn,
//and small computational errors can give the impression that it is not a
//single closed curve.
this._polhodeComputationPeriod=25,this._herpolhodeComputationPeriod=25,this._hodeUpdateCounter=0,this._hodeSkip=10,//_hodeSkip and _hodeUpdateCounter work together to help control the number
//of points that are used to generate the polehode and herpolhode curves.  
//Without them, a much larger amount of memory and computation would be needed.
//NOTE: If the rotation rate is high, the polhode and herpolhode curves
//      can be rendered not smoothe, when in fact they should be smoothe.  A
//      solution might be to set _hodeSkip more smartly in the future.  Until 
//      then, either be aware of this, or reduce the rotation rate.
this._polhode=[],this._herpolhode=[],this._polhodeMesh=null,this._herpolhodeMesh=null,this._bodyConeColor=16753920,this._spaceConeColor=16711680,this._ellipsoidColor=255,this._planeColor=65280,this._inertiaEllipsoidMesh=null,this._invariablePlaneMesh=null,this._scene=e,//constructionComplete is an admittedly kludgy way of ensuring that some
//code in this class does not execute until asynchronous code from other classes
//(such as Vectors) has completed execution.
this.constructionComplete=!1,this.construct()}receiveEphemeralData(e,t){this._quat=e,this.simulationTime=t}receiveNonEphemeralData(e,t,i,n,r,a,s,o,l){this._h=e,this._omega=t,this._H=i,this._inertiaMatrix=n,this._torqueIsOn=r,this._isAxisymmetric=a,this._axisOfSymmetry=s,this._origin=o,this.setOrientation(l)}/**
   refresh is called whenever the orientation of cones or Poinsot objects
   change relative to the inertial frame or when the camera changes its 
   position or lookat point.  This function does not generate the cones and 
   Poinsot objects (see _constructCones and _constructEllipsoidAndPlane).
  **/refresh(){this.constructionComplete&&!1!==this.needsRefresh&&(this.needsRefresh=!1,!this._torqueIsOn&&(this._q0.multiplyQuaternions(this._flipQuat,this._quat),this._v0.copy(this._H),0===this._v0.lengthSq()&&this._v0.set(1,1,1),this._v0.normalize(),this._hQuat.setFromUnitVectors(this._yUnitVector,this._v0),this._q1.multiplyQuaternions(this._q0,this._hQuat),this._showCones&&(null!=this._spaceConeMesh&&(this._q2.multiplyQuaternions(this._q1,this._flip180quat),this._v0.copy(this._H),this._v0.normalize(),this._v0.multiplyScalar(this._spaceConeDisplacement),this._v0.applyQuaternion(this._q0),this._v0.add(this._conesOrigin),this._spaceConeMesh.matrix.compose(this._v0,this._q2,this._unitScale)),null!=this._bodyConeMesh&&0!==this._axisOfSymmetry&&(1===this._axisOfSymmetry?(this._q1.multiplyQuaternions(this._q0,this._bodyFrameXQuat),this._q2.copy(this._q1),this._v0.set(1,0,0)):2===this._axisOfSymmetry?(this._q1.multiplyQuaternions(this._q0,this._bodyFrameYQuat),this._q2.multiplyQuaternions(this._q1,this._flip180quat),this._v0.set(0,1,0)):3===this._axisOfSymmetry&&(this._q1.multiplyQuaternions(this._q0,this._bodyFrameZQuat),this._q2.multiplyQuaternions(this._q1,this._flip180quat),this._v0.set(0,0,1)),this._v0.multiplyScalar(this._bodyConeDisplacement),this._v0.applyQuaternion(this._q0),this._v0.add(this._conesOrigin),this._bodyConeMesh.matrix.compose(this._v0,this._q2,this._unitScale))),this._showPoinsot&&(null!=this._inertiaEllipsoidMesh&&this._inertiaEllipsoidMesh.matrix.compose(this._poinsotOrigin,this._q0,this._poinsotScale),null!=this._polhodeMesh&&this._polhodeMesh.matrix.compose(this._poinsotOrigin,this._q0,this._unitScale),this._q1.multiplyQuaternions(this._q0,this._hQuat),this._v0.copy(this._H),this._v0.applyQuaternion(this._q0),this._v0.normalize(),this._q2.multiplyQuaternions(this._q1,this._turn90quat),this._v0.multiplyScalar(this._invariablePlaneDisplacement),this._v0.add(this._poinsotOrigin),null!=this._invariablePlaneMesh&&this._invariablePlaneMesh.matrix.compose(this._v0,this._q2,this._poinsotScale),null!=this._herpolhodeMesh&&(this._q2.set(0,0,0,1),this._herpolhodeMesh.matrix.compose(this._poinsotOrigin,this._q2,this._unitScale)))))}construct(){this.needsRefresh=!0,this._constructEllipsoidAndPlane(),this._v1.copy(this._omega),this._v1.applyMatrix3(this._inertiaMatrix);let e=.5*this._v1.dot(this._omega),t=this._H.length();this._sqrt2TOverH=Math.sqrt(2*e)/t,this._invariablePlaneDisplacement=10*this._sqrt2TOverH,this._constructCones(),this.initializePolhodeAndHerpolhode()}showCones(e){this._showCones!==e&&(this._showCones=e,this.needsRefresh=!0,null!=this._bodyConeMesh&&null!=this._spaceConeMesh&&(e?(this._scene.add(this._bodyConeMesh),this._scene.add(this._spaceConeMesh),this._bodyConeMesh.visible=!0,this._spaceConeMesh.visible=!0):(this._scene.remove(this._bodyConeMesh),this._scene.remove(this._spaceConeMesh),this._bodyConeMesh.visible=!1,this._spaceConeMesh.visible=!1)))}showPoinsot(e){if(this._showPoinsot===e||(this._showPoinsot=e,null==this._inertiaEllipsoidMesh||null==this._invariablePlaneMesh))return;this.needsRefresh=!0;let t=this._scene;this._hodeCreationElapsedTime=0,e?(t.add(this._inertiaEllipsoidMesh),t.add(this._invariablePlaneMesh),this._inertiaEllipsoidMesh.visible=!0,this._invariablePlaneMesh.visible=!0):(t.remove(this._inertiaEllipsoidMesh),t.remove(this._invariablePlaneMesh),this._inertiaEllipsoidMesh.visible=!1,this._invariablePlaneMesh.visible=!1,this.initializePolhodeAndHerpolhode())}setOpacity(e,t){switch(this.needsRefresh=!0,e){case"cones":this._conesOpacity=t,null!=this._bodyConeMesh&&null!=this._spaceConeMesh&&(this._bodyConeMesh.material.opacity=t,this._spaceConeMesh.material.opacity=t);break;case"poinsot":this._poinsotOpacity=t,null!=this._inertiaEllipsoidMesh&&(this._inertiaEllipsoidMesh.material.opacity=t,this._invariablePlaneMesh.material.opacity=t)}}_colorForName(e){let t;switch(e){case"red":t=16711680;//0xff5555;//light red (pink)
break;case"green":t=65280;//0x55ff55;//light green
break;case"blue":t=255;//0x5555ff;//light blue
break;case"yellow":t=16776960;//0xffff55;//light yellow
break;case"purple":t=8388736;//0xcbc3e3;//light purple
break;case"orange":t=16753920;//0xffd580;//light orange
}return t}setColor(e,t){this.needsRefresh=!0;let i=this._colorForName(t);switch(e){case"bodyCone":this._bodyConeColor=i,null!=this._bodyConeMesh&&this._bodyConeMesh.material.color.set(i);break;case"spaceCone":this._spaceConeColor=i,null!=this._spaceConeMesh&&this._spaceConeMesh.material.color.set(i);break;case"ellipsoid":this._ellipsoidColor=i,null!=this._inertiaEllipsoidMesh&&this._inertiaEllipsoidMesh.material.color.set(i);break;case"plane":this._planeColor=i,null!=this._invariablePlaneMesh&&this._invariablePlaneMesh.material.color.set(i)}}setOffsets(e,t){this._offsetConesOrigin=e,this._offsetPoinsotOrigin=t}setOrientation(e){switch(e){case"X Up":this._flipQuat.setFromAxisAngle(new ei(0,0,1),Math.PI/2),this._origin.set(6.5,-6.5,-6.5);break;case"Y Up":this._flipQuat.setFromAxisAngle(new ei(1,0,0),0),this._origin.set(-6.5,-6.5,-6.5);break;case"Z Up":this._flipQuat.setFromAxisAngle(new ei(1,0,0),-Math.PI/2),this._origin.set(-6.5,-6.5,6.5);break;case"X Down":this._flipQuat.setFromAxisAngle(new ei(0,0,1),-Math.PI/2),this._origin.set(-6.5,6.5,-6.5);break;case"Y Down":this._flipQuat.setFromAxisAngle(new ei(1,0,0),Math.PI),this._origin.set(-6.5,6.5,6.5);break;case"Z Down":this._flipQuat.setFromAxisAngle(new ei(1,0,0),Math.PI/2),this._origin.set(-6.5,6.5,-6.5)}this._conesOrigin.copy(this._offsetConesOrigin?this._origin:this._zeroVector),this._poinsotOrigin.copy(this._offsetPoinsotOrigin?this._origin:this._zeroVector)}setOrigin(e,t){switch(this.needsRefresh=!0,e){case"cones":this._offsetConesOrigin=t,this._conesOrigin.copy(this._offsetConesOrigin?this._origin:this._zeroVector);break;case"poinsot":this._offsetPoinsotOrigin=t,this._poinsotOrigin.copy(this._offsetPoinsotOrigin?this._origin:this._zeroVector),this.initializePolhodeAndHerpolhode()}}_constructCones(){if(!this._isAxisymmetric){null!=this._bodyConeMesh&&(this._bodyConeMesh.visible=!1),null!=this._spaceConeMesh&&(this._spaceConeMesh.visible=!1),this._bodyHalfConeAngle=0,this._spaceHalfConeAngle=0;return}let e=0===this._omega.lengthSq();if(e){null!=this._bodyConeMesh&&(this._showCones&&this._scene.remove(this._bodyConeMesh),this._bodyConeMesh=null),null!=this._spaceConeMesh&&(this._showCones&&this._scene.remove(this._spaceConeMesh),this._spaceConeMesh=null);return}this._v0.copy(this._omega),this._v0.normalize(),this._v1.copy(this._H),this._v1.normalize(),1===this._axisOfSymmetry?this._v2.set(1,0,0):2===this._axisOfSymmetry?this._v2.set(0,1,0):3===this._axisOfSymmetry?this._v2.set(0,0,1):this._v2.set(0,0,0);let t=this._v2.dot(this._v0),i=this._v0.dot(this._v1),n=Math.acos(t),r=Math.acos(i),a=n===this._bodyHalfConeAngle&&r===this._spaceHalfConeAngle||0===t||1===t||0===i||1===i;if(a)return;this._bodyHalfConeAngle=n,this._spaceHalfConeAngle=r,this.needsRefresh=!0,null!=this._bodyConeMesh&&(this._showCones&&this._scene.remove(this._bodyConeMesh),this._bodyConeMesh=null),null!=this._spaceConeMesh&&(this._showCones&&this._scene.remove(this._spaceConeMesh),this._spaceConeMesh=null);let s=this._coneSize*Math.sin(n),o=this._coneSize*Math.sin(r);this._bodyConeDisplacement=t*this._coneSize/2,this._spaceConeDisplacement=i*this._coneSize/2;let l=new am({color:this._bodyConeColor,side:2,transparent:!0,opacity:this._conesOpacity});l.blending=5,l.blendSrc=204,l.blendDst=205,l.blendEquation=100;let h=new rq(s,t*this._coneSize,32,1,!0);this._bodyConeMesh=new tX(h,l),this._bodyConeMesh.matrixAutoUpdate=!1,this._showCones&&null!=this._bodyConeMesh&&(this._scene.add(this._bodyConeMesh),this._bodyConeMesh.visible=!0);let c=new am({color:this._spaceConeColor,side:2,transparent:!0,opacity:this._conesOpacity});c.blending=5,c.blendSrc=204,c.blendDst=205,c.blendEquation=100;let u=new rq(o,i*this._coneSize,32,1,!0);this._spaceConeMesh=new tX(u,c),this._spaceConeMesh.matrixAutoUpdate=!1,this._showCones&&null!=this._spaceConeMesh&&(this._scene.add(this._spaceConeMesh),this._spaceConeMesh.visible=!0)}setConeSize(e){this._coneSize=Number(e),this._constructCones(),this.refresh()}_constructEllipsoidAndPlane(){let e=0===this._omega.lengthSq();if(e||(null!=this._inertiaEllipsoidMesh&&null!=this._invariablePlaneMesh&&(this._scene.remove(this._inertiaEllipsoidMesh),this._scene.remove(this._invariablePlaneMesh),this._inertiaEllipsoidMesh=null,this._invariablePlaneMesh=null,this.initializePolhodeAndHerpolhode()),!this._showPoinsot))return;let t=this._inertiaMatrix.elements[0],i=this._inertiaMatrix.elements[4],n=this._inertiaMatrix.elements[8],r=new ss(Math.sqrt(1/t),Math.sqrt(1/i),Math.sqrt(1/n)),a=new af({color:this._ellipsoidColor,transparent:!0,opacity:this._poinsotOpacity});a.blending=5,a.blendSrc=204,a.blendDst=205,a.blendEquation=100,this._inertiaEllipsoidMesh=new tX(r,a),this._inertiaEllipsoidMesh.matrixAutoUpdate=!1,this._inertiaEllipsoidMesh.position.set(0,0,0),this._inertiaEllipsoidMesh.matrix.compose(this._poinsotOrigin,this._quat,this._poinsotScale);let s=new rH(1,64),o=new tm({color:this._planeColor,transparent:!0,opacity:this._poinsotOpacity,side:2});o.blending=5,o.blendSrc=204,o.blendDst=205,o.blendEquation=100,this._invariablePlaneMesh=new tX(s,o),this._invariablePlaneMesh.matrixAutoUpdate=!1,this._invariablePlaneMesh.position.set(0,0,0),this._invariablePlaneMesh.matrix.compose(this._poinsotOrigin,this._quat,this._poinsotScale),this._showPoinsot&&(this._scene.add(this._inertiaEllipsoidMesh),this._scene.add(this._invariablePlaneMesh)),this.initializePolhodeAndHerpolhode()}initializePolhodeAndHerpolhode(){if(!0===this._isAxisymmetric){let e=this._H.length(),t=0,i=0;1===this._axisOfSymmetry?t=(i=e/this._inertiaMatrix.elements[4])*Math.abs(this._inertiaMatrix.elements[0]-this._inertiaMatrix.elements[4])/this._inertiaMatrix.elements[0]:2===this._axisOfSymmetry?t=(i=e/this._inertiaMatrix.elements[8])*Math.abs(this._inertiaMatrix.elements[4]-this._inertiaMatrix.elements[8])/this._inertiaMatrix.elements[4]:3===this._axisOfSymmetry&&(t=(i=e/this._inertiaMatrix.elements[0])*Math.abs(this._inertiaMatrix.elements[8]-this._inertiaMatrix.elements[0])/this._inertiaMatrix.elements[8]),this._herpolhodeComputationPeriod=so/i,this._polhodeComputationPeriod=so/t+this._herpolhodeComputationPeriod,this._hodeSkip=Math.floor(this._polhodeComputationPeriod/this._h/500)}else this._polhodeComputationPeriod=25,this._herpolhodeComputationPeriod=25,this._hodeSkip=Math.floor(this._polhodeComputationPeriod/this._h/500);null!=this._polhodeMesh&&(this._scene.remove(this._polhodeMesh),this._polhodeMesh=null),null!=this._herpolhodeMesh&&(this._scene.remove(this._herpolhodeMesh),this._herpolhodeMesh=null),this._polhode.length=0,this._herpolhode.length=0,this._hodeUpdateCounter=0,this._hodeCreationElapsedTime=this._h,this._oldHodeTime=this.simulationTime,this.refresh()}doPolhodeHerpolhodeComputations(){if(!this._showPoinsot||this._torqueIsOn)return;if(0===this._hodeCreationElapsedTime){this.initializePolhodeAndHerpolhode();return}let e=this._polhodeComputationPeriod<this._herpolhodeComputationPeriod?this._polhodeComputationPeriod:this._herpolhodeComputationPeriod,t=this._polhodeComputationPeriod>=this._herpolhodeComputationPeriod?this._polhodeComputationPeriod:this._herpolhodeComputationPeriod;if(this._hodeCreationElapsedTime<t){if(this._hodeUpdateCounter%this._hodeSkip==0){let t=new ei;t.copy(this._omega),t.normalize();let i=new ei;i.copy(this._H),i.normalize();let n=i.dot(t);0!==n&&(t.multiplyScalar(this._sqrt2TOverH/n),t.multiplyScalar(10));let r=new ei;r.copy(t),this._q0.multiplyQuaternions(this._flipQuat,this._quat),t.applyQuaternion(this._q0),this._polhode.length<200&&(this._hodeCreationElapsedTime<=e?(this._polhode.push(r),this._herpolhode.push(t)):e===this._polhodeComputationPeriod?this._herpolhode.push(t):this._polhode.push(r))}this._hodeUpdateCounter+=1,this._hodeCreationElapsedTime+=this.simulationTime-this._oldHodeTime,this._oldHodeTime=this.simulationTime}else if(null==this._herpolhodeMesh){let e=new rm({color:16777215}),t=new rB,i=new rB;for(let e=1;e<this._polhode.length;e++)t.add(new rO(this._polhode[e-1],this._polhode[e]));for(let e=1;e<this._herpolhode.length;e++)i.add(new rO(this._herpolhode[e-1],this._herpolhode[e]));let n=new ap(t,512,.02,4,!1//closed
),r=new ap(i,512,.02,4,!1//closed
);this._polhodeMesh=new rx(n,e),this._herpolhodeMesh=new rx(r,e),this._polhodeMesh.matrixAutoUpdate=!1,this._herpolhodeMesh.matrixAutoUpdate=!1,this._scene.add(this._polhodeMesh),this._scene.add(this._herpolhodeMesh)}}};// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one-finger move
//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move
const sc={type:"change"},su={type:"start"},sd={type:"end"};class sp extends M{constructor(e,t){super(),void 0===t&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),t===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",// Set to false to disable this control
this.enabled=!0,// "target" sets the location of focus, where the object orbits around
this.target=new ei,// How far you can dolly in and out ( PerspectiveCamera only )
this.minDistance=0,this.maxDistance=1/0,// How far you can zoom in and out ( OrthographicCamera only )
this.minZoom=0,this.maxZoom=1/0,// How far you can orbit vertically, upper and lower limits.
// Range is 0 to Math.PI radians.
this.minPolarAngle=0,this.maxPolarAngle=Math.PI,// How far you can orbit horizontally, upper and lower limits.
// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,// Set to true to enable damping (inertia)
// If damping is enabled, you must call controls.update() in your animation loop
this.enableDamping=!1,this.dampingFactor=.05,// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
// Set to false to disable zooming
this.enableZoom=!0,this.zoomSpeed=1,// Set to false to disable rotating
this.enableRotate=!0,this.rotateSpeed=1,// Set to false to disable panning
this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,// Set to true to automatically rotate around the target
// If auto-rotate is enabled, you must call controls.update() in your animation loop
this.autoRotate=!1,this.autoRotateSpeed=2,// The four arrow keys
this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},// Mouse buttons
this.mouseButtons={LEFT:u.ROTATE,MIDDLE:u.DOLLY,RIGHT:u.PAN},// Touch fingers
this.touches={ONE:d.ROTATE,TWO:d.DOLLY_PAN},// for reset
this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,// the target DOM element for key events
this._domElementKeyEvents=null,//
// public methods
//
this.getPolarAngle=function(){return s.phi},this.getAzimuthalAngle=function(){return s.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",W),this._domElementKeyEvents=e},this.saveState=function(){i.target0.copy(i.target),i.position0.copy(i.object.position),i.zoom0=i.object.zoom},this.reset=function(){i.target.copy(i.target0),i.object.position.copy(i.position0),i.object.zoom=i.zoom0,i.object.updateProjectionMatrix(),i.dispatchEvent(sc),i.update(),r=n.NONE},// this method is exposed, but perhaps it would be better if we can make it private...
this.update=function(){let t=new ei,u=new et().setFromUnitVectors(e.up,new ei(0,1,0)),d=u.clone().invert(),p=new ei,m=new et,f=2*Math.PI;return function(){let e=i.object.position;t.copy(e).sub(i.target),// rotate offset to "y-axis-is-up" space
t.applyQuaternion(u),// angle from z-axis around y-axis
s.setFromVector3(t),i.autoRotate&&r===n.NONE&&T(2*Math.PI/60/60*i.autoRotateSpeed),i.enableDamping?(s.theta+=o.theta*i.dampingFactor,s.phi+=o.phi*i.dampingFactor):(s.theta+=o.theta,s.phi+=o.phi);// restrict theta to be between desired limits
let g=i.minAzimuthAngle,_=i.maxAzimuthAngle;return(// update condition is:
// min(camera displacement, camera rotation in radians)^2 > EPS
// using small-angle approximation cos(x/2) = 1 - x^2 / 8
isFinite(g)&&isFinite(_)&&(g<-Math.PI?g+=f:g>Math.PI&&(g-=f),_<-Math.PI?_+=f:_>Math.PI&&(_-=f),g<=_?s.theta=Math.max(g,Math.min(_,s.theta)):s.theta=s.theta>(g+_)/2?Math.max(g,s.theta):Math.min(_,s.theta)),// restrict phi to be between desired limits
s.phi=Math.max(i.minPolarAngle,Math.min(i.maxPolarAngle,s.phi)),s.makeSafe(),s.radius*=l,// restrict radius to be between desired limits
s.radius=Math.max(i.minDistance,Math.min(i.maxDistance,s.radius)),!0===i.enableDamping?i.target.addScaledVector(h,i.dampingFactor):i.target.add(h),t.setFromSpherical(s),// rotate offset back to "camera-up-vector-is-up" space
t.applyQuaternion(d),e.copy(i.target).add(t),i.object.lookAt(i.target),!0===i.enableDamping?(o.theta*=1-i.dampingFactor,o.phi*=1-i.dampingFactor,h.multiplyScalar(1-i.dampingFactor)):(o.set(0,0,0),h.set(0,0,0)),l=1,!!(c||p.distanceToSquared(i.object.position)>a||8*(1-m.dot(i.object.quaternion))>a)&&(i.dispatchEvent(sc),p.copy(i.object.position),m.copy(i.object.quaternion),c=!1,!0))}}(),this.dispose=function(){i.domElement.removeEventListener("contextmenu",X),i.domElement.removeEventListener("pointerdown",k),i.domElement.removeEventListener("pointercancel",G),i.domElement.removeEventListener("wheel",q),i.domElement.removeEventListener("pointermove",V),i.domElement.removeEventListener("pointerup",H),null!==i._domElementKeyEvents&&i._domElementKeyEvents.removeEventListener("keydown",W);//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?
};//
// internals
//
let i=this,n={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},r=n.NONE,a=1e-6,s=new a2,o=new a2,l=1,h=new ei,c=!1,p=new P,m=new P,f=new P,g=new P,_=new P,v=new P,y=new P,x=new P,M=new P,b=[],S={};function E(){return Math.pow(.95,i.zoomSpeed)}function T(e){o.theta-=e}let w=function(){let e=new ei;return function(t,i){e.setFromMatrixColumn(i,0),e.multiplyScalar(-t),h.add(e)}}(),A=function(){let e=new ei;return function(t,n){!0===i.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(i.object.up,e)),e.multiplyScalar(t),h.add(e)}}(),R=function(){let e=new ei;return function(t,n){let r=i.domElement;if(i.object.isPerspectiveCamera){// perspective
let a=i.object.position;e.copy(a).sub(i.target);let s=e.length();// we use only clientHeight here so aspect ratio does not distort speed
w(2*t*// half of the fov is center to top of screen
(s*=Math.tan(i.object.fov/2*Math.PI/180))/r.clientHeight,i.object.matrix),A(2*n*s/r.clientHeight,i.object.matrix)}else i.object.isOrthographicCamera?(// orthographic
w(t*(i.object.right-i.object.left)/i.object.zoom/r.clientWidth,i.object.matrix),A(n*(i.object.top-i.object.bottom)/i.object.zoom/r.clientHeight,i.object.matrix)):(// camera neither orthographic nor perspective
console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),i.enablePan=!1)}}();function L(e){i.object.isPerspectiveCamera?l/=e:i.object.isOrthographicCamera?(i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom*e)),i.object.updateProjectionMatrix(),c=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function C(e){i.object.isPerspectiveCamera?l*=e:i.object.isOrthographicCamera?(i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom/e)),i.object.updateProjectionMatrix(),c=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}//
// event callbacks - update the object state
//
function I(e){p.set(e.clientX,e.clientY)}function O(e){g.set(e.clientX,e.clientY)}function U(){if(1===b.length)p.set(b[0].pageX,b[0].pageY);else{let e=.5*(b[0].pageX+b[1].pageX),t=.5*(b[0].pageY+b[1].pageY);p.set(e,t)}}function N(){if(1===b.length)g.set(b[0].pageX,b[0].pageY);else{let e=.5*(b[0].pageX+b[1].pageX),t=.5*(b[0].pageY+b[1].pageY);g.set(e,t)}}function D(){let e=b[0].pageX-b[1].pageX,t=b[0].pageY-b[1].pageY;y.set(0,Math.sqrt(e*e+t*t))}function F(e){var t;if(1==b.length)m.set(e.pageX,e.pageY);else{let t=Z(e),i=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);m.set(i,n)}f.subVectors(m,p).multiplyScalar(i.rotateSpeed);let n=i.domElement;T(2*Math.PI*f.x/n.clientHeight),t=2*Math.PI*f.y/n.clientHeight,o.phi-=t,p.copy(m)}function B(e){if(1===b.length)_.set(e.pageX,e.pageY);else{let t=Z(e),i=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);_.set(i,n)}v.subVectors(_,g).multiplyScalar(i.panSpeed),R(v.x,v.y),g.copy(_)}function z(e){let t=Z(e),n=e.pageX-t.x,r=e.pageY-t.y;x.set(0,Math.sqrt(n*n+r*r)),M.set(0,Math.pow(x.y/y.y,i.zoomSpeed)),L(M.y),y.copy(x)}//
// event handlers - FSM: listen for events and reset state
//
function k(e){!1!==i.enabled&&(0===b.length&&(i.domElement.setPointerCapture(e.pointerId),i.domElement.addEventListener("pointermove",V),i.domElement.addEventListener("pointerup",H)),b.push(e),"touch"===e.pointerType?function(e){switch(Y(e),b.length){case 1:switch(i.touches.ONE){case d.ROTATE:if(!1===i.enableRotate)return;U(),r=n.TOUCH_ROTATE;break;case d.PAN:if(!1===i.enablePan)return;N(),r=n.TOUCH_PAN;break;default:r=n.NONE}break;case 2:switch(i.touches.TWO){case d.DOLLY_PAN:if(!1===i.enableZoom&&!1===i.enablePan)return;i.enableZoom&&D(),i.enablePan&&N(),r=n.TOUCH_DOLLY_PAN;break;case d.DOLLY_ROTATE:if(!1===i.enableZoom&&!1===i.enableRotate)return;i.enableZoom&&D(),i.enableRotate&&U(),r=n.TOUCH_DOLLY_ROTATE;break;default:r=n.NONE}break;default:r=n.NONE}r!==n.NONE&&i.dispatchEvent(su)}(e):function(e){let t;switch(e.button){case 0:t=i.mouseButtons.LEFT;break;case 1:t=i.mouseButtons.MIDDLE;break;case 2:t=i.mouseButtons.RIGHT;break;default:t=-1}switch(t){case u.DOLLY:if(!1===i.enableZoom)return;y.set(e.clientX,e.clientY),r=n.DOLLY;break;case u.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===i.enablePan)return;O(e),r=n.PAN}else{if(!1===i.enableRotate)return;I(e),r=n.ROTATE}break;case u.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===i.enableRotate)return;I(e),r=n.ROTATE}else{if(!1===i.enablePan)return;O(e),r=n.PAN}break;default:r=n.NONE}r!==n.NONE&&i.dispatchEvent(su)}(e))}function V(e){!1!==i.enabled&&("touch"===e.pointerType?function(e){switch(Y(e),r){case n.TOUCH_ROTATE:if(!1===i.enableRotate)return;F(e),i.update();break;case n.TOUCH_PAN:if(!1===i.enablePan)return;B(e),i.update();break;case n.TOUCH_DOLLY_PAN:if(!1===i.enableZoom&&!1===i.enablePan)return;i.enableZoom&&z(e),i.enablePan&&B(e),i.update();break;case n.TOUCH_DOLLY_ROTATE:if(!1===i.enableZoom&&!1===i.enableRotate)return;i.enableZoom&&z(e),i.enableRotate&&F(e),i.update();break;default:r=n.NONE}}(e):function(e){if(!1!==i.enabled)switch(r){case n.ROTATE:if(!1===i.enableRotate)return;!function(e){var t;m.set(e.clientX,e.clientY),f.subVectors(m,p).multiplyScalar(i.rotateSpeed);let n=i.domElement;T(2*Math.PI*f.x/n.clientHeight),t=2*Math.PI*f.y/n.clientHeight,o.phi-=t,p.copy(m),i.update()}(e);break;case n.DOLLY:if(!1===i.enableZoom)return;x.set(e.clientX,e.clientY),M.subVectors(x,y),M.y>0?L(E()):M.y<0&&C(E()),y.copy(x),i.update();break;case n.PAN:if(!1===i.enablePan)return;_.set(e.clientX,e.clientY),v.subVectors(_,g).multiplyScalar(i.panSpeed),R(v.x,v.y),g.copy(_),i.update()}}(e))}function H(e){j(e),0===b.length&&(i.domElement.releasePointerCapture(e.pointerId),i.domElement.removeEventListener("pointermove",V),i.domElement.removeEventListener("pointerup",H)),i.dispatchEvent(sd),r=n.NONE}function G(e){j(e)}function q(e){!1!==i.enabled&&!1!==i.enableZoom&&r===n.NONE&&(e.preventDefault(),i.dispatchEvent(su),e.deltaY<0?C(E()):e.deltaY>0&&L(E()),i.update(),i.dispatchEvent(sd))}function W(e){!1!==i.enabled&&!1!==i.enablePan&&function(e){let t=!1;switch(e.code){case i.keys.UP:R(0,i.keyPanSpeed),t=!0;break;case i.keys.BOTTOM:R(0,-i.keyPanSpeed),t=!0;break;case i.keys.LEFT:R(i.keyPanSpeed,0),t=!0;break;case i.keys.RIGHT:R(-i.keyPanSpeed,0),t=!0}t&&(// prevent the browser from scrolling on cursor keys
e.preventDefault(),i.update())}(e)}function X(e){!1!==i.enabled&&e.preventDefault()}function j(e){delete S[e.pointerId];for(let t=0;t<b.length;t++)if(b[t].pointerId==e.pointerId){b.splice(t,1);return}}function Y(e){let t=S[e.pointerId];void 0===t&&(t=new P,S[e.pointerId]=t),t.set(e.pageX,e.pageY)}function Z(e){let t=e.pointerId===b[0].pointerId?b[1]:b[0];return S[t.pointerId]}//
i.domElement.addEventListener("contextmenu",X),i.domElement.addEventListener("pointerdown",k),i.domElement.addEventListener("pointercancel",G),i.domElement.addEventListener("wheel",q,{passive:!1}),// force an update at start
this.update()}}let sm=null,sf=null,sg=null,s_=new ei(-25,0,0);const sv=[0,0,0];let sy=null,sx=null,sM=null,sb=null,sS=null,sE=!1;const sT=Math.PI/180,sw=[1451422e-12,1451422e-10,.01451422,.0725711,.1451422,.2902844,.725711,1.451422],sA=["LEO","100 X LEO","10K X LEO","50K X LEO","100K X LEO","200K X LEO","500K X LEO","1M X LEO"];let sR=sw[5];const sL=[1,2,5,10,20,50,100,200,500,1e3],sC="omega";let sP=-1;const sI="axis-labels",sO="select-an-object",sU="atmosphere",sN="yellow",sD="blue",sF="green",sB="purple",sz="orange",sk="blue",sV="green",sH="Z Down";//aerovisualizerData is modified and saved to local storage when preferences are 
//changed and is retrieved from local storage at startup
let sG=[{name:"mass",value:1},{name:"length",value:4},{name:"width",value:4},{name:"height",value:7},{name:"attitudeOption",value:1},{name:"eulerAngle1",value:-10},{name:"eulerAngle2",value:-20},{name:"eulerAngle3",value:-30},{name:"omegaMagnitude",value:3},{name:"omHihat",value:0},{name:"omHjhat",value:100},{name:"omHkhat",value:100},{name:"omegaOrH",value:sC},{name:"torqueOption",value:1},{name:"torqueMag",value:4},{name:"torqueIhat",value:100},{name:"torqueJhat",value:0},{name:"torqueKhat",value:0},{name:"torqueACSDZ",value:.5},{name:"torqueACSTorque",value:.1},{name:"torqueGG",value:5},{name:"torqueTopR",value:1},{name:"torqueTopGrav",value:1},{name:"objectAppearance",value:sI},{name:"objectMassProperties",value:sO},{name:"environment",value:sU},{name:"maxOmega",value:720},{name:"vectorSize",value:6},{name:"objectTransparency",value:0},{name:"bodyFrameTransparency",value:0},{name:"showBodyXVector",value:!0},{name:"showBodyYVector",value:!0},{name:"showBodyZVector",value:!0},{name:"spaceFrameTransparency",value:0},{name:"omegaTransparency",value:0},{name:"hTransparency",value:0},{name:"torqueTransparency",value:Number(0)},{name:"conesTransparency",value:Number(50)},{name:"poinsotTransparency",value:Number(100)},{name:"objectOffset",value:!1},{name:"bodyFrameOffset",value:!1},{name:"spaceFrameOffset",value:!0},{name:"omegaOffset",value:!1},{name:"hOffset",value:!1},{name:"torqueOffset",value:!1},{name:"conesOffset",value:!1},{name:"poinsotOffset",value:!1},{name:"bodyFrameColor",value:sN},{name:"spaceFrameColor",value:sD},{name:"omegaColor",value:sF},{name:"hColor",value:sB},{name:"torqueColor",value:"red"},{name:"bodyConeColor",value:sz},{name:"spaceConeColor",value:"red"},{name:"ellipsoidColor",value:sk},{name:"planeColor",value:sV},{name:"axesOrientation",value:sH},{name:"eulerOrder",value:"ZYX"}],sq=1,sW=4,sX=4,sj=7,sY=-10,sZ=-20,sQ=-30,sJ=0,sK=0,s$=0,s0=0,s1=3,s2=0,s3=100,s5=100,s4=sC,s6=1,s7=4,s8=100,s9=0,oe=0,ot=.5,oi=.1,on=5,or=1,oa=1,os=sI,oo=sO,ol=sU,oh=720,oc=6,ou=0,od=0,op=!0,om=!0,of=!0,og=0,o_=0,ov=0,oy=0,ox=50,oM=100,ob=!1,oS=!1,oE=!0,oT=!1,ow=!1,oA=!1,oR=!1,oL=!1,oC=sN,oP=sD,oI=sF,oO=sB,oU="red",oN=sz,oD="red",oF=sk,oB=sV,oz=1,ok="ZYX";const oV=document.getElementById("sixDOF-world"),oH=document.getElementById("play-pause-btn"),oG=document.getElementById("reset-btn"),oq=document.getElementById("numerical-btn"),oW=document.getElementById("info-btn"),oX=document.getElementById("info-return-btn"),oj=document.getElementById("mass-prop-btn"),oY=document.getElementById("attitude-btn"),oZ=document.getElementById("rotation-btn"),oQ=document.getElementById("torque-btn"),oJ=document.getElementById("preferences-btn"),oK=document.getElementById("mass-slider"),o$=document.getElementById("dimX-slider"),o0=document.getElementById("dimY-slider"),o1=document.getElementById("dimZ-slider"),o2=document.getElementById("mass-display"),o3=document.getElementById("dimX-display"),o5=document.getElementById("dimY-display"),o4=document.getElementById("dimZ-display"),o6=document.getElementById("ixx-number"),o7=document.getElementById("iyy-number"),o8=document.getElementById("izz-number"),o9=document.getElementById("attitude-input-btn1"),le=document.getElementById("attitude-input-btn2"),lt=document.getElementById("euler1-slider"),li=document.getElementById("euler2-slider"),ln=document.getElementById("euler3-slider"),lr=document.getElementById("euler1-display"),la=document.getElementById("euler2-display"),ls=document.getElementById("euler3-display"),lo=document.getElementById("zero-euler1-btn"),ll=document.getElementById("zero-euler2-btn"),lh=document.getElementById("zero-euler3-btn"),lc=document.getElementById("quat-angle"),lu=document.getElementById("quat-ihat-slider"),ld=document.getElementById("quat-jhat-slider"),lp=document.getElementById("quat-khat-slider"),lm=document.getElementById("quat-angle-display"),lf=document.getElementById("quat-ihat-display"),lg=document.getElementById("quat-jhat-display"),l_=document.getElementById("quat-khat-display"),lv=document.getElementById("zero-quat-angle-btn"),ly=document.getElementById("zero-quatX-btn"),lx=document.getElementById("zero-quatY-btn"),lM=document.getElementById("zero-quatZ-btn"),lb=document.getElementById("quatW-display"),lS=document.getElementById("quatX-display"),lE=document.getElementById("quatY-display"),lT=document.getElementById("quatZ-display"),lw=document.querySelectorAll('input[name="omega-or-H-radio"]'),lA=document.getElementById("omega-or-H-omega"),lR=document.getElementById("omega-or-H-H"),lL=document.getElementById("omegaMag"),lC=document.getElementById("omegaIhat"),lP=document.getElementById("omegaJhat"),lI=document.getElementById("omegaKhat"),lO=document.getElementById("omegaMag-display"),lU=document.getElementById("hMag-display"),lN=document.getElementById("omega-ihat-display"),lD=document.getElementById("omega-jhat-display"),lF=document.getElementById("omega-khat-display"),lB=document.getElementById("zero-omegax-btn"),lz=document.getElementById("zero-omegay-btn"),lk=document.getElementById("zero-omegaz-btn"),lV=document.getElementById("omegaP-display"),lH=document.getElementById("omegaQ-display"),lG=document.getElementById("omegaR-display"),lq=document.getElementById("torque-option-menu"),lW=document.getElementById("torqueMag"),lX=document.getElementById("torqueIhat"),lj=document.getElementById("torqueJhat"),lY=document.getElementById("torqueKhat"),lZ=document.getElementById("zero-torqueIhat-btn"),lQ=document.getElementById("zero-torqueJhat-btn"),lJ=document.getElementById("zero-torqueKhat-btn"),lK=document.getElementById("acs-omega-dead-zone-slider"),l$=document.getElementById("acs-torque-magnitude-slider"),l0=document.getElementById("torque-muOverR3"),l1=document.getElementById("torque-top-rdistance"),l2=document.getElementById("torque-top-gravity"),l3=document.getElementById("torqueMag-display"),l5=document.getElementById("torqueIhat-display"),l4=document.getElementById("torqueJhat-display"),l6=document.getElementById("torqueKhat-display"),l7=document.getElementById("acs-omega-dead-zone"),l8=document.getElementById("acs-torque-magnitude"),l9=document.getElementById("torque-muOverR3-display"),he=document.getElementById("torque-top-rdistance-display"),ht=document.getElementById("torque-top-gravity-display"),hi=document.getElementById("default-btn"),hn=document.getElementById("default-do-reset-btn"),hr=document.getElementById("general-btn"),ha=document.getElementById("object-btn"),hs=document.getElementById("body-frame-btn"),ho=document.getElementById("space-frame-btn"),hl=document.getElementById("omega-btn"),hh=document.getElementById("h-btn"),hc=document.getElementById("torque-prefs-btn"),hu=document.getElementById("axis-orientation-btn"),hd=document.getElementById("euler-angle-order-btn"),hp=document.getElementById("cones-btn"),hm=document.getElementById("poinsot-btn"),hf=document.getElementById("prefs-return-btn"),hg=document.getElementById("info-menu"),h_=document.getElementById("info-text"),hv=document.getElementById("numerical-elements-general"),hy=document.getElementById("info-elements"),hx=document.getElementById("attitude-euler-elements"),hM=document.getElementById("attitude-quaternion-elements"),hb=document.getElementById("general-elements"),hS=document.getElementById("mass-prop-elements"),hE=document.getElementById("rotation-elements"),hT=document.getElementById("torque-frame-elements"),hw=document.getElementById("acs-elements"),hA=document.getElementById("torque-gg-elements"),hR=document.getElementById("torque-top-elements"),hL=document.getElementById("torque-option-elements"),hC=document.getElementById("default-elements"),hP=document.getElementById("axis-orientation-elements"),hI=document.getElementById("euler-angle-order-elements"),hO=document.getElementById("object-elements"),hU=document.getElementById("body-frame-elements"),hN=document.getElementById("space-frame-elements"),hD=document.getElementById("omega-elements"),hF=document.getElementById("h-elements"),hB=document.getElementById("torque-elements"),hz=document.getElementById("cones-elements"),hk=document.getElementById("poinsot-elements"),hV=document.getElementById("ixx-display"),hH=document.getElementById("iyy-display"),hG=document.getElementById("izz-display"),hq=document.getElementById("dcm11-number"),hW=document.getElementById("dcm12-number"),hX=document.getElementById("dcm13-number"),hj=document.getElementById("dcm21-number"),hY=document.getElementById("dcm22-number"),hZ=document.getElementById("dcm23-number"),hQ=document.getElementById("dcm31-number"),hJ=document.getElementById("dcm32-number"),hK=document.getElementById("dcm33-number"),h$=document.getElementById("omega-P-number"),h0=document.getElementById("omega-Q-number"),h1=document.getElementById("omega-R-number"),h2=document.getElementById("hx-number"),h3=document.getElementById("hy-number"),h5=document.getElementById("hz-number"),h4=document.getElementById("tau-L-number"),h6=document.getElementById("tau-M-number"),h7=document.getElementById("tau-N-number"),h8=document.getElementById("quatW-number"),h9=document.getElementById("quatX-number"),ce=document.getElementById("quatY-number"),ct=document.getElementById("quatZ-number"),ci=document.getElementById("kinetic-energy-number"),cn=document.getElementById("object-appearance-choice-menu"),cr=document.getElementById("preset-mass-properties-menu"),ca=document.querySelectorAll('input[name="environment-radio"]'),cs=document.getElementById("max-omega"),co=document.getElementById("max-omega-display"),cl=document.getElementById("vector-size"),ch=document.getElementById("transparency-block"),cc=document.getElementById("transparency-block-display"),cu=document.getElementById("transparency-body-frame"),cd=document.getElementById("transparency-body-frame-display"),cp=document.getElementById("body-x"),cm=document.getElementById("body-y"),cf=document.getElementById("body-z"),cg=document.getElementById("transparency-space-frame"),c_=document.getElementById("transparency-space-frame-display"),cv=document.getElementById("transparency-omega"),cy=document.getElementById("transparency-omega-display"),cx=document.getElementById("transparency-h"),cM=document.getElementById("transparency-h-display"),cb=document.getElementById("transparency-torque"),cS=document.getElementById("transparency-torque-display"),cE=document.getElementById("transparency-cones"),cT=document.getElementById("transparency-cones-display"),cw=document.getElementById("transparency-poinsot"),cA=document.getElementById("transparency-poinsot-display"),cR=document.getElementById("offset-object"),cL=document.getElementById("offset-body-frame"),cC=document.getElementById("offset-space-frame"),cP=document.getElementById("offset-omega"),cI=document.getElementById("offset-h"),cO=document.getElementById("offset-torque"),cU=document.getElementById("offset-cones"),cN=document.getElementById("offset-poinsot"),cD=document.getElementById("body-frame-color-menu"),cF=document.getElementById("space-frame-color-menu"),cB=document.getElementById("omega-color-menu"),cz=document.getElementById("h-color-menu"),ck=document.getElementById("torque-color-menu"),cV=document.getElementById("body-cone-color-menu"),cH=document.getElementById("space-cone-color-menu"),cG=document.getElementById("inertia-ellipsoid-color-menu"),cq=document.getElementById("invariable-plane-color-menu"),cW=document.querySelectorAll('input[name="orientation-radio"]'),cX=document.querySelectorAll('input[name="euler-order-radio"]'),cj=function(e,t){sG.forEach(i=>{i.name===e&&(i.value=t)})},cY=function(){localStorage.setItem("aerovisualizerData",JSON.stringify(sG))},cZ=function(){sE&&(sE=!1,oH.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-player-play-filled" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
    <path d="M6 4v16a1 1 0 0 0 1.524 .852l13 -8a1 1 0 0 0 0 -1.704l-13 -8a1 1 0 0 0 -1.524 .852z" stroke-width="0" fill="currentColor"></path>
 </svg>`,sx.realTime=0,sx.simulationTime=0,sy.getDelta())},cQ=function(e){switch(oq.disabled=!1,oj.disabled=!1,oY.disabled=!1,oZ.disabled=!1,oQ.disabled=!1,hv.style.display="none",hS.style.display="none",hx.style.display="none",hM.style.display="none",hE.style.display="none",hT.style.display="none",hw.style.display="none",hA.style.display="none",hR.style.display="none",hL.style.display="none",e){case"numerical":hv.style.display="grid",oq.disabled=!0,uo();break;case"attitude":1===oz?hx.style.display="grid":(hM.style.display="grid",c3(),sx.refresh(),sM.refresh(),sb.refresh()),oY.disabled=!0;break;case"massProp":oj.disabled=!0,"select-an-object"===oo?hS.style.display="grid":hS.style.display="none";break;case"rates":hE.style.display="grid",oZ.disabled=!0,ua();break;case"torque":hL.style.display="grid",oQ.disabled=!0,c$()}},cJ=function(){for(let e of cX)e.checked&&(sx.setEulerOrder(e.value),cj("eulerOrder",e.value));for(let e of cW)e.checked&&(sx.setOrientation(e.value),sM.setOrientation(e.value),sb.setOrientation(e.value),cj("axesOrientation",e.value));uh(ol,!0),ut(s4,!0)};oq.addEventListener("click",()=>{cQ("numerical")}),oj.addEventListener("click",()=>{cQ("massProp")}),oY.addEventListener("click",()=>{cQ("attitude")}),oZ.addEventListener("click",()=>{cQ("rates")}),oQ.addEventListener("click",()=>{cQ("torque")}),oJ.addEventListener("click",()=>{cZ(),cK()});const cK=function(){"none"===oV.style.display?(oV.style.display="block",oq.style.display="block",oY.style.display="block",oj.style.display="block",oZ.style.display="block",oQ.style.display="block",oJ.style.display="block",oH.style.display="block",oG.style.display="block",hi.style.display="none",hu.style.display="none",hd.style.display="none",ha.style.display="none",hs.style.display="none",ho.style.display="none",hl.style.display="none",hh.style.display="none",hc.style.display="none",hp.style.display="none",hm.style.display="none",hr.style.display="none",hf.style.display="none",cJ(),uS("none"),uE(),cQ("numerical"),c4()):(oV.style.display="none",oq.style.display="none",oY.style.display="none",oj.style.display="none",oZ.style.display="none",oQ.style.display="none",oJ.style.display="none",oH.style.display="none",oG.style.display="none",hi.style.display="block",hu.style.display="block",hd.style.display="block",ha.style.display="block",hs.style.display="block",ho.style.display="block",hl.style.display="block",hh.style.display="block",hc.style.display="block",hp.style.display="block",hm.style.display="block",hr.style.display="block",hf.style.display="block",cQ("none"))},c$=function(){switch(s6){case 1:ui(0);break;case 2:case 3:hT.style.display="grid",s6!=sP&&ui(1);break;case 4:hw.style.display="grid",s6!=sP&&ui(2);break;case 5:hA.style.display="grid",s6!=sP&&(l0.value=sw.indexOf(sR),l9.innerHTML=sA[+l0.value],sx.set3MuOverR3(3*sR),ui(3));break;case 6:hR.style.display="grid",s6!=sP&&(sx.setTopRDistance(or),sx.setTopGravity(oa),he.innerHTML=or,ht.innerHTML=oa,ui(4))}1===s6?(sb.showCones(ox<95),sb.showPoinsot(oM<95),sb.initializePolhodeAndHerpolhode()):(sb.showCones(!1),sb.showPoinsot(!1)),sx.needsRefresh=!0,sM.needsRefresh=!0,sb.needsRefresh=!0,sx.setOmega(s4,s1,s2,s3,s5),sx.reset(),sx.refresh(),sM.refresh(),sb.refresh(),uo(),sP=s6},c0=function(){un(),sx.setDimensionsAndInertiaProperties(sq,sW,sX,sj),c4(),sx.reset();//make sure that massSlider, dimXSlider, dimYSlider, and dimZSlider are
//such that there are not too many choices, otherwise things get called many
//times here as the slider is being moved. use onpointerup instead of oninput
},c1=function(){uo(!0),"select-an-object"!==oo&&(cr.value="select-an-object",cj("objectMassProperties",oo="select-an-object"),cj("mass",sq),cj("length",sW),cj("width",sX),cj("height",sj)),cY()};oK.oninput=function(){sq=sL[+oK.value],o2.innerHTML=sq,c0()},o$.oninput=function(){let e=+o$.value;// ensure that there are never two dimensions that are both
// zero.  This comment also applies to dimYSlider and dimZSlider
if(0===e&&0===sX||0===e&&0===sj){o$.value=1;return}sW=e,o3.innerHTML=sW,c0()},o0.oninput=function(){let e=+o0.value;if(0===e&&0===sW||0===e&&0===sj){o0.value=1;return}sX=e,o5.innerHTML=sX,c0()},o1.oninput=function(){let e=+o1.value;if(0===e&&0===sW||0===e&&0===sX){o1.value=1;return}sj=e,o4.innerHTML=sj,c0()},oK.onpointerup=function(){cj("mass",sq),c1()},o$.onpointerup=function(){cj("length",sW),c1()},o0.onpointerup=function(){cj("width",sX),c1()},o1.onpointerup=function(){cj("height",sj),c1()};const c2=function(){let[e,t,i,n]=sx.getQuaternionElements();sJ=e,sK=t,s$=i,s0=n},c3=function(){let e=Math.sqrt(sK*sK+s$*s$+s0*s0);0===e&&(//quatX is chosen at random, any unit vector is okay to use
sK=1,e=1);let t=sK/e,i=s$/e,n=s0/e,r=2*Math.acos(sJ=//safety check so that acos does not fail
(sJ=sJ>1?1:sJ)<-1?-1:sJ)/sT;r>=180&&(r-=360),r=//possibly unnecessary check so that theta goes
//from -180 to 179 like quaternianAngleSlider
(r=r>179?179:r)<-180?-180:r,//slider ihat, jhat, and khat values range from -100 to 100
lc.value=r,lu.value=100*t,ld.value=100*i,lp.value=100*n,lm.innerHTML=Number(r).toFixed(0).toString(),lf.innerHTML=Number(t).toFixed(2).toString(),lg.innerHTML=Number(i).toFixed(2).toString(),l_.innerHTML=Number(n).toFixed(2).toString(),lb.innerHTML=Number(sJ).toFixed(4).toString(),lS.innerHTML=Number(sK).toFixed(4).toString(),lE.innerHTML=Number(s$).toFixed(4).toString(),lT.innerHTML=Number(s0).toFixed(4).toString()},c5=function(){let[e,t,i]=sx.getEulerAngles();sY=e,sZ=t,sQ=i},c4=function(e=!0){e&&(1===s6?(sb.showCones(ox<95),sb.showPoinsot(oM<95)):(sb.showCones(!1),sb.showPoinsot(!1)),sx.setOmega(s4,s1,s2,s3,s5),sx.setEulerAngles(sY,sZ,sQ),sM.receiveVectorData(...sx.sendVectorData()),sb.receiveEphemeralData(...sx.sendPaCEphemeralData()),sb.receiveNonEphemeralData(...sx.sendPaCNonEphemeralData()),sb.construct()),sx.reset(),c2(),sx.needsRefresh=!0,sM.needsRefresh=!0,sb.needsRefresh=!0,sx.refresh(),sM.refresh(),sb.refresh(),ur(),uo(!0),cZ()};o9.addEventListener("click",()=>{c3(),sx.refresh(),sM.refresh(),sb.refresh(),oz=1===oz?2:1,cQ("attitude"),cj("attitudeOption",2),cY()}),le.addEventListener("click",()=>{lt.value=sY,li.value=sZ,ln.value=sQ,ur(),sx.refresh(),sM.refresh(),sb.refresh(),oz=1===oz?2:1,cQ("attitude"),cj("attitudeOption",1),cj("eulerAngle1",sY),cj("eulerAngle2",sZ),cj("eulerAngle3",sQ),cY()});const c6=function(){sY=lt.value,sZ=li.value,sQ=ln.value,sx.setEulerAngles(sY,sZ,sQ),c2(),ur(),cZ(),sM.needsRefresh=!0,sb.needsRefresh=!0};lt.oninput=function(){c6()},li.oninput=function(){c6()},ln.oninput=function(){c6()},lt.onpointerup=function(){c4(!1),sx.syncDCMtoQuat(),cj("eulerAngle1",this.value),cY()},li.onpointerup=function(){c4(!1),sx.syncDCMtoQuat(),cj("eulerAngle2",this.value),cY()},ln.onpointerup=function(){c4(!1),sx.syncDCMtoQuat(),cj("eulerAngle3",this.value),cY()},lo.addEventListener("click",()=>{lt.value=0,c6(),c4(!1),sx.syncDCMtoQuat(),cj("eulerAngle1",0),cY()}),ll.addEventListener("click",()=>{li.value=0,c6(),c4(!1),sx.syncDCMtoQuat(),cj("eulerAngle2",0),cY()}),lh.addEventListener("click",()=>{ln.value=0,c6(),c4(!1),sx.syncDCMtoQuat(),cj("eulerAngle3",0),cY()});const c7=function(){let e=Number(lc.value)/2*sT,t=lu.value,i=ld.value,n=lp.value,r=Math.sqrt(t*t+i*i+n*n),a=Math.sin(e);if(0===r){lf.innerHTML="?",lg.innerHTML="?",l_.innerHTML="?",lb.innerHTML="?",lS.innerHTML="?",lE.innerHTML="?",lT.innerHTML="?";return}t/=r,i/=r,n/=r,0===// normalize the quaternion
(r=Math.sqrt((sJ=Math.cos(e))*sJ+(sK=a*t)*sK+(s$=a*i)*s$+(s0=a*n)*s0))?(sJ=1,sK=0,s$=0,s0=0):(sJ/=r,sK/=r,s$/=r,s0/=r),lm.innerHTML=lc.value,lf.innerHTML=Number(t).toFixed(2).toString(),lg.innerHTML=Number(i).toFixed(2).toString(),l_.innerHTML=Number(n).toFixed(2).toString(),lb.innerHTML=Number(sJ).toFixed(4).toString(),lS.innerHTML=Number(sK).toFixed(4).toString(),lE.innerHTML=Number(s$).toFixed(4).toString(),lT.innerHTML=Number(s0).toFixed(4).toString(),sx.syncDCMtoQuat()},c8=function(){c7(),sx.setEulerAnglesFromQuaternion(sJ,sK,s$,s0),c5(),cZ(),sM.needsRefresh=!0,sb.needsRefresh=!0};lc.oninput=function(){c8()},lu.oninput=function(){c8()},ld.oninput=function(){c8()},lp.oninput=function(){c8()};const c9=function(){c4(!1),sx.syncDCMtoQuat(),cj("eulerAngle1",sY),cj("eulerAngle2",sZ),cj("eulerAngle3",sQ),cY()};lc.onpointerup=function(){c9()},lu.onpointerup=function(){c9()},ld.onpointerup=function(){c9()},lp.onpointerup=function(){c9()},lv.addEventListener("click",()=>{lc.value=0,c8(),c4(!1),cj("eulerAngle1",sY),cj("eulerAngle2",sZ),cj("eulerAngle3",sQ),cY()}),ly.addEventListener("click",()=>{lu.value=0,c8(),c4(!1),cj("eulerAngle1",sY),cj("eulerAngle2",sZ),cj("eulerAngle3",sQ),cY()}),lx.addEventListener("click",()=>{ld.value=0,c8(),c4(!1),cj("eulerAngle1",sY),cj("eulerAngle2",sZ),cj("eulerAngle3",sQ),cY()}),lM.addEventListener("click",()=>{lp.value=0,c8(),c4(!1),cj("eulerAngle1",sY),cj("eulerAngle2",sZ),cj("eulerAngle3",sQ),cY()});const ue=function(){// slider goes from 0 to 100, we want 10 to be the
// upper limit, so we divide by 10 here
s1=lL.value/10,s2=lC.value,s3=lP.value,s5=lI.value,c4(),sM.needsRefresh=!0,ua()};lL.oninput=function(){ua(),cZ()},lC.oninput=function(){ua(),cZ()},lP.oninput=function(){ua(),cZ()},lI.oninput=function(){ua(),cZ()},lL.onchange=function(){ue(),cj("omegaMagnitude",this.value),cY()},lC.onpointerup=function(){ue(),cj("omHihat",this.value),cY()},lP.onpointerup=function(){ue(),cj("omHjhat",this.value),cY()},lI.onpointerup=function(){ue(),cj("omHkhat",this.value),cY()},lB.addEventListener("click",()=>{lC.value=0,ua(),cZ(),ue(),cj("omHihat",0),cY()}),lz.addEventListener("click",()=>{lP.value=0,ua(),cZ(),ue(),cj("omHjhat",0),cY()}),lk.addEventListener("click",()=>{lI.value=0,ua(),cZ(),ue(),cj("omHkhat",0),cY()}),lA.addEventListener("click",()=>{s4="omega",ue(),cj("omegaOrH",s4),cY()}),lR.addEventListener("click",()=>{s4="H",ue(),cj("omegaOrH",s4),cY()});const ut=function(e,t=!1){for(let i of lw)t?i.checked&&cj("omegaOrH",i.value):i.checked=i.value===e,i.checked&&(s4=i.value)};lq.addEventListener("change",()=>{let e=lq.value;switch(e){case"no-torque":s6=1;break;case"space-frame":s6=2;break;case"body-frame":s6=3;break;case"ACS-stabilization":s6=4;break;case"gravity-gradient":s6=5;break;case"top":s6=6}cj("torqueOption",s6),cY(),cQ("torque"),c4()}),lW.oninput=function(){us(),cZ()},lX.oninput=function(){us(),cZ()},lj.oninput=function(){us(),cZ()},lY.oninput=function(){us(),cZ()},lK.oninput=function(){cZ(),ot=Number(lK.value)/10,l7.innerHTML=Number(ot).toFixed(1).toString(),sx.setACSDeadzoneOmega(ot*sT),uo()},l$.oninput=function(){cZ(),oi=Number(l$.value)/100,l8.innerHTML=Number(oi).toFixed(2).toString(),sx.setACSTorque(oi),uo()},l0.oninput=function(){sR=sw[on=+l0.value],l9.innerHTML=sA[+l0.value],sx.set3MuOverR3(3*sR),cZ()},l1.oninput=function(){or=Number(l1.value),he.innerHTML=or,sx.setTopRDistance(or),cZ()},l2.oninput=function(){oa=l2.value,ht.innerHTML=oa,sx.setTopGravity(oa),cZ()};const ui=function(e){switch(// slider goes from 0 to 50, but we want 10 to be the
// upper limit, so we divide by 5 here
s7=lW.value/5,s8=lX.value,s9=lj.value,oe=lY.value,e){case 0:case 1:cj("torqueMag",s7),cj("torqueIhat",s8),cj("torqueJhat",s9),cj("torqueKhat",oe);break;case 2:cj("torqueACSDZ",ot),cj("torqueACSTorque",oi);break;case 3:cj("torqueGG",on);break;case 4:cj("torqueTopR",or),cj("torqueTopGrav",oa)}sx.setEulerAngles(sY,sZ,sQ),sx.setOmega(s4,s1,s2,s3,s5),sx.setTorque(s6,s7,s8,s9,oe),sM.receiveVectorData(...sx.sendVectorData()),sM.needsRefresh=!0,cY(),c4(),cZ(),us()};lW.onpointerup=function(){ui(1)},lX.onpointerup=function(){ui(1)},lj.onpointerup=function(){ui(1)},lY.onpointerup=function(){ui(1)},lZ.addEventListener("click",()=>{lX.value=0,ui(1)}),lQ.addEventListener("click",()=>{lj.value=0,ui(1)}),lJ.addEventListener("click",()=>{lY.value=0,ui(1)}),lK.onpointerup=function(){ui(2)},l$.onpointerup=function(){ui(2)},l0.onpointerup=function(){ui(3)},l1.onpointerup=function(){ui(4)},l2.onpointerup=function(){ui(4)};const un=function(){let e=0,t=0,i=0;if("select-an-object"===oo){// allow one dimension to be zero but not two or more,
// this is not necessary if we check before the function
// but might be good for safety
let n=0===sW,r=0===sX,a=0===sj;n&&r||n&&a||r&&a?(e=0,t=0,i=0):(e=Math.round((sX*sX+sj*sj)*sq/12*100)/100,t=Math.round((sW*sW+sj*sj)*sq/12*100)/100,i=Math.round((sW*sW+sX*sX)*sq/12*100)/100)}else[e,t,i]=sx.getMomentsOfInertia();o6.innerHTML=e,o7.innerHTML=t,o8.innerHTML=i,hV.innerHTML=e,hH.innerHTML=t,hG.innerHTML=i},ur=function(){lr.innerHTML=+lt.value,la.innerHTML=+li.value,ls.innerHTML=+ln.value,uo(!0)},ua=function(){let e=s2,t=s3,i=s5,n=s1,r=Math.sqrt(e*e+t*t+i*i);if(0===r){lN.innerHTML="?",lD.innerHTML="?",lF.innerHTML="?",lV.innerHTML="?",lH.innerHTML="?",lG.innerHTML="?";return}e=Number(e/r).toFixed(2).toString(),t=Number(t/r).toFixed(2).toString(),i=Number(i/r).toFixed(2).toString(),lO.innerHTML=Number(n).toFixed(2).toString(),lU.innerHTML=Number(sx.getAngularMomentumMagnitude()).toFixed(2).toString(),// the slider goes from 0 to 100, but the displayed
// value should go from 0 to 10
lN.innerHTML=e,lD.innerHTML=t,lF.innerHTML=i,lV.innerHTML=Number(e*n).toFixed(2).toString(),lH.innerHTML=Number(t*n).toFixed(2).toString(),lG.innerHTML=Number(i*n).toFixed(2).toString()},us=function(){let e=lX.value,t=lj.value,i=lY.value,n=lW.value/5,r=Math.sqrt(e*e+t*t+i*i);if(0===r){l5.innerHTML="?",l4.innerHTML="?",l6.innerHTML="?";return}l3.innerHTML=n,l5.innerHTML=Number(e/r).toFixed(2).toString(),l4.innerHTML=Number(t/r).toFixed(2).toString(),l6.innerHTML=Number(i/r).toFixed(2).toString(),uo(!0)},uo=function(e=!1){if((e||"grid"===hv.style.display)&&null!=sx){let e=Number(sx._omega.x).toFixed(3).toString(),t=Number(sx._omega.y).toFixed(3).toString(),i=Number(sx._omega.z).toFixed(3).toString(),n=Number(sx._Hinertial.x).toFixed(2).toString(),r=Number(sx._Hinertial.y).toFixed(2).toString(),a=Number(sx._Hinertial.z).toFixed(2).toString(),s=Number(sx._torque.x).toFixed(3).toString(),o=Number(sx._torque.y).toFixed(3).toString(),l=Number(sx._torque.z).toFixed(3).toString(),h=Number(sx._dcm.elements[0]).toFixed(3).toString(),c=Number(sx._dcm.elements[4]).toFixed(3).toString(),u=Number(sx._dcm.elements[8]).toFixed(3).toString(),d=Number(sx._dcm.elements[1]).toFixed(3).toString(),p=Number(sx._dcm.elements[5]).toFixed(3).toString(),m=Number(sx._dcm.elements[9]).toFixed(3).toString(),f=Number(sx._dcm.elements[2]).toFixed(3).toString(),g=Number(sx._dcm.elements[6]).toFixed(3).toString(),_=Number(sx._dcm.elements[10]).toFixed(3).toString(),[v,y,x,M]=sx.getQuaternionElements();v=Number(v).toFixed(4).toString(),y=Number(y).toFixed(4).toString(),x=Number(x).toFixed(4).toString(),M=Number(M).toFixed(4).toString(),h$.innerHTML="-"===e.charAt(0)?e:` ${e}`,h0.innerHTML="-"===t.charAt(0)?t:` ${t}`,h1.innerHTML="-"===i.charAt(0)?i:` ${i}`,h2.innerHTML="-"===n.charAt(0)?n:` ${n}`,h3.innerHTML="-"===r.charAt(0)?r:` ${r}`,h5.innerHTML="-"===a.charAt(0)?a:` ${a}`,h4.innerHTML="-"===s.charAt(0)?s:` ${s}`,h6.innerHTML="-"===o.charAt(0)?o:` ${o}`,h7.innerHTML="-"===l.charAt(0)?l:` ${l}`,hq.innerText="-"===h.charAt(0)?h:` ${h}`,hW.innerText="-"===c.charAt(0)?c:` ${c}`,hX.innerText="-"===u.charAt(0)?u:` ${u}`,hj.innerText="-"===d.charAt(0)?d:` ${d}`,hY.innerText="-"===p.charAt(0)?p:` ${p}`,hZ.innerText="-"===m.charAt(0)?m:` ${m}`,hQ.innerText="-"===f.charAt(0)?f:` ${f}`,hJ.innerText="-"===g.charAt(0)?g:` ${g}`,hK.innerText="-"===_.charAt(0)?_:` ${_}`,h8.innerHTML="-"===v.charAt(0)?v:` ${v}`,h9.innerHTML="-"===y.charAt(0)?y:` ${y}`,ce.innerHTML="-"===x.charAt(0)?x:` ${x}`,ct.innerHTML="-"===M.charAt(0)?M:` ${M}`;let b=sx.getKineticEnergy();ci.innerHTML=Number(b).toFixed(2).toString()}};cn.addEventListener("change",()=>{os=cn.value,sx.constructBlock(os),"axis-labels"===os?c0():"cessna-172"===os?(sW=9,sX=7,sj=4,o3.innerHTML=sW,o5.innerHTML=sX,o4.innerHTML=sj,o$.value=sW,o0.value=sX,o1.value=sj):"new-horizons"===os&&(sW=9,sX=4,sj=6,o3.innerHTML=sW,o5.innerHTML=sX,o4.innerHTML=sj,o$.value=sW,o0.value=sX,o1.value=sj),cj("objectAppearance",os),cj("dimX",sW),cj("dimY",sX),cj("dimZ",sj),cY()});const ul=function(e){cj("objectMassProperties",// mass, Ixx, Iyy, Izz metric
//Cessna 172 1043.3,1285.3,1824.9,2666.9
//New Horizons Probe  401,161.38,402.12,316
oo=e),"select-an-object"!==e?("cessna-172"===e?(sW=9,sX=7,sj=4):"new-horizons"===e&&(sW=9,sX=4,sj=6),o3.innerHTML=sW,o5.innerHTML=sX,o4.innerHTML=sj,o$.value=sW,o0.value=sX,o1.value=sj,sx.setPresetMassProperties(e)):sx.setDimensionsAndInertiaProperties(sq,sW,sX,sj),cj("mass",sq),cj("length",sW),cj("width",sX),cj("height",sj),un(),//look into this!  check if this is still true!!!!!
//moments of inertia are not displayed correctly for other than
//the first case, need to fix this
uo(!0),1===s6&&(sb.showPoinsot(oM<95),(sW===sX||sW===sj||sX===sj)&&sb.showCones(ox<95)),c4(),cY(),sx.needsRefresh=!0};cr.addEventListener("change",()=>{ul(cr.value)});const uh=function(e,t=!1){for(let i of ca)t?i.checked&&(cj("environment",i.value),cY()):i.checked=i.value===e,i.checked&&uN(i.value)};cs.oninput=function(){co.innerText=cs.value},cs.onpointerup=function(){cj("maxOmega",oh=Number(this.value)),cY()},cl.onpointerup=function(){sM.setVectorSize(this.value),sb.setConeSize(this.value),cj("vectorSize",this.value),cY()};const uc=function(e,t){let i=(100-t)/100;switch(sx.setOpacity(e,i),sM.setOpacity(e,i),sb.setOpacity(e,i),e){case"object":cc.innerHTML=t;break;case"bodyFrame":cd.innerHTML=t;break;case"spaceFrame":c_.innerHTML=t;break;case"omega":cy.innerHTML=t;break;case"h":cM.innerHTML=t;break;case"torque":cS.innerHTML=t;break;case"cones":cT.innerHTML=t;break;case"poinsot":cA.innerHTML=t}};ch.oninput=function(){cc.innerText=ch.value,uc("object",this.value)},ch.onpointerup=function(){uc("object",this.value),cj("objectTransparency",this.value),sx.showObject(this.value<95),cY()},cu.oninput=function(){cd.innerText=cu.value,uc("bodyFrame",this.value)},cu.onpointerup=function(){uc("bodyFrame",this.value),cj("bodyFrameTransparency",this.value),sM.showBodyFrame(this.value<95),cY()};const uu=function(){sM.showBodyAxis(cp.checked,cm.checked,cf.checked),n.clear(),n.render(t,i)};cp.addEventListener("change",()=>{uu(),cj("showBodyXVector",cp.checked),cY()}),cm.addEventListener("change",()=>{uu(),cj("showBodyYVector",cm.checked),cY()}),cf.addEventListener("change",()=>{uu(),cj("showBodyZVector",cf.checked),cY()}),cg.oninput=function(){c_.innerText=cg.value,uc("spaceFrame",this.value)},cg.onpointerup=function(){cj("spaceFrameTransparency",this.value),sM.showSpaceFrame(this.value<95),cY()},cv.oninput=function(){cy.innerText=cv.value,uc("omega",this.value)},cv.onpointerup=function(){uc("omega",this.value),cj("omegaTransparency",this.value),sM.showOmega(this.value<95),cY()},cx.oninput=function(){cM.innerText=cx.value,uc("h",this.value)},cx.onpointerup=function(){uc("h",this.value),cj("hTransparency",this.value),sM.showAngularMomentum(this.value<95),cY()},cb.oninput=function(){cS.innerText=cb.value,uc("torque",this.value)},cb.onpointerup=function(){uc("torque",this.value),cj("torqueTransparency",this.value),sM.showTorque(this.value<95),cY()},cE.oninput=function(){ox=Number(this.value),cT.innerText=this.value,uc("cones",this.value)},cE.onpointerup=function(){uc("cones",this.value),cj("conesTransparency",this.value),1===s6&&sb.showCones(this.value<95),cY()},cw.oninput=function(){oM=Number(this.value),cA.innerText=this.value},cw.onpointerup=function(){uc("poinsot",this.value),cj("poinsotTransparency",this.value),sb.showPoinsot(this.value<95),cY()},cR.addEventListener("change",()=>{sx.setOrigin("object",cR.checked),cj("objectOffset",cR.checked),cY(),sx.refresh()}),cL.addEventListener("change",()=>{sM.setOrigin("bodyFrame",cL.checked),cj("bodyFrameOffset",cL.checked),cY(),sM.refresh()}),cC.addEventListener("change",()=>{sM.setOrigin("spaceFrame",cC.checked),cj("spaceFrameOffset",cC.checked),cY(),sM.refresh()}),cP.addEventListener("change",()=>{sM.setOrigin("omega",cP.checked),cj("omegaOffset",cP.checked),cY(),sM.refresh()}),cI.addEventListener("change",()=>{sM.setOrigin("h",cI.checked),cj("hOffset",cI.checked),cY(),sM.refresh()}),cO.addEventListener("change",()=>{sM.setOrigin("torque",cO.checked),cj("torqueOffset",cO.checked),cY(),sM.refresh()}),cU.addEventListener("change",()=>{sb.setOrigin("cones",cU.checked),cj("conesOffset",cU.checked),cY(),sb.refresh()}),cN.addEventListener("change",()=>{sb.setOrigin("poinsot",cN.checked),cj("poinsotOffset",cN.checked),cY(),sb.refresh()});const ud=function(e,t=!1){sM.setColor("bodyFrame",e),t&&cj("bodyFrameColor",e)},up=function(e,t=!1){sM.setColor("spaceFrame",e),t&&cj("spaceFrameColor",e)},um=function(e,t=!1){sM.setColor("omega",e),t&&cj("omegaColor",e)},uf=function(e,t=!1){sM.setColor("h",e),t&&cj("hColor",e)},ug=function(e,t=!1){sM.setColor("torque",e),t&&cj("torqueColor",e)},u_=function(e,t=!1){sb.setColor("bodyCone",e),t&&cj("bodyConeColor",e)},uv=function(e,t=!1){sb.setColor("spaceCone",e),t&&cj("spaceConeColor",e)},uy=function(e,t=!1){sb.setColor("ellipsoid",e),t&&cj("ellipsoidColor",e)},ux=function(e,t=!1){sb.setColor("plane",e),t&&cj("planeColor",e)};cD.addEventListener("change",()=>{ud(oC=cD.value,!0),cY()}),cF.addEventListener("change",()=>{up(oP=cF.value,!0),cY()}),cB.addEventListener("change",()=>{um(oI=cB.value,!0),cY()}),cz.addEventListener("change",()=>{uf(oO=cz.value,!0),cY()}),ck.addEventListener("change",()=>{ug(oU=ck.value,!0),cY()}),cV.addEventListener("change",()=>{u_(oN=cV.value,!0),cY()}),cH.addEventListener("change",()=>{uv(oD=cH.value,!0),cY()}),cG.addEventListener("change",()=>{uy(oF=cG.value,!0),cY()}),cq.addEventListener("change",()=>{ux(oB=cq.value,!0),cY()});const uM=function(){"none"===oV.style.display?(oV.style.display="block",oq.style.display="block",oj.style.display="block",oY.style.display="block",oZ.style.display="block",oQ.style.display="block",oJ.style.display="block",oH.style.display="block",oG.style.display="block",hy.style.display="none",uE(),c$(),cQ("numerical")):(oV.style.display="none",oq.style.display="none",oj.style.display="none",oY.style.display="none",oZ.style.display="none",oQ.style.display="none",oJ.style.display="none",oH.style.display="none",oG.style.display="none",hy.style.display="grid",cQ("none"))};oW.addEventListener("click",()=>{cZ(),uM()}),oX.addEventListener("click",()=>{uM()});const ub=function(e){switch(e){case"info-intro":h_.innerHTML=`<p class="p-normal">The purpose of Aerovisualizer is to 
      assist in teaching or reinforcing concepts in aerospace engineering by presenting 
      them in interesting and engaging ways.  Subjects are displayed as 2D and 3D 
      animations to complement the dry equations found in textbooks and online.  Controls
      are also provided to manipulate the displays.</p>
      
      <p class="p-normal">Aerovisualizer currently focuses only on the orientation and rotational dynamics of 
      rigid bodies.  Topics include Euler angles, quaternions, direction cosines, angular 
      velocity and momentum and torque (ACS engines, gravity gradient, spinning top).  Also 
      included are space and body cones and Poinsot's construction.  It is assumed that  
      the user has taken or is currently taking a course covering these subjects.</p>`;break;case"info-how-to-use":h_.innerHTML=`
      <p class="p-normal">1) Click <em>mass</em> to set the mass and the three moments of inertia 
      of the rigid body.</p>
      <p class="p-normal">2) Click <em>&psi;&nbsp;&theta;&nbsp;&phi;</em> to set the initial 
      orientation (attitude).</p>
      <p class="p-normal">3) Click <em>&omega;&nbsp;/&nbsp;H</em> to set the initial angular velocity 
      or angular momentum.</p>
      <p class="p-normal">4) Click <em>&tau;</em> to set the the type of torque (if any) that you want 
      to apply.</p>
      <p class="p-normal">5) Click the <em>play</em> button to run the simulation.  Click the 
      <em>reset</em> button to return the rigid body to its initial state.</p>`;break;case"info-numerical":h_.innerHTML=`<p class="p-normal">Click <em>1 2 3</em> to show a numerical  
      display of the current state of the object. It consists of the 
      following:</p>
      
      <p class="p-normal">the moments of inertia, the angular velocity (&omega;, body frame), 
      the angular momentum (H, space frame), the applied external torque (&tau;, 
      body frame), the direction cosine matrix (DCM, body to space frame), the quaternion, 
      and the kinetic energy of rotation (T).</p>`;break;case"info-mass-prop":h_.innerHTML=`<p class="p-normal"><em>Mass Properties</em> is a 
      term that refers to the mass, moments of inertia, and products of 
      inertia of a physical object. A body-fixed vector basis can always 
      be chosen such that the products of inertia are zero, which 
      Aerovisualizer does.  In this case, the moments of inertia are 
      referred to as the principal moments of inertia.</p>

      <p class="p-normal">Every object has a companion object shaped like 
      a brick that has the exact same mass properties as the object itself.  
      For simplicity, Aerovisualizer displays only brick shaped objects.</p>
    
      <p class="p-normal">Click <em>mass</em>.  Use the slider 
      controls to set the mass and the 3 dimensions of the brick 
      representing the rigid body.  The 3 moments of inertia are displayed
      as Ixx, Iyy, and Izz for the x, y, and z body axes, respectively.</p>`;break;case"info-attitude":h_.innerHTML=`<p class="p-normal">The two most common ways 
      to specify orientation are 1) Euler angles, and 2) quaternions.  
      Click <em>&psi;&nbsp;&theta;&nbsp;&phi;</em>, and use the button that appears 
      to toggle between Euler angles and quaternions.</p>

      <p class="p-normal"><em>Euler Angles</em>: By default, Aervisualizer uses the "ZYX" 
      sequence of Euler rotations, where the first rotation is &psi; (yaw), the 
      second is &theta; (pitch), and the third is &phi; (roll).  Use the sliders to set 
      these values in degrees.  Use the buttons to set the values to zero.  Tait-Bryan 
      rotation sequences are a subset of the set of the Euler angle sequences.  Choose 
      from 6 intrinsic Tait-Bryan sequences.

      <p class="p-normal"><em>Quaternions</em>: Use the sliders to set the 
      rotation angle of the object in degrees and also the components of the unit 
      vector &lambda; about which the rotation is made.  Use the buttons to set 
      the values to zero.  The components of the quaternion are displayed as 
      w, x, y, and z.</p>`;break;case"info-angular-rates":h_.innerHTML=`<p class="p-normal">Click <em>&omega;&nbsp;/&nbsp;H</em>  
      and use the radio buttons to select either &omega; (angular velocity) or H 
      (angular momentum).</p>
      
      <p class="p-normal">Use the sliders to set the magnitude of &omega; or 
      H and the 3 components of a unit vector in the direction of the chosen 
      vector (body-frame).  Use the buttons to set the values to zero.</p>
    
      <p class="p-normal">Angular velocity is specified in radians/second.  
      Angular momentum is in the units of your choice (see <em>units</em>).  
      The x, y, and z components of &omega; are displayed as P, Q, and R, 
      respectively.</p>`;break;case"info-cones":h_.innerHTML=`<p class="p-normal">Rigid bodies for which 2 of 
      the 3 principal moments of inertia at the center of mass are equal are 
      said to be axially symmetric whether or not the mass distribution is 
      symmetrical.  Such bodies exhibit a characteristic behavior while 
      rotating without torque.</p>
      
      <p class="p-normal">For these rigid bodies, &omega; traces a cone about 
      the H vector.  This cone is referred to as the <em>space cone</em> and remains 
      inertially fixed. The &omega; vector also traces a body-fixed cone called the 
      <em>body cone</em> about the axis of symmetry.</p>
    
      <p class="p-normal">Long thin objects undergo direct precession, and the 
      body cone rolls without slipping on the outside of the space cone.  Flat 
      objects undergo retrograde precession, and the inside surface of the body 
      cone rolls without slipping on the outside surface of the space cone.</p>

      <p class="p-normal">The following conditions must be met for the cones to 
      appear: 1) Two of the three moments of inertia must be equal, 2) &omega; 
      must not be zero, 3) &omega; and H cannot be colinear, 4) the <em>no torque</em> 
      option must be selected, and 5) the cones must be set non-transparent in the 
      preferences.</p>`;break;case"info-poinsot":h_.innerHTML=`<p class="p-normal">A method of analyzing the free 
      motion of a rigid body was developed by <em>Louis Poinsot</em> in 1834.  In the 
      Poinsot method, the rotational inertia characteristics can be expressed 
      with an <em>ellipsoid of inertia</em>.</p>
    
      <p class="p-normal">The angular momentum can be represented by a plane called
      the <em>invariable plane</em> which is perpendicular to the H vector.  Under 
      torque-free motion, the ellipsoid touches the plane at a point on a line along 
      the &omega; vector.  Curves called the <em>polhode</em> and the <em>herpolhode</em> 
      can be constructed from the osculation points.  Aerovisualizer generates these 
      curves for up to half a minute and then displays them when complete.</p>

      <p class="p-normal">The following conditions must be met for the Poinsot's 
      construction to appear: 1) &omega; must not be zero, 2) the <em>no torque</em> 
      option must be selected, and 3) the Poinsot construction must be set 
      non-transparent in the preferences.</p>`;break;case"info-torque-general":h_.innerHTML=`<p class="p-normal">Click <em>&tau;</em> and use the menu 
      that appears to choose from the following torque options:</p>
      
      <p class="p-normal">1) no torque, space frame, 2) body frame, 3) ACS stabilization, 
      4) gravity gradient, and 5) spinning top.</p>`;break;case"info-torque-no-torque":h_.innerHTML=`<p class="p-normal">Choose <em>no torque</em>. Set the 
      initial attitude and rotation rate.  Click the <em>play</em> button.</p>
      
      <p class="p-normal"><em>Note</em>: Space and body cones and Poinsot's 
      construction only appear when using this option.
      </p>`;break;case"info-torque-space-body":h_.innerHTML=`<p class="p-normal"> 
      Choose the <em>space frame</em> torque or <em>body frame</em> torque option.  
      Set the magnitude of the constant torque vector and the 3 component of a unit 
      vector in that direction.  Use the buttons to set the values to zero.</p>

      <p class="p-normal">Click the <em>play</em> button to observe the effect of the 
      torque.  The angular rate increases until you click <em>pause</em> or 
      <em>reset</em> or until &omega; reaches the maximum allowed (see 
      <em>preferences/general</em>).</p>`;break;case"info-torque-acs":h_.innerHTML=`<p class="p-normal">The attitude control system 
      (ACS) stabilization torque option implements a basic logical 
      algorithm for reducing the rotational rate of the object.  If the 
      absolute value of a component of &omega; is greater than 
      <em>&omega; dead zone</em>, a torque equal to <em>torque</em> is applied 
      to reduce the rate in that direction.  ACS thrusters and flames are not 
      rendered and are left to the imagination.</p>

      <p class="p-normal">  
      Choose the <em>ACS stabilization</em> torque and use the sliders to 
      set the values of <em>&omega; dead zone</em> (deg/sec) and <em>torque</em>.  
      Set the initial attitude and &omega;/H.  Click the <em>play</em> button to 
      observe the effect of the torque.`;break;case"info-torque-gg":h_.innerHTML=`<p class="p-normal">The gravity gradient torque 
      results from the difference in the pull of gravity along the gravitational 
      potential field gradient going from one end of the rotating body to the other.  
      It is most pronounced for long thin objects whose long direction is at a 
      45&deg; angle to the local vertical.</p>

      <p class="p-normal">This torque is proportional to &mu;&nbsp;/&nbsp;R&sup3;, 
      where &mu; is the gravitational constant of the planet, and R is the 
      distance to the center of the planet.  Because the gravity gradient effect is 
      very small for earth-orbiting objects, Aerovisualizer lets you exagerate 
      this effect up to 1 million times the value for low earth orbit.  The gravity 
      gradient torque is also a function of the orbital period, but this effect is 
      ignored.</p>

      <p class="p-normal">Choose the <em>gravity gradient</em> torque and use the 
      slider to set the value of the torque magnification.  Set the initial 
      attitude (45&deg; for example) and rotation rate (such as zero).  
      Click the <em>play</em> button to observe the effect of the torque.`;break;case"info-torque-top":h_.innerHTML=`<p class="p-normal">The spinning top torque is the 
      torque generated by the normal force from a table top acting at the point 
      of a spinning top.  The torque is equal to r&KHcy;f, where r is a vector from 
      the center of mass of the top to the point where it meets the table, and f 
      equals mg.</p>

      <p class="p-normal">Aerovisualizer does not render either a top shape nor 
      a table, so these are left to the imagination.</p>
    
      <p class="p-normal">Choose the <em>spinning top</em> torque.  Use the <em>r</em>
      slider to set the length and sign of the r vector.  Its direction is along 
      the x body axis.  Use the <em>g</em> slider to set the magnitude of the 
      gravity vector.  Its direction is downward along the local vertical.</p>

      <p class="p-normal">Set &omega; to be mostly in the x body axis direction.  
      Click the <em>play</em> button to observe the effect of the torque.</p>`;break;case"info-prefs-main":h_.innerHTML=`<p class="p-normal">Click <em>pref</em>.  Buttons appear 
      labeled as below:</p>
      <p class="p-normal">default, general, object, body frame, space frame, angular 
      velocity vector, angular momentum vector,
      torque vector, axis orientation, Euler angle order, space and body cones, and
      Poinsot's construction.</p>`;break;case"info-prefs-default":h_.innerHTML=`<p class="p-normal">Click the button to set the 
      preferences to their default values.</p>`;break;case"info-prefs-general":h_.innerHTML=`<p class="p-normal"><em>object &ldquo;skin&rdquo;</em> - Use the menu 
      to set the image being rendered for the 
      object.  Choose Cessna 172, the New Horizons space probe, or axis labels. 
      The object retains the brick shape.</p>
      <p class="p-normal"><em>mass properties</em> - Use the menu to set the mass properties to those of 
      the Cessna 172 or the New Horizons space probe (metric units) if desired.</p>
      <p class="p-normal"><em>environment</em> - Use the radio buttons to set the environment to 
      be either a stormy atmosphere or outer space above Jupiter.</p>
      <p class="p-normal"><em>maximum rotation rate</em> - Use the slider to set the maximum rotation 
      rate (&vert;&omega;&vert;) that the object can attain.  The range is from 100 &deg;/sec to 
      1000 &deg;/sec.  The default is 720 &deg;/sec.  The simulation stops if &vert;&omega;&vert; surpasses 
      the maximum.  Click the reset button to return to normal.</p>
      <p class="p-normal"><em>vector size</em> - Use the slider to set how large all of the vectors 
      appear (body frame, space frame, &omega;, H, &tau;).  This also affects 
      the size of the space and body cones.  NOTE: The rendered vectors are designed to convey direction 
      only and not magnitude.  The magnitudes are obtained from the numerical display.</p>`;break;case"info-prefs-trans-offset-color":h_.innerHTML=`<p class="p-normal">Use the sliders to set the <em>transparency</em> 
      (visibility) of the brick object, the vectors and vector frames, the space and body cones, 
      and Poinsot's construction.  Move the sliders completely to the right to remove items from 
      the scene.</p>

      <p class="p-normal">Check <em>offset</em> to make the items listed above appear off center.</p>
    
      <p class="p-normal">Use the menu to choose the <em>color</em> of the items listed above 
      (excluding the brick object).</p>`;break;case"info-prefs-axis-orientation":h_.innerHTML=`<p class="p-normal">Use the radio buttons to set 
      the orientation of the space (inertial) frame.  The z axis points 
      down by the north-east-down (NED) convention and by default.</p>`;break;case"info-prefs-euler-angle-order":h_.innerHTML=`<p class="p-normal">Use the radio buttons to set 
      the sequence of Euler rotations to be used when designating Euler angles.</p>

      <p class="p-normal">Choose from 6 intrinsic Tait-Bryan rotation sequences.  
      By default, Aerovisualizer uses the "ZYX" sequence, where the first rotation 
      is &psi; (yaw) about the Z axis, the second is &theta; (pitch) about the 
      rotated Y&prime; axis, and the third is &phi; (roll) about the twice-rotated 
      X&Prime; axis.</p>`;break;case"info-units":h_.innerHTML=`<p class="p-normal">You might ask, "What are the units of 
      length and mass"?  The answer is that it does not matter.  It is up to you.</p>

      <p class="p-normal">If you choose the meter for length and the kilogram for mass, then 
      torque is expressed as kg m&sup2;/s&sup2; (Newton-meters), angular momentum is in 
      kg m&sup2;/s, and the moment of inertia is in kg m&sup2;.  The English units are the 
      foot and the slug.  You can use the verst and the dalton if that is your 
      preference.</p>
      
      <p class="p-normal">The unit of time is the second.</p>`;break;case"info-contact-disclaimer":h_.innerHTML=`<p class="p-normal">Aerovisualizer is an open source 
      project.  To report bugs or suggestions or to contribute to its future development, 
      please contact us at github.com/eastmanrj/aerovisualizer.</p>

      <p class="p-normal">We do not take responsibility for missed problems on 
      quizes, tests, projects, or homework due to software bugs or the 
      misinterpretation of displays in Aerovisualizer.  Do not use Aerovisualizer 
      for hardware or software qualification in either aerospace or other 
      industries or in other applications.</p>`}};hg.addEventListener("change",()=>{let e=hg.value;ub(e)});const uS=function(e){switch(hi.disabled=!1,ha.disabled=!1,hs.disabled=!1,ho.disabled=!1,hl.disabled=!1,hh.disabled=!1,hc.disabled=!1,hp.disabled=!1,hu.disabled=!1,hd.disabled=!1,hm.disabled=!1,hr.disabled=!1,hC.style.display="none",hb.style.display="none",hO.style.display="none",hU.style.display="none",hN.style.display="none",hD.style.display="none",hF.style.display="none",hB.style.display="none",hP.style.display="none",hI.style.display="none",hz.style.display="none",hk.style.display="none",e){case"default":hC.style.display="grid",hi.disabled=!0;break;case"general":hb.style.display="grid",hr.disabled=!0;break;case"object":hO.style.display="grid",ha.disabled=!0;break;case"bodyFrame":hU.style.display="grid",hs.disabled=!0;break;case"spaceFrame":hN.style.display="grid",ho.disabled=!0;break;case"omega":hD.style.display="grid",hl.disabled=!0;break;case"h":hF.style.display="grid",hh.disabled=!0;break;case"torque":hB.style.display="grid",hc.disabled=!0;break;case"axisOrientation":hP.style.display="grid",hu.disabled=!0;break;case"eulerAngleOrder":hI.style.display="grid",hd.disabled=!0;break;case"cones":hz.style.display="grid",hp.disabled=!0;break;case"poinsot":hk.style.display="grid",hm.disabled=!0}};hi.addEventListener("click",()=>{uS("default")}),hn.addEventListener("click",()=>{localStorage.clear(),location.reload()}),hu.addEventListener("click",()=>{uS("axisOrientation")}),hd.addEventListener("click",()=>{uS("eulerAngleOrder")}),ha.addEventListener("click",()=>{uS("object")}),hs.addEventListener("click",()=>{uS("bodyFrame")}),ho.addEventListener("click",()=>{uS("spaceFrame")}),hl.addEventListener("click",()=>{uS("omega")}),hh.addEventListener("click",()=>{uS("h")}),hc.addEventListener("click",()=>{uS("torque")}),hp.addEventListener("click",()=>{uS("cones")}),hm.addEventListener("click",()=>{uS("poinsot")}),hr.addEventListener("click",()=>{uS("general")}),hf.addEventListener("click",()=>{cK()});const uE=function(){i.aspect=1,i.updateProjectionMatrix(),n.setSize(oV.clientWidth,oV.clientHeight),n.setPixelRatio(window.devicePixelRatio),n.clear(),n.render(t,i)};window.addEventListener("resize",()=>{uE()}),window.addEventListener("orientationchange",()=>{uE()});const uT=function(e){!1===e?(oq.innerHTML="1&nbsp;2&nbsp;3",oj.innerHTML="mass",oY.innerHTML="&psi;&nbsp;&theta;&nbsp;&phi;",oZ.innerHTML="&omega;&nbsp;/&nbsp;H",oQ.innerHTML="&tau;",oJ.innerHTML="pref",oq.style.backgroundColor="rgb(125,125,255)",oj.style.backgroundColor="rgb(125,125,255)",oY.style.backgroundColor="rgb(125,125,255)",oZ.style.backgroundColor="rgb(125,125,255)",oQ.style.backgroundColor="rgb(125,125,255)",oJ.style.backgroundColor="rgb(125,125,255)",oG.style.backgroundColor="rgb(125,125,255)",oH.style.backgroundColor="rgb(125,125,255)"):(oq.innerHTML="max",oj.innerHTML="&omega;",oY.innerHTML="max",oZ.innerHTML="&omega;",oQ.innerHTML="max",oJ.innerHTML="&omega;",oq.style.backgroundColor="red",oj.style.backgroundColor="red",oY.style.backgroundColor="red",oZ.style.backgroundColor="red",oQ.style.backgroundColor="red",oJ.style.backgroundColor="red",oG.style.backgroundColor="red",oH.style.backgroundColor="red")};var uw={};uw=new URL(c("27Lyk").resolve("htyD6"),import.meta.url).toString();var uA={};uA=new URL(c("27Lyk").resolve("l3Exf"),import.meta.url).toString();var uR={};uR=new URL(c("27Lyk").resolve("92T0F"),import.meta.url).toString();var uL={};uL=new URL(c("27Lyk").resolve("85ela"),import.meta.url).toString();var uC={};uC=new URL(c("27Lyk").resolve("frnPV"),import.meta.url).toString();var uP={};uP=new URL(c("27Lyk").resolve("iAx77"),import.meta.url).toString();var uI={};uI=new URL(c("27Lyk").resolve("kkgog"),import.meta.url).toString();var uO={};uO=new URL(c("27Lyk").resolve("6WHLY"),import.meta.url).toString();var uU={};uU=new URL(c("27Lyk").resolve("LtqC0"),import.meta.url).toString();const uN=function(e="atmosphere"){switch(e){case"atmosphere":null!=sm&&(sm=null);// let img = document.createElement('img');
// img.src = new URL('hero.jpg', import.meta.url);
// document.body.appendChild(img);
let i=new URL(uw),n=new URL(uA),r=new URL(uR),a=new URL(uL),s=new URL(uC),o=new URL(uP);sm=new aO().load([i.pathname,n.pathname,r.pathname,a.pathname,s.pathname,o.pathname]),// background = new THREE.CubeTextureLoader().load(['./static/img/stormydays_ft.jpg','./static/img/stormydays_bk.jpg','./static/img/stormydays_up.jpg','./static/img/stormydays_dn.jpg','./static/img/stormydays_rt.jpg','./static/img/stormydays_lf.jpg']);
t.background=sm,null!=sf&&t.remove(sf),null!=sg&&t.remove(sg);break;case"space":null!=sm&&(sm=null);let l=new URL(uI);// background = new THREE.CubeTextureLoader().load(['./img/stars.jpg','./img/stars.jpg','./img/stars.jpg','./img/stars.jpg','./img/stars.jpg','./img/stars.jpg']);
sm=new aO().load([l.pathname,l.pathname,l.pathname,l.pathname,l.pathname,l.pathname]),t.background=sm;let h=new aU;if(null===sf){sf=null;let e=new ia(150,150,1,1),t=new URL(uO),i=h.load(t.pathname),n=new tm({map:i,visible:!0,side:2,color:16777215,transparent:!0,opacity:1});(sf=new tX(e,n)).receiveShadow=!1,sf.castShadow=!1,sf.position.set(0,-30,0),sf.rotation.x=.5*Math.PI}if(null===sg){let e=new ia(15,15,1,1),t=new URL(uU),i=h.load(t.pathname),n=new tm({map:i,visible:!0,side:2,color:16777215});(sg=new tX(e,n)).receiveShadow=!1,sg.castShadow=!1,sg.position.set(-100,100,100);// need to rotate the image of the sun to make it appear round
let r=new et,a=new ei(-100,100,100),s=new ei(1,1,1);r.setFromAxisAngle(new ei(-1,0,1),Math.PI/4),sg.matrix.compose(a,r,s),sg.applyQuaternion(r)}t.add(sf),t.add(sg)}},uD=function(e=!0){e&&!sM.constructionComplete&&requestAnimationFrame(uD),sM.constructionComplete&&(sx.constructionComplete=!0,sb.constructionComplete=!0,cQ("numerical"),uS("none"),i.aspect=1,i.updateProjectionMatrix(),r=i.position.x,a=i.position.y,s=i.position.z,n.setSize(oV.clientWidth,oV.clientHeight),n.setPixelRatio(window.devicePixelRatio),uc("object",ou),uc("bodyFrame",od),uc("spaceFrame",og),uc("omega",o_),uc("h",ov),uc("torque",oy),uc("cones",ox),uc("poinsot",oM),hi.style.display="none",hu.style.display="none",hd.style.display="none",ha.style.display="none",hs.style.display="none",ho.style.display="none",hl.style.display="none",hh.style.display="none",hc.style.display="none",hp.style.display="none",hm.style.display="none",hr.style.display="none",hf.style.display="none",hy.style.display="none",hg.value="info-intro",ub(hg.value),sx.showObject(ou<95),sM.showBodyFrame(od<95),sM.showBodyAxis(op,om,of),sM.showSpaceFrame(og<95),sM.showOmega(o_<95),sM.showAngularMomentum(ov<95),sM.showTorque(oy<95),uh(ol),ut(s4),sb.showCones(!1),sb.showPoinsot(!1),1===s6&&(sb.showCones(ox<95),sb.showPoinsot(oM<95)),us(),ud(oC),up(oP),um(oI),uf(oO),ug(oU),u_(oN),uv(oD),uy(oF),ux(oB),c4(),sx.setTorque(s6,s7,s8,s9,oe),uo(!0),sM.setVectorSize(oc),sM.needsRefresh=!0,sb.setConeSize(oc),cl.value=Number(oc))},uF=function(){//icons came from tabler-icons.io
sE=!sE,oH.innerHTML=sE?`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-player-pause-filled" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
  <path d="M9 4h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h2a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2z" stroke-width="0" fill="currentColor"></path>
  <path d="M17 4h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h2a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2z" stroke-width="0" fill="currentColor"></path>
</svg>`:`<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-player-play-filled" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
  <path d="M6 4v16a1 1 0 0 0 1.524 .852l13 -8a1 1 0 0 0 0 -1.704l-13 -8a1 1 0 0 0 -1.524 .852z" stroke-width="0" fill="currentColor"></path>
</svg>`,sx.realTime=0,sx.simulationTime=0,sy.getDelta()};oH.addEventListener("click",()=>{uF()}),oG.addEventListener("click",()=>{uT(!1),c4()});const uB=function(e=!0){if(e&&requestAnimationFrame(uB),sS.update(),r!==i.position.x&&a!==i.position.y&&s!==i.position.z&&(r=i.position.x,a=i.position.y,s=i.position.z,sM.needsRefresh=!0,sb.needsRefresh=!0),n.clear(),n.render(t,i),sE){let e=sy.getDelta();// dt for 60 fps is 0.01666
sx.simulate(e),1===s6&&(oM<95&&(sb.receiveEphemeralData(...sx.sendPaCEphemeralData()),sb.doPolhodeHerpolhodeComputations()),sb.needsRefresh=!0),sM.needsRefresh=!0,sx.getOmegaMagnitude()>oh&&(uT(!0),uF()),uo()}sx.refresh(),sM.receiveVectorData(...sx.sendVectorData()),sM.refresh(),sb.refresh()},uz=function(){let e=JSON.parse(localStorage.getItem("aerovisualizerData"));return e}();!function(){t=new rp,(sy=new aG).getElapsedTime();let e=new aH(9474192),r=new aV(16777215);r.position.set(-20,20,20),r.castShadow=!1,r.decay=0,r.intensity=1,t.add(e),t.add(r),(n=new rd({devicePixelRatio:window.devicePixelRatio,alpha:!0})).setClearColor(0),n.setSize(oV.clientWidth,oV.clientHeight),n.setPixelRatio(window.devicePixelRatio),n.autoClear=!1,(i=new t1(45,1,.1,1e3)).aspect=1,i.position.set(s_.x,s_.y,s_.z),i.lookAt(sv),n.shadowMap.enabled=!1,n.shadowMap.type=2,oV.appendChild(n.domElement),// orbitControls.enableDamping;
(sS=new sp(i,n.domElement)).enableZoom=!1}(),function(e,i){let n=sH;if(e)for(let t of(sG=JSON.parse(JSON.stringify(e)),e))switch(t.name){case"mass":sq=+t.value;break;case"length":sW=t.value;break;case"width":sX=+t.value;break;case"height":sj=+t.value;break;case"attitudeOption":oz=t.value;break;case"eulerAngle1":sY=t.value;break;case"eulerAngle2":sZ=t.value;break;case"eulerAngle3":sQ=t.value;break;case"eulerOrder":ok=t.value;break;case"omegaMagnitude":s1=t.value/10;//stored value is from 0 to 100
break;case"maxOmega":oh=t.value;break;case"omHihat":s2=t.value;break;case"omHjhat":s3=t.value;break;case"omHkhat":s5=t.value;break;case"omegaOrH":s4=t.value;break;case"torqueOption":s6=t.value;break;case"axesOrientation":n=t.value;break;case"environment":ol=t.value;break;case"showBodyXVector":op=t.value;break;case"showBodyYVector":om=t.value;break;case"showBodyZVector":of=t.value;break;case"objectTransparency":ou=t.value;break;case"bodyFrameTransparency":od=t.value;break;case"spaceFrameTransparency":og=t.value;break;case"omegaTransparency":o_=t.value;break;case"hTransparency":ov=t.value;break;case"torqueTransparency":oy=t.value;break;case"conesTransparency":ox=t.value;break;case"poinsotTransparency":oM=t.value;break;case"bodyFrameColor":oC=t.value;break;case"spaceFrameColor":oP=t.value;break;case"omegaColor":oI=t.value;break;case"hColor":oO=t.value;break;case"torqueColor":oU=t.value;break;case"bodyConeColor":oN=t.value;break;case"spaceConeColor":oD=t.value;break;case"ellipsoidColor":oF=t.value;break;case"planeColor":oB=t.value;break;case"objectOffset":ob=t.value;break;case"bodyFrameOffset":oS=t.value;break;case"spaceFrameOffset":oE=t.value;break;case"omegaOffset":oT=t.value;break;case"hOffset":ow=t.value;break;case"torqueOffset":oA=t.value;break;case"conesOffset":oR=t.value;break;case"poinsotOffset":oL=t.value;break;case"objectMassProperties":oo=t.value;break;case"objectAppearance":os=t.value;break;case"vectorSize":oc=t.value;break;case"torqueMag":s7=t.value;break;case"torqueIhat":s8=t.value;break;case"torqueJhat":s9=t.value;break;case"torqueKhat":oe=t.value;break;case"torqueACSDZ":ot=t.value;break;case"torqueACSTorque":oi=t.value;break;case"torqueGG":on=t.value;break;case"torqueTopR":or=t.value;break;case"torqueTopGrav":oa=t.value}switch(null===sx&&(sx=new se(sq,sW,sX,sj,t,i,os,oo)),null===sM&&(sM=new sa(t,i)),null===sb&&(sb=new sh(t)),un(),sx.setEulerOrder(ok),lt.value=sY,li.value=sZ,ln.value=sQ,c6(),oK.value=sL.indexOf(sq),o$.value=sW,o0.value=sX,o1.value=sj,lL.value=10*s1,cs.value=oh,co.innerText=oh,lC.value=s2,lP.value=s3,lI.value=s5,ch.value=ou,cc.innerText=ou,cu.value=od,cg.value=og,cv.value=o_,cx.value=ov,cb.value=oy,cE.value=ox,cw.value=oM,s6){case 1:lq.value="no-torque";break;case 2:lq.value="space-frame";break;case 3:lq.value="body-frame";break;case 4:lq.value="ACS-stabilization";break;case 5:lq.value="gravity-gradient";break;case 6:lq.value="top"}for(let e of(lW.value=5*s7,lX.value=s8,lj.value=s9,lY.value=oe,lK.value=10*ot,l$.value=100*oi,l1.value=or,l2.value=oa,l3.innerHTML=s7,l5.innerHTML=s8,l4.innerHTML=s9,l6.innerHTML=oe,l7.innerHTML=Number(ot).toFixed(1).toString(),l8.innerHTML=Number(oi).toFixed(2).toString(),sx.setACSDeadzoneOmega(ot*sT),sx.setACSTorque(oi),sR=sw[on],l9.innerHTML=sA[on],sx.set3MuOverR3(3*sR),he.innerHTML=or,ht.innerHTML=oa,cX))e.checked=e.value===ok;for(let e of cW)e.checked=e.value===n;cp.checked=op,cm.checked=om,cf.checked=of,o2.innerHTML=sq,o3.innerHTML=sW,o5.innerHTML=sX,o4.innerHTML=sj,cR.checked=ob,cL.checked=oS,cC.checked=oE,cP.checked=oT,cI.checked=ow,cU.checked=oR,cN.checked=oL,cD.value=oC,cF.value=oP,cB.value=oI,cz.value=oO,ck.value=oU,cV.value=oN,cH.value=oD,cG.value=oF,cq.value=oB,sx.setOffset(ob),sM.setOffsets(oS,oE,oT,ow,oA),sb.setOffsets(oR,oL),sx.setOrientation(n),sM.setOrientation(n),sb.setOrientation(n),cr.value=oo,cn.value=os}(uz,i),uD(),uB();//# sourceMappingURL=index.cf700e3d.js.map

//# sourceMappingURL=index.cf700e3d.js.map
